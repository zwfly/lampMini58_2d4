C51 COMPILER V9.52.0.0   BSP_KEY                                                           11/20/2017 00:30:12 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BSP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\bsp_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_key.c LARGE OPTIMIZE(8,SIZE) BROWSE INCDIR(..\Common\inc;
                    -..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_key.lst) TABS(2
                    -) OBJECT(.\Out\Objects\bsp_key.obj)

line level    source

   1          /*
   2           *********************************************************************************************************
   3           *
   4           *  模块名称 : 独立按键驱动模块
   5           *  文件名称 : bsp_key.c
   6           *  版    本 : V1.0
   7           *  说    明 : 扫描独立按键，具有软件滤波机制，具有按键FIFO。可以检测如下事件：
   8           *        (1) 按键按下
   9           *        (2) 按键弹起
  10           *        (3) 长按键
  11           *        (4) 长按时自动连发
  12           *
  13           *********************************************************************************************************
  14           */
  15          
  16          #include "bsp.h"
  17          
  18          static idata KEY_T s_tBtn[KEY_COUNT];
  19          static idata KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
  20          
  21          static void bsp_InitKeyVar(void);
  22          static void bsp_InitKeyHard(void);
  23          static void bsp_DetectKey(uint8_t i);
  24          
  25          /*
  26           *********************************************************************************************************
  27           *  函 数 名: IsKeyDownX
  28           *  功能说明: 判断按键是否按下
  29           *  形    参: 无
  30           *  返 回 值: 返回值1 表示按下，0表示未按下
  31           *********************************************************************************************************
  32           */
  33          
  34          static uint8_t IsKeyDown1(void) {
  35   1        return ~P30;
  36   1      }
  37          
  38          static uint8_t IsKeyDown2(void) {
  39   1        return ~P17;
  40   1      }
  41          /*
  42           *********************************************************************************************************
  43           *  函 数 名: bsp_InitKey
  44           *  功能说明: 初始化按键. 该函数被 bsp_Init() 调用。
  45           *  形    参:  无
  46           *  返 回 值: 无
  47           *********************************************************************************************************
  48           */
  49          void bsp_InitKey(void) {
  50   1        bsp_InitKeyVar(); /* 初始化按键变量 */
  51   1        bsp_InitKeyHard(); /* 初始化按键硬件 */
  52   1      }
  53          
C51 COMPILER V9.52.0.0   BSP_KEY                                                           11/20/2017 00:30:12 PAGE 2   

  54          /*
  55           *********************************************************************************************************
  56           *  函 数 名: bsp_PutKey
  57           *  功能说明: 将1个键值压入按键FIFO缓冲区。可用于模拟一个按键。
  58           *  形    参:  _KeyCode : 按键代码
  59           *  返 回 值: 无
  60           *********************************************************************************************************
  61           */
  62          void bsp_PutKey(uint8_t _KeyCode) {
  63   1        s_tKey.Buf[s_tKey.Write] = _KeyCode;
  64   1      
  65   1        if (++s_tKey.Write >= KEY_FIFO_SIZE) {
  66   2          s_tKey.Write = 0;
  67   2        }
  68   1      }
  69          
  70          /*
  71           *********************************************************************************************************
  72           *  函 数 名: bsp_GetKey
  73           *  功能说明: 从按键FIFO缓冲区读取一个键值。
  74           *  形    参:  无
  75           *  返 回 值: 按键代码
  76           *********************************************************************************************************
  77           */
  78          uint8_t bsp_GetKey(void) {
  79   1        uint8_t ret;
  80   1      
  81   1        if (s_tKey.Read == s_tKey.Write) {
  82   2          return KEY_NONE;
  83   2        } else {
  84   2          ret = s_tKey.Buf[s_tKey.Read];
  85   2      
  86   2          if (++s_tKey.Read >= KEY_FIFO_SIZE) {
  87   3            s_tKey.Read = 0;
  88   3          }
  89   2          return ret;
  90   2        }
  91   1      }
  92          
  93          /*
  94           *********************************************************************************************************
  95           *  函 数 名: bsp_GetKey2
  96           *  功能说明: 从按键FIFO缓冲区读取一个键值。独立的读指针。
  97           *  形    参:  无
  98           *  返 回 值: 按键代码
  99           *********************************************************************************************************
 100           */
 101          uint8_t bsp_GetKey2(void) {
 102   1        uint8_t ret;
 103   1      
 104   1        if (s_tKey.Read2 == s_tKey.Write) {
 105   2          return KEY_NONE;
 106   2        } else {
 107   2          ret = s_tKey.Buf[s_tKey.Read2];
 108   2      
 109   2          if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
 110   3            s_tKey.Read2 = 0;
 111   3          }
 112   2          return ret;
 113   2        }
 114   1      }
 115          
C51 COMPILER V9.52.0.0   BSP_KEY                                                           11/20/2017 00:30:12 PAGE 3   

 116          /*
 117           *********************************************************************************************************
 118           *  函 数 名: bsp_GetKeyState
 119           *  功能说明: 读取按键的状态
 120           *  形    参:  _ucKeyID : 按键ID，从0开始
 121           *  返 回 值: 1 表示按下， 0 表示未按下
 122           *********************************************************************************************************
 123           */
 124          uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
 125   1        return s_tBtn[_ucKeyID].State;
 126   1      }
 127          
 128          /*
 129           *********************************************************************************************************
 130           *  函 数 名: bsp_SetKeyParam
 131           *  功能说明: 设置按键参数
 132           *  形    参：_ucKeyID : 按键ID，从0开始
 133           *      _LongTime : 长按事件时间
 134           *       _RepeatSpeed : 连发速度
 135           *  返 回 值: 无
 136           *********************************************************************************************************
 137           */
 138          void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
 139   1        s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
 140   1        s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
 141   1        s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
 142   1      }
 143          
 144          /*
 145           *********************************************************************************************************
 146           *  函 数 名: bsp_ClearKey
 147           *  功能说明: 清空按键FIFO缓冲区
 148           *  形    参：无
 149           *  返 回 值: 按键代码
 150           *********************************************************************************************************
 151           */
 152          void bsp_ClearKey(void) {
 153   1        s_tKey.Read = s_tKey.Write;
 154   1      }
 155          
 156          /*
 157           *********************************************************************************************************
 158           *  函 数 名: bsp_InitKeyHard
 159           *  功能说明: 配置按键对应的GPIO
 160           *  形    参:  无
 161           *  返 回 值: 无
 162           *********************************************************************************************************
 163           */
 164          static void bsp_InitKeyHard(void) {
 165   1      
 166   1        set_P3M1_0;
 167   1        clr_P3M2_0;
 168   1      
 169   1        set_P1M1_7;
 170   1        P1M1 &= ~0x80;
 171   1      
 172   1      
 173   1      
 174   1      
 175   1      }
 176          
 177          /*
C51 COMPILER V9.52.0.0   BSP_KEY                                                           11/20/2017 00:30:12 PAGE 4   

 178           *********************************************************************************************************
 179           *  函 数 名: bsp_InitKeyVar
 180           *  功能说明: 初始化按键变量
 181           *  形    参:  无
 182           *  返 回 值: 无
 183           *********************************************************************************************************
 184           */
 185          static void bsp_InitKeyVar(void) {
 186   1        uint8_t i;
 187   1      
 188   1        /* 对按键FIFO读写指针清零 */
 189   1        s_tKey.Read = 0;
 190   1        s_tKey.Write = 0;
 191   1        s_tKey.Read2 = 0;
 192   1      
 193   1        /* 给每个按键结构体成员变量赋一组缺省值 */
 194   1        for (i = 0; i < KEY_COUNT; i++) {
 195   2          s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
 196   2          s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
 197   2          s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
 198   2          //s_tBtn[i].KeyCodeDown = 3 * i + 1;        /* 按键按下的键值代码 */
 199   2          //s_tBtn[i].KeyCodeUp   = 3 * i + 2;        /* 按键弹起的键值代码 */
 200   2          //s_tBtn[i].KeyCodeLong = 3 * i + 3;        /* 按键被持续按下的键值代码 */
 201   2          s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
 202   2          s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
 203   2        }
 204   1      
 205   1        /* 判断按键按下的函数 */
 206   1        s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 207   1        s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 208   1      
 209   1      }
 210          
 211          /*
 212           *********************************************************************************************************
 213           *  函 数 名: bsp_DetectKey
 214           *  功能说明: 检测一个按键。非阻塞状态，必须被周期性的调用。
 215           *  形    参:  按键结构变量指针
 216           *  返 回 值: 无
 217           *********************************************************************************************************
 218           */
 219          KEY_T *pBtn;
 220          static void bsp_DetectKey(uint8_t i) {
 221   1        pBtn = &s_tBtn[i];
 222   1        if (pBtn->IsKeyDownFunc()) {
 223   2          if (pBtn->Count < KEY_FILTER_TIME) {
 224   3            pBtn->Count = KEY_FILTER_TIME;
 225   3          } else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
 226   3            pBtn->Count++;
 227   3          } else {
 228   3            if (pBtn->State == 0) {
 229   4              pBtn->State = 1;
 230   4      
 231   4              /* 发送按钮按下的消息 */
 232   4              bsp_PutKey((uint8_t) (3 * i + 1));
 233   4            }
 234   3      
 235   3            if (pBtn->LongTime > 0) {
 236   4              if (pBtn->LongCount < pBtn->LongTime) {
 237   5                /* 发送按钮持续按下的消息 */
 238   5                if (++pBtn->LongCount == pBtn->LongTime) {
 239   6                  /* 键值放入按键FIFO */
C51 COMPILER V9.52.0.0   BSP_KEY                                                           11/20/2017 00:30:12 PAGE 5   

 240   6                  bsp_PutKey((uint8_t) (3 * i + 3));
 241   6                }
 242   5              } else {
 243   5                if (pBtn->RepeatSpeed > 0) {
 244   6                  if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
 245   7                    pBtn->RepeatCount = 0;
 246   7                    /* 常按键后，每隔10ms发送1个按键 */
 247   7                    bsp_PutKey((uint8_t) (3 * i + 1));
 248   7                  }
 249   6                }
 250   5              }
 251   4            }
 252   3          }
 253   2        } else {
 254   2          if (pBtn->Count > KEY_FILTER_TIME) {
 255   3            pBtn->Count = KEY_FILTER_TIME;
 256   3          } else if (pBtn->Count != 0) {
 257   3            pBtn->Count--;
 258   3          } else {
 259   3            if (pBtn->State == 1) {
 260   4              pBtn->State = 0;
 261   4      
 262   4              /* 发送按钮弹起的消息 */
 263   4              bsp_PutKey((uint8_t) (3 * i + 2));
 264   4            }
 265   3          }
 266   2          pBtn->LongCount = 0;
 267   2          pBtn->RepeatCount = 0;
 268   2        }
 269   1      }
 270          
 271          /*
 272           *********************************************************************************************************
 273           *  函 数 名: bsp_KeyScan
 274           *  功能说明: 扫描所有按键。非阻塞，被systick中断周期性的调用
 275           *  形    参:  无
 276           *  返 回 值: 无
 277           *********************************************************************************************************
 278           */
 279          void bsp_KeyScan(void) {
 280   1        uint8_t i;
 281   1      
 282   1        for (i = 0; i < KEY_COUNT; i++) {
 283   2          bsp_DetectKey(i);
 284   2        }
 285   1      }
 286          
 287          /***************************** (END OF FILE) *********************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    593    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     35    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
