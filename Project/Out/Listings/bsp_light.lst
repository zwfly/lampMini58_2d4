C51 COMPILER V9.52.0.0   BSP_LIGHT                                                         11/20/2017 00:30:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BSP_LIGHT
OBJECT MODULE PLACED IN .\Out\Objects\bsp_light.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_light.c LARGE OPTIMIZE(8,SIZE) BROWSE INCDIR(..\Common\in
                    -c;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_light.lst) TA
                    -BS(2) OBJECT(.\Out\Objects\bsp_light.obj)

line level    source

   1          /*
   2           * bsp_light.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ18ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "bsp.h"
   9          #include "app_dome.h"
  10          
  11          void Light_InitHard(void) {
  12   1      
  13   1        clr_P0M1_3;
  14   1        set_P0M2_3;
  15   1      
  16   1        clr_P0M1_4;
  17   1        set_P0M2_4;
  18   1      
  19   1        clr_P1M1_2;
  20   1        P1M2 |= SET_BIT2;
  21   1      //  set_P1M2_2;
  22   1      
  23   1        PWM0_P12_OUTPUT_ENABLE;
  24   1        PWM3_P04_OUTPUT_ENABLE
  25   1        ;
  26   1        PWM5_P03_OUTPUT_ENABLE;
  27   1      
  28   1        PWM_IMDEPENDENT_MODE;
  29   1        PWM_CLOCK_DIV_2
  30   1        ;
  31   1        PWMPH = 0xFF;
  32   1        PWMPL = 0xFF;
  33   1        /**********************************************************************
  34   1         PWM frequency = Fpwm/((PWMPH,PWMPL) + 1) <Fpwm = Fsys/PWM_CLOCK_DIV>
  35   1         = (16MHz/8)/(0x7CF + 1)
  36   1         = 1KHz (1ms)
  37   1         ***********************************************************************/
  38   1      
  39   1      //  PWM0H = 0x01;
  40   1      //  PWM0L = 0xF4;
  41   1      //  set_SFRPAGE
  42   1      //  ;           //PWM4 and PWM5 duty seting is in SFP page 1
  43   1      //  PWM3H = 0x01;
  44   1      //  PWM3L = 0xD4;
  45   1      //  PWM5H = 0x01;
  46   1      //  PWM5L = 0xA4;
  47   1      //  clr_SFRPAGE
  48   1      //  ;
  49   1        // PWM output inversly enable
  50   1      //  PWM2_OUTPUT_INVERSE;
  51   1        //-------- PWM start run--------------
  52   1      //  set_LOAD;
  53   1        set_PWMRUN;
C51 COMPILER V9.52.0.0   BSP_LIGHT                                                         11/20/2017 00:30:11 PAGE 2   

  54   1      
  55   1        Light_RGB_set(0, 0, 0);
  56   1      }
  57          static void Light_Red_set(uint16_t duty) {
  58   1        set_SFRPAGE
  59   1        ;
  60   1        PWM5H = (duty >> 8) & 0xFF;
  61   1        PWM5L = duty & 0xFF;
  62   1        clr_SFRPAGE
  63   1        ;
  64   1        set_LOAD;
  65   1      }
  66          static void Light_Green_set(uint16_t duty) {
  67   1        PWM3H = (duty >> 8) & 0xFF;
  68   1        PWM3L = duty & 0xFF;
  69   1        set_LOAD;
  70   1      }
  71          static void Light_Blue_set(uint16_t duty) {
  72   1        PWM0H = (duty >> 8) & 0xFF;
  73   1        PWM0L = duty & 0xFF;
  74   1        set_LOAD;
  75   1      }
  76          
  77          void Light_RGB_set(uint16_t r, uint16_t g, uint16_t b) {
  78   1        uint32_t tmp = 0;
  79   1      #if 1
  80   1        tmp = r;
  81   1        tmp *= dome_running_param.bright;
  82   1        tmp /= 100;
  83   1        Light_Red_set(tmp & 0xFFFF);
  84   1      
  85   1        tmp = g;
  86   1        tmp *= dome_running_param.bright;
  87   1        tmp /= 100;
  88   1        Light_Green_set(tmp & 0xFFFF);
  89   1      
  90   1        tmp = b;
  91   1        tmp *= dome_running_param.bright;
  92   1        tmp /= 100;
  93   1        Light_Blue_set(tmp & 0xFFFF);
  94   1      #else
                Light_Red_set(0xFFFF);
                Light_Green_set(0xFFFF);
                Light_Blue_set(0xFFFF);
              #endif
  99   1      }
 100          void Light_bright_set(uint8_t br) {
 101   1      //  uint16_t tmp = 0;
 102   1        dome_running_param.bright = br;
 103   1      
 104   1        if (dome_running_param.bright < 10) {
 105   2          dome_running_param.bright = 10;
 106   2        }
 107   1      
 108   1        Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
 109   1            dome_running_param.color.B);
 110   1      }
 111          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    434    ----
C51 COMPILER V9.52.0.0   BSP_LIGHT                                                         11/20/2017 00:30:11 PAGE 3   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
