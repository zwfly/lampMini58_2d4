; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_dome.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_dome.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 --omf_browse=.\obj\app_dome.crf ..\App\src\app_dome.c]
                          THUMB

                          AREA ||i.app_color_blink_next||, CODE, READONLY, ALIGN=2

                  app_color_blink_next PROC
;;;88     }
;;;89     void app_color_blink_next(void) {
000000  b510              PUSH     {r4,lr}
;;;90     	color_blink_index++;
000002  490a              LDR      r1,|L1.44|
000004  7848              LDRB     r0,[r1,#1]  ; color_blink_index
000006  1c40              ADDS     r0,r0,#1
000008  b2c0              UXTB     r0,r0
00000a  7048              STRB     r0,[r1,#1]
;;;91     	if (color_blink_index >= COLOR_BLINK_NUMBER) {
00000c  280a              CMP      r0,#0xa
00000e  d301              BCC      |L1.20|
;;;92     		color_blink_index = 0;
000010  2000              MOVS     r0,#0
000012  7048              STRB     r0,[r1,#1]
                  |L1.20|
;;;93     	}
;;;94     	app_dome_rgb(color_blink_buffer[color_blink_index][0],
000014  b2c0              UXTB     r0,r0
000016  0041              LSLS     r1,r0,#1
000018  4b05              LDR      r3,|L1.48|
00001a  1840              ADDS     r0,r0,r1
00001c  18c1              ADDS     r1,r0,r3
00001e  788a              LDRB     r2,[r1,#2]
000020  7849              LDRB     r1,[r1,#1]
000022  5c18              LDRB     r0,[r3,r0]
000024  f7fffffe          BL       app_dome_rgb
;;;95     			color_blink_buffer[color_blink_index][1],
;;;96     			color_blink_buffer[color_blink_index][2]);
;;;97     }
000028  bd10              POP      {r4,pc}
;;;98     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||.data||
                  |L1.48|
                          DCD      ||.constdata||

                          AREA ||i.app_color_blink_previous||, CODE, READONLY, ALIGN=2

                  app_color_blink_previous PROC
;;;78     }
;;;79     void app_color_blink_previous(void) {
000000  b510              PUSH     {r4,lr}
;;;80     	if (color_blink_index) {
000002  4909              LDR      r1,|L2.40|
000004  7848              LDRB     r0,[r1,#1]  ; color_blink_index
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L2.14|
00000a  1e40              SUBS     r0,r0,#1              ;79
;;;81     		color_blink_index--;
00000c  e000              B        |L2.16|
                  |L2.14|
;;;82     	} else {
;;;83     		color_blink_index = COLOR_BLINK_NUMBER - 1;
00000e  2009              MOVS     r0,#9
                  |L2.16|
000010  7048              STRB     r0,[r1,#1]
;;;84     	}
;;;85     	app_dome_rgb(color_blink_buffer[color_blink_index][0],
000012  b2c0              UXTB     r0,r0
000014  0041              LSLS     r1,r0,#1
000016  4b05              LDR      r3,|L2.44|
000018  1840              ADDS     r0,r0,r1
00001a  18c1              ADDS     r1,r0,r3
00001c  788a              LDRB     r2,[r1,#2]
00001e  7849              LDRB     r1,[r1,#1]
000020  5c18              LDRB     r0,[r3,r0]
000022  f7fffffe          BL       app_dome_rgb
;;;86     			color_blink_buffer[color_blink_index][1],
;;;87     			color_blink_buffer[color_blink_index][2]);
;;;88     }
000026  bd10              POP      {r4,pc}
;;;89     void app_color_blink_next(void) {
                          ENDP

                  |L2.40|
                          DCD      ||.data||
                  |L2.44|
                          DCD      ||.constdata||

                          AREA ||i.app_dome_Init||, CODE, READONLY, ALIGN=2

                  app_dome_Init PROC
;;;36     		uint32_t add_data=0 ;
;;;37     void app_dome_Init(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;38     	uint8_t i = 0;
;;;39     	uint8_t availableGroup = 0;
;;;40     	uint8_t minSpaceBytes = 0;
;;;41     
;;;42     	blink_number = 0;
000002  2000              MOVS     r0,#0
000004  4d1f              LDR      r5,|L3.132|
;;;43     	if (sizeof(DOME_DEFAULT_T) % 4) {
;;;44     		minSpaceBytes = (sizeof(DOME_DEFAULT_T) / 4) * 4 + 4;
000006  2674              MOVS     r6,#0x74
;;;45     	} else {
;;;46     		minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;47     	}
;;;48     	availableGroup = (FMC_APROM_END - DOME_START_ADDR) / minSpaceBytes;
000008  272c              MOVS     r7,#0x2c
00000a  2259              MOVS     r2,#0x59
00000c  2316              MOVS     r3,#0x16
00000e  7028              STRB     r0,[r5,#0]            ;42
000010  2188              MOVS     r1,#0x88              ;42
                  |L3.18|
000012  481d              LDR      r0,|L3.136|
000014  6002              STR      r2,[r0,#0]            ;42
000016  6003              STR      r3,[r0,#0]            ;42
000018  6001              STR      r1,[r0,#0]            ;42
00001a  6800              LDR      r0,[r0,#0]            ;42
00001c  2800              CMP      r0,#0                 ;42
00001e  d0f8              BEQ      |L3.18|
;;;49     
;;;50     	SYS_UnlockReg();
;;;51     	FMC_Open();
000020  f7fffffe          BL       FMC_Open
;;;52     	for (i = 0; i < availableGroup; i++) {
000024  2400              MOVS     r4,#0
000026  e00c              B        |L3.66|
                  |L3.40|
;;;53     		 add_tmp = i * minSpaceBytes;
000028  4620              MOV      r0,r4
00002a  4370              MULS     r0,r6,r0
;;;54     		 add_data = app_eeprom_read_int(add_tmp);
00002c  6068              STR      r0,[r5,#4]  ; add_tmp
00002e  f7fffffe          BL       app_eeprom_read_int
000032  60a8              STR      r0,[r5,#8]  ; add_data
000034  1c40              ADDS     r0,r0,#1
;;;55     		if (0xFFFFFFFFU != add_data) {
000036  d006              BEQ      |L3.70|
;;;56     			blink_number++;
000038  7828              LDRB     r0,[r5,#0]  ; blink_number
00003a  1c40              ADDS     r0,r0,#1
00003c  1c64              ADDS     r4,r4,#1
00003e  7028              STRB     r0,[r5,#0]
000040  b2e4              UXTB     r4,r4                 ;52
                  |L3.66|
000042  42bc              CMP      r4,r7                 ;52
000044  d3f0              BCC      |L3.40|
                  |L3.70|
;;;57     		} else {
;;;58     			break;
;;;59     		}
;;;60     	}
;;;61     	FMC_Close();
000046  f7fffffe          BL       FMC_Close
00004a  480f              LDR      r0,|L3.136|
00004c  2100              MOVS     r1,#0
00004e  6001              STR      r1,[r0,#0]
;;;62     	SYS_LockReg();
;;;63     
;;;64     	color_blink_index = COLOR_BLINK_NUMBER - 1;
000050  2009              MOVS     r0,#9
000052  7068              STRB     r0,[r5,#1]
;;;65     //	g_tWork.status.bits.blinkEnable = 1;
;;;66     
;;;67     	memset((uint8_t *) &subDome_Assist, 0, sizeof(subDome_Assist));
000054  480b              LDR      r0,|L3.132|
000056  3010              ADDS     r0,r0,#0x10
000058  6001              STR      r1,[r0,#0]
00005a  8081              STRH     r1,[r0,#4]
;;;68     
;;;69     	memset((uint8_t *) &domePro, 0, sizeof(domePro));
00005c  3810              SUBS     r0,r0,#0x10
00005e  70c1              STRB     r1,[r0,#3]
;;;70     	memset((uint8_t *) &dome_blink, 0, sizeof(dome_blink));
000060  2172              MOVS     r1,#0x72
000062  480a              LDR      r0,|L3.140|
000064  f7fffffe          BL       __aeabi_memclr
;;;71     	memset((uint8_t *) &dome_running_param, 0, sizeof(dome_running_param));
000068  4806              LDR      r0,|L3.132|
00006a  2108              MOVS     r1,#8
00006c  3016              ADDS     r0,r0,#0x16
00006e  f7fffffe          BL       __aeabi_memclr
;;;72     
;;;73     	dome_running_param.bright = 80;
000072  4804              LDR      r0,|L3.132|
000074  2150              MOVS     r1,#0x50
000076  3016              ADDS     r0,r0,#0x16
000078  7001              STRB     r1,[r0,#0]
;;;74     	dome_running_param.speed = 50;
00007a  2132              MOVS     r1,#0x32
00007c  7041              STRB     r1,[r0,#1]
;;;75     //	app_dome_start(0, 0);
;;;76     	app_dome_stop_current();
00007e  f7fffffe          BL       app_dome_stop_current
;;;77     
;;;78     }
000082  bdf8              POP      {r3-r7,pc}
;;;79     void app_color_blink_previous(void) {
                          ENDP

                  |L3.132|
                          DCD      ||.data||
                  |L3.136|
                          DCD      0x50000100
                  |L3.140|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_get_current_Name||, CODE, READONLY, ALIGN=2

                  app_dome_get_current_Name PROC
;;;115    
;;;116    void app_dome_get_current_Name(uint8_t *name, uint8_t len) {
000000  b510              PUSH     {r4,lr}
;;;117    	if (len > sizeof(dome_blink.header.name)) {
000002  2908              CMP      r1,#8
000004  d803              BHI      |L4.14|
;;;118    		name = 0;
;;;119    		return;
;;;120    	}
;;;121    	memcpy(name, (uint8_t *) dome_blink.header.name, len);
000006  460a              MOV      r2,r1
000008  4901              LDR      r1,|L4.16|
00000a  f7fffffe          BL       __aeabi_memcpy
                  |L4.14|
;;;122    }
00000e  bd10              POP      {r4,pc}
;;;123    void app_dome_start_current(void) {
                          ENDP

                  |L4.16|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_interrupter||, CODE, READONLY, ALIGN=2

                  app_dome_interrupter PROC
;;;277    
;;;278    void app_dome_interrupter(void) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;279    
;;;280    #if 1
;;;281    
;;;282    	if (g_tWork.status.bits.blinkEnable == 0) {
000002  48e5              LDR      r0,|L5.920|
000004  b085              SUB      sp,sp,#0x14           ;278
000006  7800              LDRB     r0,[r0,#0]  ; g_tWork
000008  0700              LSLS     r0,r0,#28
00000a  d505              BPL      |L5.24|
;;;283    		return;
;;;284    	}
;;;285    
;;;286    	if (subDome_Assist.stopTime) {
00000c  49e3              LDR      r1,|L5.924|
00000e  7948              LDRB     r0,[r1,#5]  ; subDome_Assist
000010  2800              CMP      r0,#0
000012  d003              BEQ      |L5.28|
000014  1e40              SUBS     r0,r0,#1
;;;287    		subDome_Assist.stopTime--;
000016  7148              STRB     r0,[r1,#5]
                  |L5.24|
;;;288    		return;
;;;289    	}
;;;290    
;;;291    	if ((subDome.repeate == 0) && (subDome.offtime == 0)) {
;;;292    		return;
;;;293    	}
;;;294    
;;;295    	switch (subDome.mode & 0x0F) {
;;;296    	case 0x03:  //shadow
;;;297    	{
;;;298    		subDome_Assist.msCnt++;
;;;299    
;;;300    		if (subDome.color1.R < subDome.color2.R) {
;;;301    			tmp = subDome.color1.R * 256
;;;302    					+ subDome_Assist.msCnt * 256
;;;303    							* abs(subDome.color2.R - subDome.color1.R)
;;;304    							/ subDome.speed;
;;;305    			tmp = subDome.bright * tmp / 100;
;;;306    		} else {
;;;307    			tmp = subDome.color1.R * 256
;;;308    					- subDome_Assist.msCnt * 256
;;;309    							* abs(subDome.color2.R - subDome.color1.R)
;;;310    							/ subDome.speed;
;;;311    			tmp = subDome.bright * tmp / 100;
;;;312    		}
;;;313    		dome_running_param.color.R = tmp & 0xFFFF;
;;;314    		//////
;;;315    		if (subDome.color1.G < subDome.color2.G) {
;;;316    			tmp = subDome.color1.G * 256
;;;317    					+ subDome_Assist.msCnt * 256
;;;318    							* abs(subDome.color2.G - subDome.color1.G)
;;;319    							/ subDome.speed;
;;;320    			tmp = subDome.bright * tmp / 100;
;;;321    //			Light_Green_set(tmp);
;;;322    		} else {
;;;323    			tmp = subDome.color1.G * 256
;;;324    					- subDome_Assist.msCnt * 256
;;;325    							* abs(subDome.color2.G - subDome.color1.G)
;;;326    							/ subDome.speed;
;;;327    			tmp = subDome.bright * tmp / 100;
;;;328    //			Light_Green_set(tmp);
;;;329    		}
;;;330    		dome_running_param.color.G = tmp & 0xFFFF;
;;;331    		//////
;;;332    		if (subDome.color1.B < subDome.color2.B) {
;;;333    			tmp = subDome.color1.B * 256
;;;334    					+ subDome_Assist.msCnt * 256
;;;335    							* abs(subDome.color2.B - subDome.color1.B)
;;;336    							/ subDome.speed;
;;;337    			tmp = subDome.bright * tmp / 100;
;;;338    //			Light_Blue_set(tmp);
;;;339    		} else {
;;;340    			tmp = subDome.color1.B * 256
;;;341    					- subDome_Assist.msCnt * 256
;;;342    							* abs(subDome.color2.B - subDome.color1.B)
;;;343    							/ subDome.speed;
;;;344    			tmp = subDome.bright * tmp / 100;
;;;345    //			Light_Blue_set(tmp);
;;;346    		}
;;;347    		dome_running_param.color.B = tmp & 0xFFFF;
;;;348    		Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
;;;349    				dome_running_param.color.B);
;;;350    
;;;351    		if (subDome_Assist.msCnt >= subDome.speed) {
;;;352    			subDome_Assist.msCnt = 0;
;;;353    #if 0
;;;354    			tmp_color = subDome.color2.R;
;;;355    			subDome.color2.R = subDome.color1.R;
;;;356    			subDome.color1.R = tmp_color;
;;;357    
;;;358    			tmp_color = subDome.color2.G;
;;;359    			subDome.color2.G = subDome.color1.G;
;;;360    			subDome.color1.G = tmp_color;
;;;361    
;;;362    			tmp_color = subDome.color2.B;
;;;363    			subDome.color2.B = subDome.color1.B;
;;;364    			subDome.color1.B = tmp_color;
;;;365    
;;;366    			if (subDome_Assist.switch_flag == 0) {
;;;367    				subDome_Assist.switch_flag = 1;
;;;368    
;;;369    			} else {
;;;370    				subDome_Assist.switch_flag = 0;
;;;371    
;;;372    				if (subDome.repeate) {
;;;373    					subDome.repeate--;
;;;374    				}
;;;375    			}
;;;376    #else
;;;377    
;;;378    			if (subDome.repeate) {
;;;379    				subDome.repeate--;
;;;380    			}
;;;381    
;;;382    #endif
;;;383    		}
;;;384    		if (subDome.repeate == 0) {
;;;385    //			Light_RGB_set(0, 0, 0);
;;;386    
;;;387    //			if (subDome.offtime) {
;;;388    //				subDome.offtime--;
;;;389    //			}
;;;390    //			if (subDome.offtime == 0) {
;;;391    			app_dome_subDome_pro(subDome.mode >> 4);
;;;392    //			}
;;;393    
;;;394    		}
;;;395    	}
;;;396    		break;
;;;397    	case 0x04:  //breath
;;;398    	{
;;;399    		if (subDome_Assist.switch_flag == 0) {
;;;400    			subDome_Assist.msCnt++;
;;;401    		} else {
;;;402    			if (subDome_Assist.msCnt) {
;;;403    				subDome_Assist.msCnt--;
;;;404    			}
;;;405    		}
;;;406    
;;;407    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.R / subDome.speed;
;;;408    		tmp = tmp * subDome.bright / 100;
;;;409    		dome_running_param.color.R = tmp & 0xFFFF;
;;;410    
;;;411    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.G / subDome.speed;
;;;412    		tmp = tmp * subDome.bright / 100;
;;;413    		dome_running_param.color.G = tmp & 0xFFFF;
;;;414    
;;;415    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.B / subDome.speed;
;;;416    		tmp = tmp * subDome.bright / 100;
;;;417    		dome_running_param.color.B = tmp & 0xFFFF;
;;;418    		Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
;;;419    				dome_running_param.color.B);
;;;420    
;;;421    		if ((subDome_Assist.msCnt >= subDome.speed)
;;;422    				|| (subDome_Assist.msCnt == 0)) {
;;;423    			if (subDome_Assist.switch_flag == 0) {
;;;424    				subDome_Assist.switch_flag = 1;
;;;425    			} else {
;;;426    				subDome_Assist.switch_flag = 0;
;;;427    				if (subDome.repeate) {
;;;428    					subDome.repeate--;
;;;429    				}
;;;430    			}
;;;431    		}
;;;432    		if (subDome.repeate == 0) {
;;;433    //			Light_RGB_set(0, 0, 0);
;;;434    //			if (subDome.offtime) {
;;;435    //				subDome.offtime--;
;;;436    //			}
;;;437    //			if (subDome.offtime == 0) {
;;;438    			app_dome_subDome_pro(subDome.mode >> 4);
;;;439    //			}
;;;440    		}
;;;441    	}
;;;442    		break;
;;;443    	case 0x05:  //blink flash
;;;444    	{
;;;445    		uint32_t tt = 0xFF;
;;;446    		if (subDome_Assist.msCnt == 0) {
;;;447    			tmp = tt * subDome.color1.R * subDome.bright / 100;
;;;448    			dome_running_param.color.R = tmp & 0xFFFF;
;;;449    
;;;450    			tmp = tt * subDome.color1.G * subDome.bright / 100;
;;;451    			dome_running_param.color.G = tmp & 0xFFFF;
;;;452    
;;;453    			tmp = tt * subDome.color1.B * subDome.bright / 100;
;;;454    			dome_running_param.color.B = tmp & 0xFFFF;
;;;455    			Light_RGB_set(dome_running_param.color.R,
;;;456    					dome_running_param.color.G, dome_running_param.color.B);
;;;457    		}
;;;458    		tmp = subDome.speed;
;;;459    		if (subDome_Assist.msCnt == tmp) {
;;;460    			tmp = tt * subDome.color2.R * subDome.bright / 100;
;;;461    			dome_running_param.color.R = tmp & 0xFFFF;
;;;462    
;;;463    			tmp = tt * subDome.color2.G * subDome.bright / 100;
;;;464    			dome_running_param.color.G = tmp & 0xFFFF;
;;;465    
;;;466    			tmp = tt * subDome.color2.B * subDome.bright / 100;
;;;467    			dome_running_param.color.B = tmp & 0xFFFF;
;;;468    			Light_RGB_set(dome_running_param.color.R,
;;;469    					dome_running_param.color.G, dome_running_param.color.B);
;;;470    		}
;;;471    		subDome_Assist.msCnt++;
;;;472    		tmp = 0;
;;;473    		tmp = tmp + subDome.speed + subDome.offtime;
;;;474    		if (subDome_Assist.msCnt >= tmp) {
;;;475    			subDome_Assist.msCnt = 0;
;;;476    			if (subDome.repeate) {
;;;477    				subDome.repeate--;
;;;478    			}
;;;479    		}
;;;480    		if (subDome.repeate == 0) {
;;;481    //			Light_RGB_set(0, 0, 0);
;;;482    //			if (subDome.offtime) {
;;;483    //				subDome.offtime--;
;;;484    //			}
;;;485    //			if (subDome.offtime == 0) {
;;;486    			app_dome_subDome_pro(subDome.mode >> 4);
;;;487    //			}
;;;488    		}
;;;489    	}
;;;490    		break;
;;;491    	default:
;;;492    
;;;493    		break;
;;;494    	}
;;;495    
;;;496    #endif
;;;497    }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L5.28|
00001c  4ae0              LDR      r2,|L5.928|
00001e  79d3              LDRB     r3,[r2,#7]            ;291  ; subDome
000020  1cd0              ADDS     r0,r2,#3              ;291
000022  9002              STR      r0,[sp,#8]            ;291
000024  2b00              CMP      r3,#0                 ;291
000026  d104              BNE      |L5.50|
000028  7a43              LDRB     r3,[r0,#9]            ;291  ; subDome
00002a  7a04              LDRB     r4,[r0,#8]            ;291  ; subDome
00002c  0218              LSLS     r0,r3,#8              ;291
00002e  4320              ORRS     r0,r0,r4              ;291
000030  d0f2              BEQ      |L5.24|
                  |L5.50|
000032  4adb              LDR      r2,|L5.928|
000034  48da              LDR      r0,|L5.928|
000036  7857              LDRB     r7,[r2,#1]            ;300
000038  7896              LDRB     r6,[r2,#2]            ;315
00003a  78d5              LDRB     r5,[r2,#3]            ;332
00003c  7a94              LDRB     r4,[r2,#0xa]          ;305
00003e  7a53              LDRB     r3,[r2,#9]            ;301
000040  7800              LDRB     r0,[r0,#0]            ;295  ; subDome
000042  7a12              LDRB     r2,[r2,#8]            ;301
000044  021b              LSLS     r3,r3,#8              ;301
000046  0700              LSLS     r0,r0,#28             ;295
000048  4313              ORRS     r3,r3,r2              ;301
00004a  0f00              LSRS     r0,r0,#28             ;295
00004c  9300              STR      r3,[sp,#0]            ;295
00004e  2803              CMP      r0,#3                 ;295
000050  d00a              BEQ      |L5.104|
000052  2804              CMP      r0,#4                 ;295
000054  d07e              BEQ      |L5.340|
000056  2805              CMP      r0,#5                 ;295
000058  d1de              BNE      |L5.24|
00005a  48d0              LDR      r0,|L5.924|
00005c  1c40              ADDS     r0,r0,#1              ;446
00005e  f7fffffe          BL       __aeabi_uread4
000062  2800              CMP      r0,#0                 ;446
000064  d077              BEQ      |L5.342|
000066  e140              B        |L5.746|
                  |L5.104|
000068  48cc              LDR      r0,|L5.924|
00006a  1c40              ADDS     r0,r0,#1              ;298
00006c  f7fffffe          BL       __aeabi_uread4
000070  49ca              LDR      r1,|L5.924|
000072  1c40              ADDS     r0,r0,#1              ;298
000074  1c49              ADDS     r1,r1,#1              ;298
000076  f7fffffe          BL       __aeabi_uwrite4
00007a  9001              STR      r0,[sp,#4]            ;300
00007c  48c8              LDR      r0,|L5.928|
00007e  49c8              LDR      r1,|L5.928|
000080  7900              LDRB     r0,[r0,#4]            ;300  ; subDome
000082  784b              LDRB     r3,[r1,#1]            ;300
000084  1ac1              SUBS     r1,r0,r3              ;301
000086  424a              RSBS     r2,r1,#0              ;301
000088  021b              LSLS     r3,r3,#8              ;301
00008a  4287              CMP      r7,r0                 ;300
00008c  9801              LDR      r0,[sp,#4]            ;300
00008e  9302              STR      r3,[sp,#8]            ;300
000090  d20a              BCS      |L5.168|
000092  2900              CMP      r1,#0                 ;301
000094  da00              BGE      |L5.152|
000096  4611              MOV      r1,r2                 ;301
                  |L5.152|
000098  4348              MULS     r0,r1,r0              ;301
00009a  0200              LSLS     r0,r0,#8              ;301
00009c  9900              LDR      r1,[sp,#0]            ;301
00009e  f7fffffe          BL       __aeabi_uidivmod
0000a2  9902              LDR      r1,[sp,#8]            ;301
0000a4  1841              ADDS     r1,r0,r1              ;301
0000a6  e009              B        |L5.188|
                  |L5.168|
0000a8  2900              CMP      r1,#0                 ;307
0000aa  da00              BGE      |L5.174|
0000ac  4611              MOV      r1,r2                 ;307
                  |L5.174|
0000ae  4348              MULS     r0,r1,r0              ;307
0000b0  0200              LSLS     r0,r0,#8              ;307
0000b2  9900              LDR      r1,[sp,#0]            ;307
0000b4  f7fffffe          BL       __aeabi_uidivmod
0000b8  9902              LDR      r1,[sp,#8]            ;307
0000ba  1a09              SUBS     r1,r1,r0              ;307
                  |L5.188|
0000bc  4fb7              LDR      r7,|L5.924|
0000be  4620              MOV      r0,r4                 ;307
0000c0  4348              MULS     r0,r1,r0              ;311
0000c2  3f10              SUBS     r7,r7,#0x10           ;307
0000c4  2164              MOVS     r1,#0x64              ;311
0000c6  f7fffffe          BL       __aeabi_uidivmod
0000ca  60f8              STR      r0,[r7,#0xc]          ;313  ; tmp
0000cc  89b8              LDRH     r0,[r7,#0xc]          ;313  ; tmp
0000ce  4639              MOV      r1,r7                 ;313
0000d0  b280              UXTH     r0,r0                 ;313
0000d2  3116              ADDS     r1,r1,#0x16           ;313
0000d4  8048              STRH     r0,[r1,#2]            ;313
0000d6  9003              STR      r0,[sp,#0xc]          ;315
0000d8  48b1              LDR      r0,|L5.928|
0000da  49b1              LDR      r1,|L5.928|
0000dc  4633              MOV      r3,r6                 ;315
0000de  7940              LDRB     r0,[r0,#5]            ;315  ; subDome
0000e0  788e              LDRB     r6,[r1,#2]            ;315
0000e2  1b81              SUBS     r1,r0,r6              ;316
0000e4  424a              RSBS     r2,r1,#0              ;316
0000e6  0236              LSLS     r6,r6,#8              ;316
0000e8  4283              CMP      r3,r0                 ;315
0000ea  9801              LDR      r0,[sp,#4]            ;315
0000ec  d209              BCS      |L5.258|
0000ee  2900              CMP      r1,#0                 ;316
0000f0  da00              BGE      |L5.244|
0000f2  4611              MOV      r1,r2                 ;316
                  |L5.244|
0000f4  4348              MULS     r0,r1,r0              ;316
0000f6  0200              LSLS     r0,r0,#8              ;316
0000f8  9900              LDR      r1,[sp,#0]            ;316
0000fa  f7fffffe          BL       __aeabi_uidivmod
0000fe  1981              ADDS     r1,r0,r6              ;316
000100  e008              B        |L5.276|
                  |L5.258|
000102  2900              CMP      r1,#0                 ;323
000104  da00              BGE      |L5.264|
000106  4611              MOV      r1,r2                 ;323
                  |L5.264|
000108  4348              MULS     r0,r1,r0              ;323
00010a  0200              LSLS     r0,r0,#8              ;323
00010c  9900              LDR      r1,[sp,#0]            ;323
00010e  f7fffffe          BL       __aeabi_uidivmod
000112  1a31              SUBS     r1,r6,r0              ;323
                  |L5.276|
000114  4620              MOV      r0,r4                 ;323
000116  4348              MULS     r0,r1,r0              ;327
000118  2164              MOVS     r1,#0x64              ;327
00011a  f7fffffe          BL       __aeabi_uidivmod
00011e  60f8              STR      r0,[r7,#0xc]          ;330  ; tmp
000120  89b8              LDRH     r0,[r7,#0xc]          ;330  ; tmp
000122  499e              LDR      r1,|L5.924|
000124  b280              UXTH     r0,r0                 ;330
000126  1d89              ADDS     r1,r1,#6              ;330
000128  8088              STRH     r0,[r1,#4]            ;330
00012a  9002              STR      r0,[sp,#8]            ;332
00012c  499c              LDR      r1,|L5.928|
00012e  489c              LDR      r0,|L5.928|
000130  78cb              LDRB     r3,[r1,#3]            ;332
000132  7980              LDRB     r0,[r0,#6]            ;332  ; subDome
000134  021e              LSLS     r6,r3,#8              ;333
000136  1ac1              SUBS     r1,r0,r3              ;333
000138  424a              RSBS     r2,r1,#0              ;333
00013a  4285              CMP      r5,r0                 ;332
00013c  9801              LDR      r0,[sp,#4]            ;332
00013e  d20b              BCS      |L5.344|
000140  2900              CMP      r1,#0                 ;333
000142  da00              BGE      |L5.326|
000144  4611              MOV      r1,r2                 ;333
                  |L5.326|
000146  4348              MULS     r0,r1,r0              ;333
000148  0200              LSLS     r0,r0,#8              ;333
00014a  9900              LDR      r1,[sp,#0]            ;333
00014c  f7fffffe          BL       __aeabi_uidivmod
000150  1981              ADDS     r1,r0,r6              ;333
000152  e00a              B        |L5.362|
                  |L5.340|
000154  e032              B        |L5.444|
                  |L5.342|
000156  e0a3              B        |L5.672|
                  |L5.344|
000158  2900              CMP      r1,#0                 ;340
00015a  da00              BGE      |L5.350|
00015c  4611              MOV      r1,r2                 ;340
                  |L5.350|
00015e  4348              MULS     r0,r1,r0              ;340
000160  0200              LSLS     r0,r0,#8              ;340
000162  9900              LDR      r1,[sp,#0]            ;340
000164  f7fffffe          BL       __aeabi_uidivmod
000168  1a31              SUBS     r1,r6,r0              ;340
                  |L5.362|
00016a  4620              MOV      r0,r4                 ;340
00016c  4348              MULS     r0,r1,r0              ;344
00016e  2164              MOVS     r1,#0x64              ;344
000170  f7fffffe          BL       __aeabi_uidivmod
000174  60f8              STR      r0,[r7,#0xc]          ;347  ; tmp
000176  89b8              LDRH     r0,[r7,#0xc]          ;347  ; tmp
000178  b282              UXTH     r2,r0                 ;347
00017a  4888              LDR      r0,|L5.924|
00017c  1d80              ADDS     r0,r0,#6              ;347
00017e  80c2              STRH     r2,[r0,#6]            ;347
000180  9902              LDR      r1,[sp,#8]            ;348
000182  9803              LDR      r0,[sp,#0xc]          ;348
000184  f7fffffe          BL       Light_RGB_set
000188  4d84              LDR      r5,|L5.924|
00018a  1c68              ADDS     r0,r5,#1              ;351
00018c  f7fffffe          BL       __aeabi_uread4
000190  4c83              LDR      r4,|L5.928|
000192  7a61              LDRB     r1,[r4,#9]            ;351  ; subDome
000194  7a22              LDRB     r2,[r4,#8]            ;351  ; subDome
000196  0209              LSLS     r1,r1,#8              ;351
000198  4311              ORRS     r1,r1,r2              ;351
00019a  4288              CMP      r0,r1                 ;351
00019c  d308              BCC      |L5.432|
00019e  1c69              ADDS     r1,r5,#1              ;352
0001a0  2000              MOVS     r0,#0                 ;352
0001a2  f7fffffe          BL       __aeabi_uwrite4
0001a6  79e0              LDRB     r0,[r4,#7]            ;378  ; subDome
0001a8  2800              CMP      r0,#0                 ;378
0001aa  d005              BEQ      |L5.440|
0001ac  1e40              SUBS     r0,r0,#1              ;378
0001ae  71e0              STRB     r0,[r4,#7]            ;379
                  |L5.432|
0001b0  79e0              LDRB     r0,[r4,#7]            ;384  ; subDome
0001b2  2800              CMP      r0,#0                 ;384
0001b4  d000              BEQ      |L5.440|
                  |L5.438|
0001b6  e72f              B        |L5.24|
                  |L5.440|
0001b8  7820              LDRB     r0,[r4,#0]            ;391  ; subDome
0001ba  e06a              B        |L5.658|
                  |L5.444|
0001bc  4877              LDR      r0,|L5.924|
0001be  7800              LDRB     r0,[r0,#0]            ;399  ; subDome_Assist
0001c0  2800              CMP      r0,#0                 ;399
0001c2  4876              LDR      r0,|L5.924|
0001c4  d04d              BEQ      |L5.610|
0001c6  1c40              ADDS     r0,r0,#1              ;399
0001c8  f7fffffe          BL       __aeabi_uread4
0001cc  2800              CMP      r0,#0                 ;402
0001ce  d004              BEQ      |L5.474|
0001d0  4972              LDR      r1,|L5.924|
0001d2  1e40              SUBS     r0,r0,#1              ;403
                  |L5.468|
0001d4  1c49              ADDS     r1,r1,#1              ;403
0001d6  f7fffffe          BL       __aeabi_uwrite4
                  |L5.474|
0001da  4870              LDR      r0,|L5.924|
0001dc  1c40              ADDS     r0,r0,#1              ;407
0001de  f7fffffe          BL       __aeabi_uread4
0001e2  9001              STR      r0,[sp,#4]            ;407
0001e4  4378              MULS     r0,r7,r0              ;407
0001e6  0201              LSLS     r1,r0,#8              ;407
0001e8  1a08              SUBS     r0,r1,r0              ;407
0001ea  9900              LDR      r1,[sp,#0]            ;407
0001ec  f7fffffe          BL       __aeabi_uidivmod
0001f0  4601              MOV      r1,r0                 ;407
0001f2  4620              MOV      r0,r4                 ;407
0001f4  4348              MULS     r0,r1,r0              ;408
0001f6  2164              MOVS     r1,#0x64              ;408
0001f8  f7fffffe          BL       __aeabi_uidivmod
0001fc  4f67              LDR      r7,|L5.924|
0001fe  b280              UXTH     r0,r0                 ;409
000200  1dbf              ADDS     r7,r7,#6              ;409
000202  9002              STR      r0,[sp,#8]            ;409
000204  8078              STRH     r0,[r7,#2]            ;409
000206  9801              LDR      r0,[sp,#4]            ;411
000208  4370              MULS     r0,r6,r0              ;411
00020a  0201              LSLS     r1,r0,#8              ;411
00020c  1a08              SUBS     r0,r1,r0              ;411
00020e  9900              LDR      r1,[sp,#0]            ;411
000210  f7fffffe          BL       __aeabi_uidivmod
000214  4360              MULS     r0,r4,r0              ;412
000216  2164              MOVS     r1,#0x64              ;412
000218  f7fffffe          BL       __aeabi_uidivmod
00021c  b286              UXTH     r6,r0                 ;413
00021e  80be              STRH     r6,[r7,#4]            ;413
000220  9801              LDR      r0,[sp,#4]            ;415
000222  4368              MULS     r0,r5,r0              ;415
000224  0201              LSLS     r1,r0,#8              ;415
000226  1a08              SUBS     r0,r1,r0              ;415
000228  9900              LDR      r1,[sp,#0]            ;415
00022a  f7fffffe          BL       __aeabi_uidivmod
00022e  4360              MULS     r0,r4,r0              ;416
000230  2164              MOVS     r1,#0x64              ;416
000232  f7fffffe          BL       __aeabi_uidivmod
000236  4639              MOV      r1,r7                 ;416
000238  3916              SUBS     r1,r1,#0x16           ;416
00023a  60c8              STR      r0,[r1,#0xc]          ;417  ; tmp
00023c  b282              UXTH     r2,r0                 ;417
00023e  80fa              STRH     r2,[r7,#6]            ;417
000240  4631              MOV      r1,r6                 ;417
000242  9802              LDR      r0,[sp,#8]            ;418
000244  f7fffffe          BL       Light_RGB_set
000248  1f78              SUBS     r0,r7,#5              ;421
00024a  f7fffffe          BL       __aeabi_uread4
00024e  4954              LDR      r1,|L5.928|
000250  7a4a              LDRB     r2,[r1,#9]            ;421  ; subDome
000252  7a0b              LDRB     r3,[r1,#8]            ;421  ; subDome
000254  0211              LSLS     r1,r2,#8              ;421
000256  4319              ORRS     r1,r1,r3              ;421
000258  4288              CMP      r0,r1                 ;421
00025a  d208              BCS      |L5.622|
00025c  2800              CMP      r0,#0                 ;422
00025e  d006              BEQ      |L5.622|
000260  e011              B        |L5.646|
                  |L5.610|
000262  1c40              ADDS     r0,r0,#1              ;422
000264  f7fffffe          BL       __aeabi_uread4
000268  494c              LDR      r1,|L5.924|
00026a  1c40              ADDS     r0,r0,#1              ;400
00026c  e7b2              B        |L5.468|
                  |L5.622|
00026e  484b              LDR      r0,|L5.924|
000270  7801              LDRB     r1,[r0,#0]            ;423  ; subDome_Assist
000272  2900              CMP      r1,#0                 ;423
000274  d011              BEQ      |L5.666|
000276  2100              MOVS     r1,#0                 ;426
000278  7001              STRB     r1,[r0,#0]            ;426
00027a  4949              LDR      r1,|L5.928|
00027c  79c8              LDRB     r0,[r1,#7]            ;427  ; subDome
00027e  2800              CMP      r0,#0                 ;427
000280  d005              BEQ      |L5.654|
000282  1e40              SUBS     r0,r0,#1              ;427
000284  71c8              STRB     r0,[r1,#7]            ;428
                  |L5.646|
000286  4846              LDR      r0,|L5.928|
000288  79c0              LDRB     r0,[r0,#7]            ;432  ; subDome
00028a  2800              CMP      r0,#0                 ;432
00028c  d193              BNE      |L5.438|
                  |L5.654|
00028e  4844              LDR      r0,|L5.928|
000290  7800              LDRB     r0,[r0,#0]            ;438  ; subDome
                  |L5.658|
000292  0900              LSRS     r0,r0,#4              ;391
000294  f7fffffe          BL       app_dome_subDome_pro
                  |L5.664|
000298  e6be              B        |L5.24|
                  |L5.666|
00029a  2101              MOVS     r1,#1                 ;424
00029c  7001              STRB     r1,[r0,#0]            ;424
00029e  e7f2              B        |L5.646|
                  |L5.672|
0002a0  4367              MULS     r7,r4,r7              ;447
0002a2  0238              LSLS     r0,r7,#8              ;447
0002a4  1bc0              SUBS     r0,r0,r7              ;447
0002a6  2164              MOVS     r1,#0x64              ;447
0002a8  f7fffffe          BL       __aeabi_uidivmod
0002ac  b287              UXTH     r7,r0                 ;448
0002ae  483b              LDR      r0,|L5.924|
0002b0  4366              MULS     r6,r4,r6              ;450
0002b2  1d80              ADDS     r0,r0,#6              ;448
0002b4  8047              STRH     r7,[r0,#2]            ;448
0002b6  0230              LSLS     r0,r6,#8              ;450
0002b8  1b80              SUBS     r0,r0,r6              ;450
0002ba  2164              MOVS     r1,#0x64              ;450
0002bc  f7fffffe          BL       __aeabi_uidivmod
0002c0  b286              UXTH     r6,r0                 ;451
0002c2  4836              LDR      r0,|L5.924|
0002c4  4365              MULS     r5,r4,r5              ;453
0002c6  1d80              ADDS     r0,r0,#6              ;451
0002c8  8086              STRH     r6,[r0,#4]            ;451
0002ca  0228              LSLS     r0,r5,#8              ;453
0002cc  1b40              SUBS     r0,r0,r5              ;453
0002ce  2164              MOVS     r1,#0x64              ;453
0002d0  f7fffffe          BL       __aeabi_uidivmod
0002d4  4931              LDR      r1,|L5.924|
0002d6  b282              UXTH     r2,r0                 ;454
0002d8  3910              SUBS     r1,r1,#0x10           ;453
0002da  60c8              STR      r0,[r1,#0xc]          ;454  ; tmp
0002dc  4608              MOV      r0,r1                 ;454
0002de  3016              ADDS     r0,r0,#0x16           ;454
0002e0  80c2              STRH     r2,[r0,#6]            ;454
0002e2  4631              MOV      r1,r6                 ;454
0002e4  4638              MOV      r0,r7                 ;454
0002e6  f7fffffe          BL       Light_RGB_set
                  |L5.746|
0002ea  4d2d              LDR      r5,|L5.928|
0002ec  4e2b              LDR      r6,|L5.924|
0002ee  7a68              LDRB     r0,[r5,#9]            ;458  ; subDome
0002f0  7a29              LDRB     r1,[r5,#8]            ;458  ; subDome
0002f2  0204              LSLS     r4,r0,#8              ;458
0002f4  3e10              SUBS     r6,r6,#0x10           ;458
0002f6  430c              ORRS     r4,r4,r1              ;458
0002f8  4630              MOV      r0,r6                 ;459
0002fa  3011              ADDS     r0,r0,#0x11           ;459
0002fc  60f4              STR      r4,[r6,#0xc]          ;459  ; tmp
0002fe  f7fffffe          BL       __aeabi_uread4
000302  42a0              CMP      r0,r4                 ;459
000304  d124              BNE      |L5.848|
000306  7928              LDRB     r0,[r5,#4]            ;460  ; subDome
000308  7aac              LDRB     r4,[r5,#0xa]          ;460  ; subDome
00030a  4360              MULS     r0,r4,r0              ;460
00030c  0201              LSLS     r1,r0,#8              ;460
00030e  1a08              SUBS     r0,r1,r0              ;460
000310  2164              MOVS     r1,#0x64              ;460
000312  f7fffffe          BL       __aeabi_uidivmod
000316  b280              UXTH     r0,r0                 ;461
000318  4637              MOV      r7,r6                 ;461
00031a  3716              ADDS     r7,r7,#0x16           ;461
00031c  9001              STR      r0,[sp,#4]            ;461
00031e  8078              STRH     r0,[r7,#2]            ;461
000320  7968              LDRB     r0,[r5,#5]            ;463  ; subDome
000322  4360              MULS     r0,r4,r0              ;463
000324  0201              LSLS     r1,r0,#8              ;463
000326  1a08              SUBS     r0,r1,r0              ;463
000328  2164              MOVS     r1,#0x64              ;463
00032a  f7fffffe          BL       __aeabi_uidivmod
00032e  b280              UXTH     r0,r0                 ;464
000330  9000              STR      r0,[sp,#0]            ;464
000332  80b8              STRH     r0,[r7,#4]            ;464
000334  79a8              LDRB     r0,[r5,#6]            ;466  ; subDome
000336  4360              MULS     r0,r4,r0              ;466
000338  0201              LSLS     r1,r0,#8              ;466
00033a  1a08              SUBS     r0,r1,r0              ;466
00033c  2164              MOVS     r1,#0x64              ;466
00033e  f7fffffe          BL       __aeabi_uidivmod
000342  b282              UXTH     r2,r0                 ;467
000344  60f0              STR      r0,[r6,#0xc]          ;467  ; tmp
000346  80fa              STRH     r2,[r7,#6]            ;467
000348  9900              LDR      r1,[sp,#0]            ;468
00034a  9801              LDR      r0,[sp,#4]            ;468
00034c  f7fffffe          BL       Light_RGB_set
                  |L5.848|
000350  4c12              LDR      r4,|L5.924|
000352  1c60              ADDS     r0,r4,#1              ;471
000354  f7fffffe          BL       __aeabi_uread4
000358  1c61              ADDS     r1,r4,#1              ;471
00035a  1c40              ADDS     r0,r0,#1              ;471
00035c  f7fffffe          BL       __aeabi_uwrite4
000360  4602              MOV      r2,r0                 ;471
000362  7a69              LDRB     r1,[r5,#9]            ;473  ; subDome
000364  7a28              LDRB     r0,[r5,#8]            ;473  ; subDome
000366  0209              LSLS     r1,r1,#8              ;473
000368  4301              ORRS     r1,r1,r0              ;473
00036a  9802              LDR      r0,[sp,#8]            ;473
00036c  7a43              LDRB     r3,[r0,#9]            ;473  ; subDome
00036e  7a07              LDRB     r7,[r0,#8]            ;473  ; subDome
000370  0218              LSLS     r0,r3,#8              ;473
000372  4338              ORRS     r0,r0,r7              ;473
000374  1809              ADDS     r1,r1,r0              ;473
000376  60f1              STR      r1,[r6,#0xc]          ;474  ; tmp
000378  428a              CMP      r2,r1                 ;474
00037a  d308              BCC      |L5.910|
00037c  1c61              ADDS     r1,r4,#1              ;475
00037e  2000              MOVS     r0,#0                 ;475
000380  f7fffffe          BL       __aeabi_uwrite4
000384  79e8              LDRB     r0,[r5,#7]            ;476  ; subDome
000386  2800              CMP      r0,#0                 ;476
000388  d004              BEQ      |L5.916|
00038a  1e40              SUBS     r0,r0,#1              ;476
00038c  71e8              STRB     r0,[r5,#7]            ;477
                  |L5.910|
00038e  79e8              LDRB     r0,[r5,#7]            ;480  ; subDome
000390  2800              CMP      r0,#0                 ;480
000392  d181              BNE      |L5.664|
                  |L5.916|
000394  7828              LDRB     r0,[r5,#0]            ;486  ; subDome
000396  e77c              B        |L5.658|
                          ENDP

                  |L5.920|
                          DCD      g_tWork
                  |L5.924|
                          DCD      ||.data||+0x10
                  |L5.928|
                          DCD      ||.bss||

                          AREA ||i.app_dome_next||, CODE, READONLY, ALIGN=2

                  app_dome_next PROC
;;;106    }
;;;107    void app_dome_next(void) {
000000  b510              PUSH     {r4,lr}
;;;108    	domePro.currentDomeIndex++;
000002  4907              LDR      r1,|L6.32|
000004  7808              LDRB     r0,[r1,#0]  ; domePro
;;;109    	if (domePro.currentDomeIndex >= blink_number) {
000006  1eca              SUBS     r2,r1,#3
000008  1c40              ADDS     r0,r0,#1              ;108
00000a  b2c0              UXTB     r0,r0                 ;108
00000c  7008              STRB     r0,[r1,#0]            ;108
00000e  7812              LDRB     r2,[r2,#0]  ; blink_number
000010  4290              CMP      r0,r2
000012  d301              BCC      |L6.24|
;;;110    		domePro.currentDomeIndex = 0;
000014  2000              MOVS     r0,#0
000016  7008              STRB     r0,[r1,#0]
                  |L6.24|
;;;111    	}
;;;112    
;;;113    	app_dome_start(domePro.currentDomeIndex);
000018  b2c0              UXTB     r0,r0
00001a  f7fffffe          BL       app_dome_start
;;;114    }
00001e  bd10              POP      {r4,pc}
;;;115    
                          ENDP

                  |L6.32|
                          DCD      ||.data||+0x3

                          AREA ||i.app_dome_previous||, CODE, READONLY, ALIGN=2

                  app_dome_previous PROC
;;;98     
;;;99     void app_dome_previous(void) {
000000  b510              PUSH     {r4,lr}
;;;100    	if (domePro.currentDomeIndex) {
000002  4908              LDR      r1,|L7.36|
000004  7808              LDRB     r0,[r1,#0]  ; domePro
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L7.14|
                  |L7.10|
00000a  1e40              SUBS     r0,r0,#1              ;99
;;;101    		domePro.currentDomeIndex--;
00000c  e004              B        |L7.24|
                  |L7.14|
;;;102    	} else {
;;;103    		domePro.currentDomeIndex = blink_number ? blink_number - 1 : 0;
00000e  4805              LDR      r0,|L7.36|
000010  1ec0              SUBS     r0,r0,#3
000012  7800              LDRB     r0,[r0,#0]  ; blink_number
000014  2800              CMP      r0,#0
000016  d1f8              BNE      |L7.10|
                  |L7.24|
000018  7008              STRB     r0,[r1,#0]
;;;104    	}
;;;105    	app_dome_start(domePro.currentDomeIndex);
00001a  b2c0              UXTB     r0,r0
00001c  f7fffffe          BL       app_dome_start
;;;106    }
000020  bd10              POP      {r4,pc}
;;;107    void app_dome_next(void) {
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      ||.data||+0x3

                          AREA ||i.app_dome_rgb||, CODE, READONLY, ALIGN=2

                  app_dome_rgb PROC
;;;252    
;;;253    void app_dome_rgb(uint8_t r, uint8_t g, uint8_t b) {
000000  b510              PUSH     {r4,lr}
;;;254    //	app_dome_stop_current();
;;;255    
;;;256    	subDome.repeate = 0;
000002  4c07              LDR      r4,|L8.32|
000004  2300              MOVS     r3,#0
000006  71e3              STRB     r3,[r4,#7]
;;;257    	subDome.offtime = 0;
000008  72e3              STRB     r3,[r4,#0xb]
00000a  7323              STRB     r3,[r4,#0xc]
;;;258    
;;;259    	dome_running_param.color.R = r;
00000c  4b05              LDR      r3,|L8.36|
;;;260    	dome_running_param.color.G = g;
;;;261    	dome_running_param.color.B = b;
;;;262    
;;;263    	dome_running_param.color.R <<= 8;
00000e  0200              LSLS     r0,r0,#8
000010  8058              STRH     r0,[r3,#2]
;;;264    	dome_running_param.color.G <<= 8;
000012  0209              LSLS     r1,r1,#8
000014  8099              STRH     r1,[r3,#4]
;;;265    	dome_running_param.color.B <<= 8;
000016  0212              LSLS     r2,r2,#8
000018  80da              STRH     r2,[r3,#6]
;;;266    
;;;267    #if 1
;;;268    	Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
00001a  f7fffffe          BL       Light_RGB_set
;;;269    			dome_running_param.color.B);
;;;270    #else
;;;271    	Light_RGB_set(0xFFFF, 0xFFFF, 0xFFFF);
;;;272    #endif
;;;273    }
00001e  bd10              POP      {r4,pc}
;;;274    
                          ENDP

                  |L8.32|
                          DCD      ||.bss||
                  |L8.36|
                          DCD      ||.data||+0x16

                          AREA ||i.app_dome_single_cycle||, CODE, READONLY, ALIGN=2

                  app_dome_single_cycle PROC
;;;135    }
;;;136    void app_dome_single_cycle(uint8_t subIndex) {
000000  b510              PUSH     {r4,lr}
;;;137    	if ((dome_blink.header.repeat_number & 0x0F) == (subIndex + 1)) {
000002  490d              LDR      r1,|L9.56|
000004  7a4a              LDRB     r2,[r1,#9]  ; dome_blink
000006  0713              LSLS     r3,r2,#28
000008  0f1b              LSRS     r3,r3,#28
00000a  1c42              ADDS     r2,r0,#1
00000c  4293              CMP      r3,r2
00000e  d104              BNE      |L9.26|
;;;138    		subIndex = 0;
;;;139    		memcpy((uint8_t*) &subDome, (uint8_t*) &dome_blink.subdome[subIndex],
000010  4608              MOV      r0,r1
000012  220d              MOVS     r2,#0xd
000014  3817              SUBS     r0,r0,#0x17
000016  310a              ADDS     r1,r1,#0xa
000018  e005              B        |L9.38|
                  |L9.26|
;;;140    				sizeof(subDome));
;;;141    	} else {
;;;142    		memcpy((uint8_t*) &subDome,
00001a  220d              MOVS     r2,#0xd
00001c  4350              MULS     r0,r2,r0
00001e  1841              ADDS     r1,r0,r1
000020  4805              LDR      r0,|L9.56|
000022  3117              ADDS     r1,r1,#0x17
000024  3817              SUBS     r0,r0,#0x17
                  |L9.38|
000026  f7fffffe          BL       __aeabi_memcpy
;;;143    				(uint8_t*) &dome_blink.subdome[subIndex + 1], sizeof(subDome));
;;;144    	}
;;;145    	memcpy((uint8_t*) &domeHeader, (uint8_t*) &dome_blink.header,
00002a  4903              LDR      r1,|L9.56|
00002c  220a              MOVS     r2,#0xa
00002e  1a88              SUBS     r0,r1,r2
000030  f7fffffe          BL       __aeabi_memcpy
;;;146    			sizeof(domeHeader));
;;;147    }
000034  bd10              POP      {r4,pc}
;;;148    
                          ENDP

000036  0000              DCW      0x0000
                  |L9.56|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_start||, CODE, READONLY, ALIGN=2

                  app_dome_start PROC
;;;151     */
;;;152    void app_dome_start(uint8_t domeIndex) {
000000  b570              PUSH     {r4-r6,lr}
;;;153    	subDome_Assist.switch_flag = 0;
000002  4d17              LDR      r5,|L10.96|
000004  2600              MOVS     r6,#0
000006  4604              MOV      r4,r0                 ;152
000008  702e              STRB     r6,[r5,#0]
;;;154    	subDome_Assist.msCnt = 0;
00000a  1c69              ADDS     r1,r5,#1
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       __aeabi_uwrite4
;;;155    	subDome_Assist.stopTime = 0;
;;;156    
;;;157    	if (blink_number == 0) {
000012  4628              MOV      r0,r5
000014  716e              STRB     r6,[r5,#5]            ;155
000016  3810              SUBS     r0,r0,#0x10
000018  7800              LDRB     r0,[r0,#0]  ; blink_number
00001a  2800              CMP      r0,#0
00001c  d007              BEQ      |L10.46|
;;;158    		Light_RGB_set(0, 0, 0);
;;;159    		return;
;;;160    	}
;;;161    
;;;162    //	app_dome_single_cycle(domeIndex);
;;;163    	if (domeIndex > (blink_number - 1)) {
;;;164    		domePro.currentDomeIndex = blink_number - 1;
00001e  4629              MOV      r1,r5
000020  390d              SUBS     r1,r1,#0xd
000022  1e40              SUBS     r0,r0,#1
000024  4284              CMP      r4,r0                 ;163
000026  dd08              BLE      |L10.58|
000028  7008              STRB     r0,[r1,#0]
;;;165    		domeIndex = blink_number - 1;
00002a  b2c4              UXTB     r4,r0
00002c  e006              B        |L10.60|
                  |L10.46|
00002e  2200              MOVS     r2,#0                 ;158
000030  4611              MOV      r1,r2                 ;158
000032  4610              MOV      r0,r2                 ;158
000034  f7fffffe          BL       Light_RGB_set
;;;166    	} else {
;;;167    		domePro.currentDomeIndex = domeIndex;
;;;168    	}
;;;169    #if 1
;;;170    	app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;171    #else
;;;172    
;;;173    	if (dir == 0) {
;;;174    //		app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;175    		if (*((uint8_t *) &dome_blink) == 0xFF) {
;;;176    			Light_RGB_set(0, 0, 0);
;;;177    		}
;;;178    	} else if (dir == 1) {
;;;179    		uint8_t i = 0;
;;;180    		for (i = 0;
;;;181    				i < ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T));
;;;182    				i++) {
;;;183    //			app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;184    			if (*((uint8_t *) &dome_blink) == 0xFF) {
;;;185    				if (domeIndex == 0) {
;;;186    					Light_RGB_set(0, 0, 0);
;;;187    					break;
;;;188    				}
;;;189    				domeIndex++;
;;;190    				if (domeIndex
;;;191    						>= ((FMC_APROM_END - DOME_START_ADDR)
;;;192    								/ sizeof(DOME_DEFAULT_T))) {
;;;193    					domeIndex = 0;
;;;194    //					break;
;;;195    				}
;;;196    			} else {
;;;197    				break;
;;;198    			}
;;;199    		}
;;;200    	} else if (dir == 2) {
;;;201    		uint8_t i = 0;
;;;202    		for (i = 0;
;;;203    				i < ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T));
;;;204    				i++) {
;;;205    //			app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;206    			if (*((uint8_t *) &dome_blink) == 0xFF) {
;;;207    				if (domeIndex) {
;;;208    					domeIndex--;
;;;209    				} else {
;;;210    					Light_RGB_set(0, 0, 0);
;;;211    					break;
;;;212    				}
;;;213    			} else {
;;;214    				break;
;;;215    			}
;;;216    		}
;;;217    	}
;;;218    #endif
;;;219    //	domePro.currentDomeIndex = domeIndex;
;;;220    //	if (dome_blink.header.index == 0) {
;;;221    //		app_eeprom_get_dome_with_index(&dome_blink, 0);
;;;222    //		app_dome_stop_current();
;;;223    //	}
;;;224    
;;;225    	memcpy((uint8_t*) &subDome, (uint8_t*) &dome_blink.subdome[0],
;;;226    			sizeof(subDome));
;;;227    
;;;228    	memcpy((uint8_t*) &domeHeader, (uint8_t*) &dome_blink.header,
;;;229    			sizeof(domeHeader));
;;;230    
;;;231    }
000038  bd70              POP      {r4-r6,pc}
                  |L10.58|
00003a  700c              STRB     r4,[r1,#0]            ;167
                  |L10.60|
00003c  4621              MOV      r1,r4                 ;170
00003e  4809              LDR      r0,|L10.100|
000040  f7fffffe          BL       app_eeprom_get_dome_with_index
000044  4907              LDR      r1,|L10.100|
000046  220d              MOVS     r2,#0xd               ;225
000048  310a              ADDS     r1,r1,#0xa            ;225
00004a  4608              MOV      r0,r1                 ;225
00004c  3821              SUBS     r0,r0,#0x21           ;225
00004e  f7fffffe          BL       __aeabi_memcpy
000052  4904              LDR      r1,|L10.100|
000054  220a              MOVS     r2,#0xa               ;228
000056  1a88              SUBS     r0,r1,r2              ;228
000058  f7fffffe          BL       __aeabi_memcpy
00005c  bd70              POP      {r4-r6,pc}
;;;232    static uint8_t cyc = 0;
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      ||.data||+0x10
                  |L10.100|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_start_current||, CODE, READONLY, ALIGN=2

                  app_dome_start_current PROC
;;;122    }
;;;123    void app_dome_start_current(void) {
000000  b510              PUSH     {r4,lr}
;;;124    	color_blink_index = COLOR_BLINK_NUMBER - 1;
000002  4907              LDR      r1,|L11.32|
000004  2009              MOVS     r0,#9
000006  7048              STRB     r0,[r1,#1]
;;;125    
;;;126    	g_tWork.status.bits.blinkEnable = 1;
000008  4806              LDR      r0,|L11.36|
00000a  2208              MOVS     r2,#8
00000c  6801              LDR      r1,[r0,#0]  ; g_tWork
00000e  4311              ORRS     r1,r1,r2
;;;127    	app_dome_start(domePro.currentDomeIndex);
000010  6001              STR      r1,[r0,#0]  ; g_tWork
000012  4803              LDR      r0,|L11.32|
000014  1cc0              ADDS     r0,r0,#3
000016  7800              LDRB     r0,[r0,#0]  ; domePro
000018  f7fffffe          BL       app_dome_start
;;;128    }
00001c  bd10              POP      {r4,pc}
;;;129    void app_dome_stop_current(void) {
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      ||.data||
                  |L11.36|
                          DCD      g_tWork

                          AREA ||i.app_dome_stop_current||, CODE, READONLY, ALIGN=2

                  app_dome_stop_current PROC
;;;128    }
;;;129    void app_dome_stop_current(void) {
000000  b510              PUSH     {r4,lr}
;;;130    	g_tWork.status.bits.blinkEnable = 0;
000002  4807              LDR      r0,|L12.32|
000004  2208              MOVS     r2,#8
000006  6801              LDR      r1,[r0,#0]  ; g_tWork
000008  4391              BICS     r1,r1,r2
;;;131    
;;;132    	subDome.repeate = 0;
00000a  6001              STR      r1,[r0,#0]  ; g_tWork
00000c  2000              MOVS     r0,#0
00000e  4905              LDR      r1,|L12.36|
;;;133    	subDome.offtime = 0;
;;;134    	Light_RGB_set(0, 0, 0);
000010  4602              MOV      r2,r0
000012  71c8              STRB     r0,[r1,#7]            ;132
000014  72c8              STRB     r0,[r1,#0xb]          ;133
000016  7308              STRB     r0,[r1,#0xc]          ;133
000018  4601              MOV      r1,r0
00001a  f7fffffe          BL       Light_RGB_set
;;;135    }
00001e  bd10              POP      {r4,pc}
;;;136    void app_dome_single_cycle(uint8_t subIndex) {
                          ENDP

                  |L12.32|
                          DCD      g_tWork
                  |L12.36|
                          DCD      ||.bss||

                          AREA ||i.app_dome_subDome_pro||, CODE, READONLY, ALIGN=2

                  app_dome_subDome_pro PROC
;;;232    static uint8_t cyc = 0;
;;;233    static void app_dome_subDome_pro(uint8_t subIndex) {
000000  b570              PUSH     {r4-r6,lr}
;;;234    
;;;235    	subDome_Assist.switch_flag = 0;
000002  4c0f              LDR      r4,|L13.64|
000004  2500              MOVS     r5,#0
000006  4606              MOV      r6,r0                 ;233
000008  7025              STRB     r5,[r4,#0]
;;;236    	subDome_Assist.msCnt = 0;
00000a  1c61              ADDS     r1,r4,#1
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       __aeabi_uwrite4
;;;237    	subDome_Assist.stopTime = 50;
000012  2032              MOVS     r0,#0x32
000014  7160              STRB     r0,[r4,#5]
;;;238    
;;;239    	if (g_tWork.status.bits.DEMO) {
000016  480b              LDR      r0,|L13.68|
000018  7800              LDRB     r0,[r0,#0]  ; g_tWork
00001a  0741              LSLS     r1,r0,#29
;;;240    		cyc++;
00001c  480a              LDR      r0,|L13.72|
00001e  d50d              BPL      |L13.60|
000020  7881              LDRB     r1,[r0,#2]  ; cyc
000022  1c49              ADDS     r1,r1,#1
000024  b2c9              UXTB     r1,r1
000026  7081              STRB     r1,[r0,#2]
;;;241    		if (cyc <= 4) {
000028  2904              CMP      r1,#4
00002a  d803              BHI      |L13.52|
                  |L13.44|
;;;242    			app_dome_single_cycle(subIndex);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       app_dome_single_cycle
;;;243    		} else {
;;;244    			cyc = 0;
;;;245    			app_dome_next();
;;;246    		}
;;;247    	} else {
;;;248    		cyc = 0;
;;;249    		app_dome_single_cycle(subIndex);
;;;250    	}
;;;251    }
000032  bd70              POP      {r4-r6,pc}
                  |L13.52|
000034  7085              STRB     r5,[r0,#2]            ;244
000036  f7fffffe          BL       app_dome_next
00003a  bd70              POP      {r4-r6,pc}
                  |L13.60|
00003c  7085              STRB     r5,[r0,#2]            ;248
00003e  e7f5              B        |L13.44|
;;;252    
                          ENDP

                  |L13.64|
                          DCD      ||.data||+0x10
                  |L13.68|
                          DCD      g_tWork
                  |L13.72|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  subDome
                          %        13
                  domeHeader
                          %        10
                  dome_blink
                          %        114

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  color_blink_buffer
000000  ffffff00          DCB      0xff,0xff,0xff,0x00
000004  ff000000          DCB      0xff,0x00,0x00,0x00
000008  ffff0000          DCB      0xff,0xff,0x00,0x00
00000c  00ffffff          DCB      0x00,0xff,0xff,0xff
000010  00ffffff          DCB      0x00,0xff,0xff,0xff
000014  0000ff80          DCB      0x00,0x00,0xff,0x80
000018  0080ffff          DCB      0x00,0x80,0xff,0xff
00001c  8000              DCB      0x80,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  blink_number
000000  00                DCB      0x00
                  color_blink_index
000001  00                DCB      0x00
                  ||cyc||
000002  00                DCB      0x00
                  domePro
000003  00                DCB      0x00
                  add_tmp
                          DCD      0x00000000
                  add_data
                          DCD      0x00000000
                  tmp
                          DCD      0x00000000
                  subDome_Assist
                          DCD      0x00000000
000014  0000              DCB      0x00,0x00
                  dome_running_param
000016  0000              DCB      0x00,0x00
                          DCD      0x00000000
00001c  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_dome.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_dome_c_236fdecf____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_dome_c_236fdecf____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_dome_c_236fdecf____REVSH|
#line 402
|__asm___10_app_dome_c_236fdecf____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
