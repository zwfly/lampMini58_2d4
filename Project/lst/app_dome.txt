; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_dome.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_dome.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 --omf_browse=.\obj\app_dome.crf ..\App\src\app_dome.c]
                          THUMB

                          AREA ||i.app_color_blink_next||, CODE, READONLY, ALIGN=2

                  app_color_blink_next PROC
;;;80     }
;;;81     void app_color_blink_next(void) {
000000  b510              PUSH     {r4,lr}
;;;82     	color_blink_index++;
000002  490a              LDR      r1,|L1.44|
000004  7848              LDRB     r0,[r1,#1]  ; color_blink_index
000006  1c40              ADDS     r0,r0,#1
000008  b2c0              UXTB     r0,r0
00000a  7048              STRB     r0,[r1,#1]
;;;83     	if (color_blink_index >= COLOR_BLINK_NUMBER) {
00000c  280a              CMP      r0,#0xa
00000e  d301              BCC      |L1.20|
;;;84     		color_blink_index = 0;
000010  2000              MOVS     r0,#0
000012  7048              STRB     r0,[r1,#1]
                  |L1.20|
;;;85     	}
;;;86     	app_dome_rgb(color_blink_buffer[color_blink_index][0],
000014  b2c0              UXTB     r0,r0
000016  0041              LSLS     r1,r0,#1
000018  4b05              LDR      r3,|L1.48|
00001a  1840              ADDS     r0,r0,r1
00001c  18c1              ADDS     r1,r0,r3
00001e  788a              LDRB     r2,[r1,#2]
000020  7849              LDRB     r1,[r1,#1]
000022  5c18              LDRB     r0,[r3,r0]
000024  f7fffffe          BL       app_dome_rgb
;;;87     			color_blink_buffer[color_blink_index][1],
;;;88     			color_blink_buffer[color_blink_index][2]);
;;;89     }
000028  bd10              POP      {r4,pc}
;;;90     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||.data||
                  |L1.48|
                          DCD      ||.constdata||

                          AREA ||i.app_color_blink_previous||, CODE, READONLY, ALIGN=2

                  app_color_blink_previous PROC
;;;70     }
;;;71     void app_color_blink_previous(void) {
000000  b510              PUSH     {r4,lr}
;;;72     	if (color_blink_index) {
000002  4909              LDR      r1,|L2.40|
000004  7848              LDRB     r0,[r1,#1]  ; color_blink_index
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L2.14|
00000a  1e40              SUBS     r0,r0,#1              ;71
;;;73     		color_blink_index--;
00000c  e000              B        |L2.16|
                  |L2.14|
;;;74     	} else {
;;;75     		color_blink_index = COLOR_BLINK_NUMBER - 1;
00000e  2009              MOVS     r0,#9
                  |L2.16|
000010  7048              STRB     r0,[r1,#1]
;;;76     	}
;;;77     	app_dome_rgb(color_blink_buffer[color_blink_index][0],
000012  b2c0              UXTB     r0,r0
000014  0041              LSLS     r1,r0,#1
000016  4b05              LDR      r3,|L2.44|
000018  1840              ADDS     r0,r0,r1
00001a  18c1              ADDS     r1,r0,r3
00001c  788a              LDRB     r2,[r1,#2]
00001e  7849              LDRB     r1,[r1,#1]
000020  5c18              LDRB     r0,[r3,r0]
000022  f7fffffe          BL       app_dome_rgb
;;;78     			color_blink_buffer[color_blink_index][1],
;;;79     			color_blink_buffer[color_blink_index][2]);
;;;80     }
000026  bd10              POP      {r4,pc}
;;;81     void app_color_blink_next(void) {
                          ENDP

                  |L2.40|
                          DCD      ||.data||
                  |L2.44|
                          DCD      ||.constdata||

                          AREA ||i.app_dome_Init||, CODE, READONLY, ALIGN=2

                  app_dome_Init PROC
;;;35     
;;;36     void app_dome_Init(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;37     	uint8_t i = 0;
000002  2400              MOVS     r4,#0
;;;38     	uint8_t availableGroup = 0;
;;;39     	uint8_t minSpaceBytes = 0;
;;;40     
;;;41     	blink_number = 0;
000004  4f15              LDR      r7,|L3.92|
;;;42     	if (sizeof(DOME_DEFAULT_T) % 4) {
;;;43     		minSpaceBytes = (sizeof(DOME_DEFAULT_T) / 4) * 4 + 4;
000006  2574              MOVS     r5,#0x74
000008  703c              STRB     r4,[r7,#0]            ;41
;;;44     	} else {
;;;45     		minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;46     	}
;;;47     	availableGroup = (FMC_APROM_END - DOME_START_ADDR) / minSpaceBytes;
00000a  262c              MOVS     r6,#0x2c
                  |L3.12|
;;;48     	for (i = 0; i < availableGroup; i++) {
;;;49     		if (0xFF != app_eeprom_read_int(i * minSpaceBytes)) {
00000c  4620              MOV      r0,r4
00000e  4368              MULS     r0,r5,r0
000010  f7fffffe          BL       app_eeprom_read_int
000014  28ff              CMP      r0,#0xff
000016  d006              BEQ      |L3.38|
;;;50     			blink_number++;
000018  7838              LDRB     r0,[r7,#0]  ; blink_number
00001a  1c64              ADDS     r4,r4,#1
00001c  1c40              ADDS     r0,r0,#1
00001e  b2e4              UXTB     r4,r4                 ;48
000020  7038              STRB     r0,[r7,#0]
000022  42b4              CMP      r4,r6                 ;48
000024  d3f2              BCC      |L3.12|
                  |L3.38|
;;;51     		} else {
;;;52     			break;
;;;53     		}
;;;54     	}
;;;55     
;;;56     	color_blink_index = COLOR_BLINK_NUMBER - 1;
000026  2009              MOVS     r0,#9
;;;57     //	g_tWork.status.bits.blinkEnable = 1;
;;;58     
;;;59     	memset((uint8_t *) &subDome_Assist, 0, sizeof(subDome_Assist));
000028  490c              LDR      r1,|L3.92|
00002a  7078              STRB     r0,[r7,#1]            ;56
00002c  3108              ADDS     r1,r1,#8
00002e  2000              MOVS     r0,#0
000030  6008              STR      r0,[r1,#0]
000032  8088              STRH     r0,[r1,#4]
;;;60     
;;;61     	memset((uint8_t *) &domePro, 0, sizeof(domePro));
000034  3908              SUBS     r1,r1,#8
000036  7088              STRB     r0,[r1,#2]
;;;62     	memset((uint8_t *) &dome_blink, 0, sizeof(dome_blink));
000038  2172              MOVS     r1,#0x72
00003a  4809              LDR      r0,|L3.96|
00003c  f7fffffe          BL       __aeabi_memclr
;;;63     	memset((uint8_t *) &dome_running_param, 0, sizeof(dome_running_param));
000040  4806              LDR      r0,|L3.92|
000042  2108              MOVS     r1,#8
000044  300e              ADDS     r0,r0,#0xe
000046  f7fffffe          BL       __aeabi_memclr
;;;64     
;;;65     	dome_running_param.bright = 100;
00004a  4804              LDR      r0,|L3.92|
00004c  2164              MOVS     r1,#0x64
00004e  300e              ADDS     r0,r0,#0xe
000050  7001              STRB     r1,[r0,#0]
;;;66     	dome_running_param.speed = 50;
000052  2132              MOVS     r1,#0x32
000054  7041              STRB     r1,[r0,#1]
;;;67     //	app_dome_start(0, 0);
;;;68     	app_dome_stop_current();
000056  f7fffffe          BL       app_dome_stop_current
;;;69     
;;;70     }
00005a  bdf8              POP      {r3-r7,pc}
;;;71     void app_color_blink_previous(void) {
                          ENDP

                  |L3.92|
                          DCD      ||.data||
                  |L3.96|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_get_current_Name||, CODE, READONLY, ALIGN=2

                  app_dome_get_current_Name PROC
;;;109    
;;;110    void app_dome_get_current_Name(uint8_t *name, uint8_t len) {
000000  b510              PUSH     {r4,lr}
;;;111    	if (len > sizeof(dome_blink.header.name)) {
000002  2908              CMP      r1,#8
000004  d803              BHI      |L4.14|
;;;112    		name = 0;
;;;113    		return;
;;;114    	}
;;;115    	memcpy(name, (uint8_t *) dome_blink.header.name, len);
000006  460a              MOV      r2,r1
000008  4901              LDR      r1,|L4.16|
00000a  f7fffffe          BL       __aeabi_memcpy
                  |L4.14|
;;;116    }
00000e  bd10              POP      {r4,pc}
;;;117    void app_dome_start_current(void) {
                          ENDP

                  |L4.16|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_interrupter||, CODE, READONLY, ALIGN=2

                  app_dome_interrupter PROC
;;;256    
;;;257    void app_dome_interrupter(void) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;258    
;;;259    #if 1
;;;260    
;;;261    //	if (g_tWork.status.bits.blinkEnable == 0) {
;;;262    //		return;
;;;263    //	}
;;;264    
;;;265    	if (subDome_Assist.stopTime) {
000002  49e2              LDR      r1,|L5.908|
000004  b085              SUB      sp,sp,#0x14           ;257
000006  7948              LDRB     r0,[r1,#5]  ; subDome_Assist
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L5.20|
00000c  1e40              SUBS     r0,r0,#1              ;257
;;;266    		subDome_Assist.stopTime--;
00000e  7148              STRB     r0,[r1,#5]
                  |L5.16|
;;;267    		return;
;;;268    	}
;;;269    
;;;270    	if ((subDome.repeate == 0) && (subDome.offtime == 0)) {
;;;271    		return;
;;;272    	}
;;;273    
;;;274    	switch (subDome.mode & 0x0F) {
;;;275    	case 0x03:  //shadow
;;;276    	{
;;;277    		subDome_Assist.msCnt++;
;;;278    
;;;279    		if (subDome.color1.R < subDome.color2.R) {
;;;280    			tmp = subDome.color1.R * 256
;;;281    					+ subDome_Assist.msCnt * 256
;;;282    							* abs(subDome.color2.R - subDome.color1.R)
;;;283    							/ subDome.speed;
;;;284    			tmp = subDome.bright * tmp / 100;
;;;285    		} else {
;;;286    			tmp = subDome.color1.R * 256
;;;287    					- subDome_Assist.msCnt * 256
;;;288    							* abs(subDome.color2.R - subDome.color1.R)
;;;289    							/ subDome.speed;
;;;290    			tmp = subDome.bright * tmp / 100;
;;;291    		}
;;;292    		dome_running_param.color.R = tmp & 0xFFFF;
;;;293    		//////
;;;294    		if (subDome.color1.G < subDome.color2.G) {
;;;295    			tmp = subDome.color1.G * 256
;;;296    					+ subDome_Assist.msCnt * 256
;;;297    							* abs(subDome.color2.G - subDome.color1.G)
;;;298    							/ subDome.speed;
;;;299    			tmp = subDome.bright * tmp / 100;
;;;300    //			Light_Green_set(tmp);
;;;301    		} else {
;;;302    			tmp = subDome.color1.G * 256
;;;303    					- subDome_Assist.msCnt * 256
;;;304    							* abs(subDome.color2.G - subDome.color1.G)
;;;305    							/ subDome.speed;
;;;306    			tmp = subDome.bright * tmp / 100;
;;;307    //			Light_Green_set(tmp);
;;;308    		}
;;;309    		dome_running_param.color.G = tmp & 0xFFFF;
;;;310    		//////
;;;311    		if (subDome.color1.B < subDome.color2.B) {
;;;312    			tmp = subDome.color1.B * 256
;;;313    					+ subDome_Assist.msCnt * 256
;;;314    							* abs(subDome.color2.B - subDome.color1.B)
;;;315    							/ subDome.speed;
;;;316    			tmp = subDome.bright * tmp / 100;
;;;317    //			Light_Blue_set(tmp);
;;;318    		} else {
;;;319    			tmp = subDome.color1.B * 256
;;;320    					- subDome_Assist.msCnt * 256
;;;321    							* abs(subDome.color2.B - subDome.color1.B)
;;;322    							/ subDome.speed;
;;;323    			tmp = subDome.bright * tmp / 100;
;;;324    //			Light_Blue_set(tmp);
;;;325    		}
;;;326    		dome_running_param.color.B = tmp & 0xFFFF;
;;;327    		Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
;;;328    				dome_running_param.color.B);
;;;329    
;;;330    		if (subDome_Assist.msCnt >= subDome.speed) {
;;;331    			subDome_Assist.msCnt = 0;
;;;332    #if 0
;;;333    			tmp_color = subDome.color2.R;
;;;334    			subDome.color2.R = subDome.color1.R;
;;;335    			subDome.color1.R = tmp_color;
;;;336    
;;;337    			tmp_color = subDome.color2.G;
;;;338    			subDome.color2.G = subDome.color1.G;
;;;339    			subDome.color1.G = tmp_color;
;;;340    
;;;341    			tmp_color = subDome.color2.B;
;;;342    			subDome.color2.B = subDome.color1.B;
;;;343    			subDome.color1.B = tmp_color;
;;;344    
;;;345    			if (subDome_Assist.switch_flag == 0) {
;;;346    				subDome_Assist.switch_flag = 1;
;;;347    
;;;348    			} else {
;;;349    				subDome_Assist.switch_flag = 0;
;;;350    
;;;351    				if (subDome.repeate) {
;;;352    					subDome.repeate--;
;;;353    				}
;;;354    			}
;;;355    #else
;;;356    
;;;357    			if (subDome.repeate) {
;;;358    				subDome.repeate--;
;;;359    			}
;;;360    
;;;361    #endif
;;;362    		}
;;;363    		if (subDome.repeate == 0) {
;;;364    //			Light_RGB_set(0, 0, 0);
;;;365    
;;;366    //			if (subDome.offtime) {
;;;367    //				subDome.offtime--;
;;;368    //			}
;;;369    //			if (subDome.offtime == 0) {
;;;370    			app_dome_subDome_pro(subDome.mode >> 4);
;;;371    //			}
;;;372    
;;;373    		}
;;;374    	}
;;;375    		break;
;;;376    	case 0x04:  //breath
;;;377    	{
;;;378    		if (subDome_Assist.switch_flag == 0) {
;;;379    			subDome_Assist.msCnt++;
;;;380    		} else {
;;;381    			if (subDome_Assist.msCnt) {
;;;382    				subDome_Assist.msCnt--;
;;;383    			}
;;;384    		}
;;;385    
;;;386    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.R / subDome.speed;
;;;387    		tmp = tmp * subDome.bright / 100;
;;;388    		dome_running_param.color.R = tmp & 0xFFFF;
;;;389    
;;;390    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.G / subDome.speed;
;;;391    		tmp = tmp * subDome.bright / 100;
;;;392    		dome_running_param.color.G = tmp & 0xFFFF;
;;;393    
;;;394    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.B / subDome.speed;
;;;395    		tmp = tmp * subDome.bright / 100;
;;;396    		dome_running_param.color.B = tmp & 0xFFFF;
;;;397    		Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
;;;398    				dome_running_param.color.B);
;;;399    
;;;400    		if ((subDome_Assist.msCnt >= subDome.speed)
;;;401    				|| (subDome_Assist.msCnt == 0)) {
;;;402    			if (subDome_Assist.switch_flag == 0) {
;;;403    				subDome_Assist.switch_flag = 1;
;;;404    			} else {
;;;405    				subDome_Assist.switch_flag = 0;
;;;406    				if (subDome.repeate) {
;;;407    					subDome.repeate--;
;;;408    				}
;;;409    			}
;;;410    		}
;;;411    		if (subDome.repeate == 0) {
;;;412    //			Light_RGB_set(0, 0, 0);
;;;413    //			if (subDome.offtime) {
;;;414    //				subDome.offtime--;
;;;415    //			}
;;;416    //			if (subDome.offtime == 0) {
;;;417    			app_dome_subDome_pro(subDome.mode >> 4);
;;;418    //			}
;;;419    		}
;;;420    	}
;;;421    		break;
;;;422    	case 0x05:  //blink flash
;;;423    	{
;;;424    		uint32_t tt = 0xFF;
;;;425    		if (subDome_Assist.msCnt == 0) {
;;;426    			tmp = tt * subDome.color1.R * subDome.bright / 100;
;;;427    			dome_running_param.color.R = tmp & 0xFFFF;
;;;428    
;;;429    			tmp = tt * subDome.color1.G * subDome.bright / 100;
;;;430    			dome_running_param.color.G = tmp & 0xFFFF;
;;;431    
;;;432    			tmp = tt * subDome.color1.B * subDome.bright / 100;
;;;433    			dome_running_param.color.B = tmp & 0xFFFF;
;;;434    			Light_RGB_set(dome_running_param.color.R,
;;;435    					dome_running_param.color.G, dome_running_param.color.B);
;;;436    		}
;;;437    		tmp = subDome.speed;
;;;438    		if (subDome_Assist.msCnt == tmp) {
;;;439    			tmp = tt * subDome.color2.R * subDome.bright / 100;
;;;440    			dome_running_param.color.R = tmp & 0xFFFF;
;;;441    
;;;442    			tmp = tt * subDome.color2.G * subDome.bright / 100;
;;;443    			dome_running_param.color.G = tmp & 0xFFFF;
;;;444    
;;;445    			tmp = tt * subDome.color2.B * subDome.bright / 100;
;;;446    			dome_running_param.color.B = tmp & 0xFFFF;
;;;447    			Light_RGB_set(dome_running_param.color.R,
;;;448    					dome_running_param.color.G, dome_running_param.color.B);
;;;449    		}
;;;450    		subDome_Assist.msCnt++;
;;;451    		tmp = 0;
;;;452    		tmp = tmp + subDome.speed + subDome.offtime;
;;;453    		if (subDome_Assist.msCnt >= tmp) {
;;;454    			subDome_Assist.msCnt = 0;
;;;455    			if (subDome.repeate) {
;;;456    				subDome.repeate--;
;;;457    			}
;;;458    		}
;;;459    		if (subDome.repeate == 0) {
;;;460    //			Light_RGB_set(0, 0, 0);
;;;461    //			if (subDome.offtime) {
;;;462    //				subDome.offtime--;
;;;463    //			}
;;;464    //			if (subDome.offtime == 0) {
;;;465    			app_dome_subDome_pro(subDome.mode >> 4);
;;;466    //			}
;;;467    		}
;;;468    	}
;;;469    		break;
;;;470    	default:
;;;471    
;;;472    		break;
;;;473    	}
;;;474    
;;;475    #endif
;;;476    }
000010  b005              ADD      sp,sp,#0x14
000012  bdf0              POP      {r4-r7,pc}
                  |L5.20|
000014  4dde              LDR      r5,|L5.912|
000016  79ea              LDRB     r2,[r5,#7]            ;270  ; subDome
000018  1ce8              ADDS     r0,r5,#3              ;270
00001a  9004              STR      r0,[sp,#0x10]         ;270
00001c  2a00              CMP      r2,#0                 ;270
00001e  d104              BNE      |L5.42|
000020  7a42              LDRB     r2,[r0,#9]            ;270  ; subDome
000022  7a03              LDRB     r3,[r0,#8]            ;270  ; subDome
000024  0210              LSLS     r0,r2,#8              ;270
000026  4318              ORRS     r0,r0,r3              ;270
000028  d0f2              BEQ      |L5.16|
                  |L5.42|
00002a  7828              LDRB     r0,[r5,#0]            ;274  ; subDome
00002c  4cd8              LDR      r4,|L5.912|
00002e  0700              LSLS     r0,r0,#28             ;274
000030  7862              LDRB     r2,[r4,#1]            ;279
000032  9203              STR      r2,[sp,#0xc]          ;294
000034  78a2              LDRB     r2,[r4,#2]            ;294
000036  9202              STR      r2,[sp,#8]            ;311
000038  7aa2              LDRB     r2,[r4,#0xa]          ;280
00003a  7a63              LDRB     r3,[r4,#9]            ;280
00003c  78e7              LDRB     r7,[r4,#3]            ;311
00003e  7a26              LDRB     r6,[r4,#8]            ;284
000040  0212              LSLS     r2,r2,#8              ;280
000042  431a              ORRS     r2,r2,r3              ;280
000044  0f00              LSRS     r0,r0,#28             ;274
000046  1c64              ADDS     r4,r4,#1              ;280
000048  9200              STR      r2,[sp,#0]            ;274
00004a  2803              CMP      r0,#3                 ;274
00004c  d00a              BEQ      |L5.100|
00004e  2804              CMP      r0,#4                 ;274
000050  d07e              BEQ      |L5.336|
000052  2805              CMP      r0,#5                 ;274
000054  d1dc              BNE      |L5.16|
000056  48cd              LDR      r0,|L5.908|
000058  1c40              ADDS     r0,r0,#1              ;425
00005a  f7fffffe          BL       __aeabi_uread4
00005e  2800              CMP      r0,#0                 ;425
000060  d077              BEQ      |L5.338|
000062  e147              B        |L5.756|
                  |L5.100|
000064  48c9              LDR      r0,|L5.908|
000066  1c40              ADDS     r0,r0,#1              ;277
000068  f7fffffe          BL       __aeabi_uread4
00006c  49c7              LDR      r1,|L5.908|
00006e  1c40              ADDS     r0,r0,#1              ;277
000070  1c49              ADDS     r1,r1,#1              ;277
000072  f7fffffe          BL       __aeabi_uwrite4
000076  9001              STR      r0,[sp,#4]            ;279
000078  48c5              LDR      r0,|L5.912|
00007a  49c5              LDR      r1,|L5.912|
00007c  7900              LDRB     r0,[r0,#4]            ;279  ; subDome
00007e  784b              LDRB     r3,[r1,#1]            ;279
000080  9d03              LDR      r5,[sp,#0xc]          ;280
000082  1ac1              SUBS     r1,r0,r3              ;280
000084  424a              RSBS     r2,r1,#0              ;280
000086  021b              LSLS     r3,r3,#8              ;280
000088  4285              CMP      r5,r0                 ;279
00008a  9801              LDR      r0,[sp,#4]            ;279
00008c  9303              STR      r3,[sp,#0xc]          ;279
00008e  d20a              BCS      |L5.166|
000090  2900              CMP      r1,#0                 ;280
000092  da00              BGE      |L5.150|
000094  4611              MOV      r1,r2                 ;280
                  |L5.150|
000096  4348              MULS     r0,r1,r0              ;280
000098  0200              LSLS     r0,r0,#8              ;280
00009a  9900              LDR      r1,[sp,#0]            ;280
00009c  f7fffffe          BL       __aeabi_uidivmod
0000a0  9903              LDR      r1,[sp,#0xc]          ;280
0000a2  1841              ADDS     r1,r0,r1              ;280
0000a4  e009              B        |L5.186|
                  |L5.166|
0000a6  2900              CMP      r1,#0                 ;286
0000a8  da00              BGE      |L5.172|
0000aa  4611              MOV      r1,r2                 ;286
                  |L5.172|
0000ac  4348              MULS     r0,r1,r0              ;286
0000ae  0200              LSLS     r0,r0,#8              ;286
0000b0  9900              LDR      r1,[sp,#0]            ;286
0000b2  f7fffffe          BL       __aeabi_uidivmod
0000b6  9903              LDR      r1,[sp,#0xc]          ;286
0000b8  1a09              SUBS     r1,r1,r0              ;286
                  |L5.186|
0000ba  4db4              LDR      r5,|L5.908|
0000bc  4630              MOV      r0,r6                 ;286
0000be  4348              MULS     r0,r1,r0              ;290
0000c0  3d08              SUBS     r5,r5,#8              ;286
0000c2  2164              MOVS     r1,#0x64              ;290
0000c4  f7fffffe          BL       __aeabi_uidivmod
0000c8  6068              STR      r0,[r5,#4]            ;292  ; tmp
0000ca  4628              MOV      r0,r5                 ;292
0000cc  8880              LDRH     r0,[r0,#4]            ;292  ; tmp
0000ce  4629              MOV      r1,r5                 ;292
0000d0  b280              UXTH     r0,r0                 ;292
0000d2  310e              ADDS     r1,r1,#0xe            ;292
0000d4  8048              STRH     r0,[r1,#2]            ;292
0000d6  9003              STR      r0,[sp,#0xc]          ;294
0000d8  48ad              LDR      r0,|L5.912|
0000da  49ad              LDR      r1,|L5.912|
0000dc  7940              LDRB     r0,[r0,#5]            ;294  ; subDome
0000de  788d              LDRB     r5,[r1,#2]            ;294
0000e0  9b02              LDR      r3,[sp,#8]            ;294
0000e2  1b41              SUBS     r1,r0,r5              ;295
0000e4  424a              RSBS     r2,r1,#0              ;295
0000e6  022d              LSLS     r5,r5,#8              ;295
0000e8  4283              CMP      r3,r0                 ;294
0000ea  9801              LDR      r0,[sp,#4]            ;294
0000ec  d209              BCS      |L5.258|
0000ee  2900              CMP      r1,#0                 ;295
0000f0  da00              BGE      |L5.244|
0000f2  4611              MOV      r1,r2                 ;295
                  |L5.244|
0000f4  4348              MULS     r0,r1,r0              ;295
0000f6  0200              LSLS     r0,r0,#8              ;295
0000f8  9900              LDR      r1,[sp,#0]            ;295
0000fa  f7fffffe          BL       __aeabi_uidivmod
0000fe  1941              ADDS     r1,r0,r5              ;295
000100  e008              B        |L5.276|
                  |L5.258|
000102  2900              CMP      r1,#0                 ;302
000104  da00              BGE      |L5.264|
000106  4611              MOV      r1,r2                 ;302
                  |L5.264|
000108  4348              MULS     r0,r1,r0              ;302
00010a  0200              LSLS     r0,r0,#8              ;302
00010c  9900              LDR      r1,[sp,#0]            ;302
00010e  f7fffffe          BL       __aeabi_uidivmod
000112  1a29              SUBS     r1,r5,r0              ;302
                  |L5.276|
000114  4d9d              LDR      r5,|L5.908|
000116  4630              MOV      r0,r6                 ;302
000118  4348              MULS     r0,r1,r0              ;306
00011a  3d08              SUBS     r5,r5,#8              ;302
00011c  2164              MOVS     r1,#0x64              ;306
00011e  f7fffffe          BL       __aeabi_uidivmod
000122  6068              STR      r0,[r5,#4]            ;309  ; tmp
000124  4628              MOV      r0,r5                 ;309
000126  8880              LDRH     r0,[r0,#4]            ;309  ; tmp
000128  4629              MOV      r1,r5                 ;309
00012a  b280              UXTH     r0,r0                 ;309
00012c  310e              ADDS     r1,r1,#0xe            ;309
00012e  8088              STRH     r0,[r1,#4]            ;309
000130  4d97              LDR      r5,|L5.912|
000132  9002              STR      r0,[sp,#8]            ;311
000134  463b              MOV      r3,r7                 ;311
000136  4629              MOV      r1,r5                 ;270
000138  79a8              LDRB     r0,[r5,#6]            ;311  ; subDome
00013a  78cf              LDRB     r7,[r1,#3]            ;311
00013c  1bc1              SUBS     r1,r0,r7              ;312
00013e  424a              RSBS     r2,r1,#0              ;312
000140  023f              LSLS     r7,r7,#8              ;312
000142  4283              CMP      r3,r0                 ;311
000144  9801              LDR      r0,[sp,#4]            ;311
000146  d20c              BCS      |L5.354|
000148  2900              CMP      r1,#0                 ;312
00014a  da00              BGE      |L5.334|
00014c  4611              MOV      r1,r2                 ;312
                  |L5.334|
00014e  e001              B        |L5.340|
                  |L5.336|
000150  e039              B        |L5.454|
                  |L5.338|
000152  e0a6              B        |L5.674|
                  |L5.340|
000154  4348              MULS     r0,r1,r0              ;312
000156  0200              LSLS     r0,r0,#8              ;312
000158  9900              LDR      r1,[sp,#0]            ;312
00015a  f7fffffe          BL       __aeabi_uidivmod
00015e  19c1              ADDS     r1,r0,r7              ;312
000160  e008              B        |L5.372|
                  |L5.354|
000162  2900              CMP      r1,#0                 ;319
000164  da00              BGE      |L5.360|
000166  4611              MOV      r1,r2                 ;319
                  |L5.360|
000168  4348              MULS     r0,r1,r0              ;319
00016a  0200              LSLS     r0,r0,#8              ;319
00016c  9900              LDR      r1,[sp,#0]            ;319
00016e  f7fffffe          BL       __aeabi_uidivmod
000172  1a39              SUBS     r1,r7,r0              ;319
                  |L5.372|
000174  4f85              LDR      r7,|L5.908|
000176  4630              MOV      r0,r6                 ;319
000178  4348              MULS     r0,r1,r0              ;323
00017a  3f08              SUBS     r7,r7,#8              ;319
00017c  2164              MOVS     r1,#0x64              ;323
00017e  f7fffffe          BL       __aeabi_uidivmod
000182  6078              STR      r0,[r7,#4]            ;326  ; tmp
000184  4638              MOV      r0,r7                 ;326
000186  8880              LDRH     r0,[r0,#4]            ;326  ; tmp
000188  b282              UXTH     r2,r0                 ;326
00018a  4638              MOV      r0,r7                 ;326
00018c  300e              ADDS     r0,r0,#0xe            ;326
00018e  80c2              STRH     r2,[r0,#6]            ;326
000190  9902              LDR      r1,[sp,#8]            ;327
000192  9803              LDR      r0,[sp,#0xc]          ;327
000194  f7fffffe          BL       Light_RGB_set
000198  4e7c              LDR      r6,|L5.908|
00019a  1c70              ADDS     r0,r6,#1              ;330
00019c  f7fffffe          BL       __aeabi_uread4
0001a0  7a61              LDRB     r1,[r4,#9]            ;330  ; subDome
0001a2  7a22              LDRB     r2,[r4,#8]            ;330  ; subDome
0001a4  0209              LSLS     r1,r1,#8              ;330
0001a6  4311              ORRS     r1,r1,r2              ;330
0001a8  e0ed              B        |L5.902|
                  |L5.426|
0001aa  1c71              ADDS     r1,r6,#1              ;331
0001ac  2000              MOVS     r0,#0                 ;331
0001ae  f7fffffe          BL       __aeabi_uwrite4
0001b2  e067              B        |L5.644|
                  |L5.436|
0001b4  79e8              LDRB     r0,[r5,#7]            ;363  ; subDome
0001b6  2800              CMP      r0,#0                 ;363
0001b8  d000              BEQ      |L5.444|
0001ba  e729              B        |L5.16|
                  |L5.444|
0001bc  7828              LDRB     r0,[r5,#0]            ;370  ; subDome
0001be  0900              LSRS     r0,r0,#4              ;370
0001c0  f7fffffe          BL       app_dome_subDome_pro
0001c4  e724              B        |L5.16|
                  |L5.454|
0001c6  4871              LDR      r0,|L5.908|
0001c8  7800              LDRB     r0,[r0,#0]            ;378  ; subDome_Assist
0001ca  2800              CMP      r0,#0                 ;378
0001cc  486f              LDR      r0,|L5.908|
0001ce  d05f              BEQ      |L5.656|
0001d0  1c40              ADDS     r0,r0,#1              ;378
0001d2  f7fffffe          BL       __aeabi_uread4
0001d6  2800              CMP      r0,#0                 ;381
0001d8  d004              BEQ      |L5.484|
0001da  496c              LDR      r1,|L5.908|
0001dc  1e40              SUBS     r0,r0,#1              ;382
                  |L5.478|
0001de  1c49              ADDS     r1,r1,#1              ;382
0001e0  f7fffffe          BL       __aeabi_uwrite4
                  |L5.484|
0001e4  4869              LDR      r0,|L5.908|
0001e6  1c40              ADDS     r0,r0,#1              ;386
0001e8  f7fffffe          BL       __aeabi_uread4
0001ec  9903              LDR      r1,[sp,#0xc]          ;386
0001ee  9001              STR      r0,[sp,#4]            ;386
0001f0  4348              MULS     r0,r1,r0              ;386
0001f2  0201              LSLS     r1,r0,#8              ;386
0001f4  1a08              SUBS     r0,r1,r0              ;386
0001f6  9900              LDR      r1,[sp,#0]            ;386
0001f8  f7fffffe          BL       __aeabi_uidivmod
0001fc  4601              MOV      r1,r0                 ;386
0001fe  4630              MOV      r0,r6                 ;386
000200  4348              MULS     r0,r1,r0              ;387
000202  2164              MOVS     r1,#0x64              ;387
000204  f7fffffe          BL       __aeabi_uidivmod
000208  4960              LDR      r1,|L5.908|
00020a  b280              UXTH     r0,r0                 ;388
00020c  1d89              ADDS     r1,r1,#6              ;388
00020e  9003              STR      r0,[sp,#0xc]          ;388
000210  8048              STRH     r0,[r1,#2]            ;388
000212  9902              LDR      r1,[sp,#8]            ;390
000214  9801              LDR      r0,[sp,#4]            ;390
000216  4348              MULS     r0,r1,r0              ;390
000218  0201              LSLS     r1,r0,#8              ;390
00021a  1a08              SUBS     r0,r1,r0              ;390
00021c  9900              LDR      r1,[sp,#0]            ;390
00021e  f7fffffe          BL       __aeabi_uidivmod
000222  4370              MULS     r0,r6,r0              ;391
000224  2164              MOVS     r1,#0x64              ;391
000226  f7fffffe          BL       __aeabi_uidivmod
00022a  4958              LDR      r1,|L5.908|
00022c  b280              UXTH     r0,r0                 ;392
00022e  1d89              ADDS     r1,r1,#6              ;392
000230  9002              STR      r0,[sp,#8]            ;392
000232  8088              STRH     r0,[r1,#4]            ;392
000234  9801              LDR      r0,[sp,#4]            ;394
000236  4378              MULS     r0,r7,r0              ;394
000238  0201              LSLS     r1,r0,#8              ;394
00023a  1a08              SUBS     r0,r1,r0              ;394
00023c  9900              LDR      r1,[sp,#0]            ;394
00023e  f7fffffe          BL       __aeabi_uidivmod
000242  4370              MULS     r0,r6,r0              ;395
000244  2164              MOVS     r1,#0x64              ;395
000246  f7fffffe          BL       __aeabi_uidivmod
00024a  4950              LDR      r1,|L5.908|
00024c  b282              UXTH     r2,r0                 ;396
00024e  3908              SUBS     r1,r1,#8              ;395
000250  6048              STR      r0,[r1,#4]            ;396  ; tmp
000252  4608              MOV      r0,r1                 ;396
000254  300e              ADDS     r0,r0,#0xe            ;396
000256  80c2              STRH     r2,[r0,#6]            ;396
000258  9902              LDR      r1,[sp,#8]            ;397
00025a  9803              LDR      r0,[sp,#0xc]          ;397
00025c  f7fffffe          BL       Light_RGB_set
000260  484a              LDR      r0,|L5.908|
000262  1c40              ADDS     r0,r0,#1              ;400
000264  f7fffffe          BL       __aeabi_uread4
000268  7a61              LDRB     r1,[r4,#9]            ;400  ; subDome
00026a  7a22              LDRB     r2,[r4,#8]            ;400  ; subDome
00026c  0209              LSLS     r1,r1,#8              ;400
00026e  4311              ORRS     r1,r1,r2              ;400
000270  4288              CMP      r0,r1                 ;400
000272  d201              BCS      |L5.632|
000274  2800              CMP      r0,#0                 ;401
000276  d19d              BNE      |L5.436|
                  |L5.632|
000278  4844              LDR      r0,|L5.908|
00027a  7801              LDRB     r1,[r0,#0]            ;402  ; subDome_Assist
00027c  2900              CMP      r1,#0                 ;402
00027e  d00d              BEQ      |L5.668|
000280  2100              MOVS     r1,#0                 ;405
000282  7001              STRB     r1,[r0,#0]            ;405
                  |L5.644|
000284  79e8              LDRB     r0,[r5,#7]            ;455  ; subDome
000286  2800              CMP      r0,#0                 ;455
000288  d098              BEQ      |L5.444|
00028a  1e40              SUBS     r0,r0,#1              ;455
00028c  71e8              STRB     r0,[r5,#7]            ;456
00028e  e791              B        |L5.436|
                  |L5.656|
000290  1c40              ADDS     r0,r0,#1              ;456
000292  f7fffffe          BL       __aeabi_uread4
000296  493d              LDR      r1,|L5.908|
000298  1c40              ADDS     r0,r0,#1              ;379
00029a  e7a0              B        |L5.478|
                  |L5.668|
00029c  2101              MOVS     r1,#1                 ;403
00029e  7001              STRB     r1,[r0,#0]            ;403
                  |L5.672|
0002a0  e788              B        |L5.436|
                  |L5.674|
0002a2  9803              LDR      r0,[sp,#0xc]          ;426
0002a4  4370              MULS     r0,r6,r0              ;426
0002a6  0201              LSLS     r1,r0,#8              ;426
0002a8  1a08              SUBS     r0,r1,r0              ;426
0002aa  2164              MOVS     r1,#0x64              ;426
0002ac  f7fffffe          BL       __aeabi_uidivmod
0002b0  4936              LDR      r1,|L5.908|
0002b2  b280              UXTH     r0,r0                 ;427
0002b4  1d89              ADDS     r1,r1,#6              ;427
0002b6  9001              STR      r0,[sp,#4]            ;427
0002b8  8048              STRH     r0,[r1,#2]            ;427
0002ba  9802              LDR      r0,[sp,#8]            ;429
0002bc  4370              MULS     r0,r6,r0              ;429
0002be  0201              LSLS     r1,r0,#8              ;429
0002c0  1a08              SUBS     r0,r1,r0              ;429
0002c2  2164              MOVS     r1,#0x64              ;429
0002c4  f7fffffe          BL       __aeabi_uidivmod
0002c8  4930              LDR      r1,|L5.908|
0002ca  b280              UXTH     r0,r0                 ;430
0002cc  1d89              ADDS     r1,r1,#6              ;430
0002ce  9000              STR      r0,[sp,#0]            ;430
0002d0  8088              STRH     r0,[r1,#4]            ;430
0002d2  4377              MULS     r7,r6,r7              ;432
0002d4  0238              LSLS     r0,r7,#8              ;432
0002d6  1bc0              SUBS     r0,r0,r7              ;432
0002d8  2164              MOVS     r1,#0x64              ;432
0002da  f7fffffe          BL       __aeabi_uidivmod
0002de  492b              LDR      r1,|L5.908|
0002e0  b282              UXTH     r2,r0                 ;433
0002e2  3908              SUBS     r1,r1,#8              ;432
0002e4  6048              STR      r0,[r1,#4]            ;433  ; tmp
0002e6  4608              MOV      r0,r1                 ;433
0002e8  300e              ADDS     r0,r0,#0xe            ;433
0002ea  80c2              STRH     r2,[r0,#6]            ;433
0002ec  9900              LDR      r1,[sp,#0]            ;434
0002ee  9801              LDR      r0,[sp,#4]            ;434
0002f0  f7fffffe          BL       Light_RGB_set
                  |L5.756|
0002f4  7a60              LDRB     r0,[r4,#9]            ;437  ; subDome
0002f6  4f25              LDR      r7,|L5.908|
0002f8  0206              LSLS     r6,r0,#8              ;437
0002fa  7a21              LDRB     r1,[r4,#8]            ;437  ; subDome
0002fc  3f08              SUBS     r7,r7,#8              ;437
0002fe  430e              ORRS     r6,r6,r1              ;437
000300  4638              MOV      r0,r7                 ;438
000302  3009              ADDS     r0,r0,#9              ;438
000304  607e              STR      r6,[r7,#4]            ;438  ; tmp
000306  f7fffffe          BL       __aeabi_uread4
00030a  42b0              CMP      r0,r6                 ;438
00030c  d128              BNE      |L5.864|
00030e  7928              LDRB     r0,[r5,#4]            ;439  ; subDome
000310  7a2e              LDRB     r6,[r5,#8]            ;439  ; subDome
000312  4370              MULS     r0,r6,r0              ;439
000314  0201              LSLS     r1,r0,#8              ;439
000316  1a08              SUBS     r0,r1,r0              ;439
000318  2164              MOVS     r1,#0x64              ;439
00031a  f7fffffe          BL       __aeabi_uidivmod
00031e  b280              UXTH     r0,r0                 ;440
000320  4639              MOV      r1,r7                 ;440
000322  310e              ADDS     r1,r1,#0xe            ;440
000324  9001              STR      r0,[sp,#4]            ;440
000326  8048              STRH     r0,[r1,#2]            ;440
000328  7968              LDRB     r0,[r5,#5]            ;442  ; subDome
00032a  4370              MULS     r0,r6,r0              ;442
00032c  0201              LSLS     r1,r0,#8              ;442
00032e  1a08              SUBS     r0,r1,r0              ;442
000330  2164              MOVS     r1,#0x64              ;442
000332  f7fffffe          BL       __aeabi_uidivmod
000336  b280              UXTH     r0,r0                 ;443
000338  4639              MOV      r1,r7                 ;443
00033a  310e              ADDS     r1,r1,#0xe            ;443
00033c  9000              STR      r0,[sp,#0]            ;443
00033e  8088              STRH     r0,[r1,#4]            ;443
000340  79a8              LDRB     r0,[r5,#6]            ;445  ; subDome
000342  4370              MULS     r0,r6,r0              ;445
000344  0201              LSLS     r1,r0,#8              ;445
000346  1a08              SUBS     r0,r1,r0              ;445
000348  2164              MOVS     r1,#0x64              ;445
00034a  f7fffffe          BL       __aeabi_uidivmod
00034e  b282              UXTH     r2,r0                 ;446
000350  6078              STR      r0,[r7,#4]            ;446  ; tmp
000352  4638              MOV      r0,r7                 ;446
000354  300e              ADDS     r0,r0,#0xe            ;446
000356  80c2              STRH     r2,[r0,#6]            ;446
000358  9900              LDR      r1,[sp,#0]            ;447
00035a  9801              LDR      r0,[sp,#4]            ;447
00035c  f7fffffe          BL       Light_RGB_set
                  |L5.864|
000360  4e0a              LDR      r6,|L5.908|
000362  1c70              ADDS     r0,r6,#1              ;450
000364  f7fffffe          BL       __aeabi_uread4
000368  1c71              ADDS     r1,r6,#1              ;450
00036a  1c40              ADDS     r0,r0,#1              ;450
00036c  f7fffffe          BL       __aeabi_uwrite4
000370  7a61              LDRB     r1,[r4,#9]            ;452  ; subDome
000372  7a23              LDRB     r3,[r4,#8]            ;452  ; subDome
000374  020a              LSLS     r2,r1,#8              ;452
000376  9904              LDR      r1,[sp,#0x10]         ;452
000378  431a              ORRS     r2,r2,r3              ;452
00037a  7a4b              LDRB     r3,[r1,#9]            ;452  ; subDome
00037c  7a0c              LDRB     r4,[r1,#8]            ;452  ; subDome
00037e  0219              LSLS     r1,r3,#8              ;452
000380  4321              ORRS     r1,r1,r4              ;452
000382  1851              ADDS     r1,r2,r1              ;452
000384  6079              STR      r1,[r7,#4]            ;452  ; tmp
                  |L5.902|
000386  4288              CMP      r0,r1                 ;453
000388  d38a              BCC      |L5.672|
00038a  e70e              B        |L5.426|
                          ENDP

                  |L5.908|
                          DCD      ||.data||+0x8
                  |L5.912|
                          DCD      ||.bss||

                          AREA ||i.app_dome_next||, CODE, READONLY, ALIGN=2

                  app_dome_next PROC
;;;99     }
;;;100    void app_dome_next(void) {
000000  b510              PUSH     {r4,lr}
;;;101    	domePro.currentDomeIndex++;
000002  4907              LDR      r1,|L6.32|
000004  7808              LDRB     r0,[r1,#0]  ; domePro
000006  1c40              ADDS     r0,r0,#1
000008  b2c0              UXTB     r0,r0
00000a  7008              STRB     r0,[r1,#0]
;;;102    	if (domePro.currentDomeIndex
00000c  282c              CMP      r0,#0x2c
00000e  d301              BCC      |L6.20|
;;;103    			>= ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T))) {
;;;104    		domePro.currentDomeIndex = 0;
000010  2000              MOVS     r0,#0
000012  7008              STRB     r0,[r1,#0]
                  |L6.20|
;;;105    	}
;;;106    
;;;107    	app_dome_start(domePro.currentDomeIndex, 1);
000014  b2c0              UXTB     r0,r0
000016  2101              MOVS     r1,#1
000018  f7fffffe          BL       app_dome_start
;;;108    }
00001c  bd10              POP      {r4,pc}
;;;109    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      ||.data||+0x2

                          AREA ||i.app_dome_previous||, CODE, READONLY, ALIGN=2

                  app_dome_previous PROC
;;;90     
;;;91     void app_dome_previous(void) {
000000  b510              PUSH     {r4,lr}
;;;92     	if (domePro.currentDomeIndex) {
000002  4906              LDR      r1,|L7.28|
000004  7808              LDRB     r0,[r1,#0]  ; domePro
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L7.14|
00000a  1e40              SUBS     r0,r0,#1              ;91
;;;93     		domePro.currentDomeIndex--;
00000c  e000              B        |L7.16|
                  |L7.14|
;;;94     	} else {
;;;95     		domePro.currentDomeIndex = (FMC_APROM_END - DOME_START_ADDR)
00000e  202b              MOVS     r0,#0x2b
                  |L7.16|
000010  7008              STRB     r0,[r1,#0]
;;;96     				/ sizeof(DOME_DEFAULT_T) - 1;
;;;97     	}
;;;98     	app_dome_start(domePro.currentDomeIndex, 2);
000012  b2c0              UXTB     r0,r0
000014  2102              MOVS     r1,#2
000016  f7fffffe          BL       app_dome_start
;;;99     }
00001a  bd10              POP      {r4,pc}
;;;100    void app_dome_next(void) {
                          ENDP

                  |L7.28|
                          DCD      ||.data||+0x2

                          AREA ||i.app_dome_rgb||, CODE, READONLY, ALIGN=2

                  app_dome_rgb PROC
;;;240    
;;;241    void app_dome_rgb(uint8_t r, uint8_t g, uint8_t b) {
000000  b570              PUSH     {r4-r6,lr}
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;242    	app_dome_stop_current();
000008  f7fffffe          BL       app_dome_stop_current
;;;243    	dome_running_param.color.R = r << 8;
00000c  4b04              LDR      r3,|L8.32|
00000e  0230              LSLS     r0,r6,#8
000010  8058              STRH     r0,[r3,#2]
;;;244    	dome_running_param.color.G = g << 8;
000012  0229              LSLS     r1,r5,#8
000014  8099              STRH     r1,[r3,#4]
;;;245    	dome_running_param.color.B = b << 8;
000016  0222              LSLS     r2,r4,#8
000018  80da              STRH     r2,[r3,#6]
;;;246    #if 1
;;;247    	Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
00001a  f7fffffe          BL       Light_RGB_set
;;;248    			dome_running_param.color.B);
;;;249    #else
;;;250    	Light_RGB_set(0xFFFF, 0xFFFF, 0xFFFF);
;;;251    #endif
;;;252    }
00001e  bd70              POP      {r4-r6,pc}
;;;253    
                          ENDP

                  |L8.32|
                          DCD      ||.data||+0xe

                          AREA ||i.app_dome_single_cycle||, CODE, READONLY, ALIGN=2

                  app_dome_single_cycle PROC
;;;129    }
;;;130    void app_dome_single_cycle(uint8_t subIndex) {
000000  b510              PUSH     {r4,lr}
;;;131    	if ((dome_blink.header.repeat_number & 0x0F) == (subIndex + 1)) {
000002  490d              LDR      r1,|L9.56|
000004  7a4a              LDRB     r2,[r1,#9]  ; dome_blink
000006  0713              LSLS     r3,r2,#28
000008  0f1b              LSRS     r3,r3,#28
00000a  1c42              ADDS     r2,r0,#1
00000c  4293              CMP      r3,r2
00000e  d104              BNE      |L9.26|
;;;132    		subIndex = 0;
;;;133    		memcpy((uint8_t*) &subDome, (uint8_t*) &dome_blink.subdome[subIndex],
000010  4608              MOV      r0,r1
000012  220d              MOVS     r2,#0xd
000014  3817              SUBS     r0,r0,#0x17
000016  310a              ADDS     r1,r1,#0xa
000018  e005              B        |L9.38|
                  |L9.26|
;;;134    				sizeof(subDome));
;;;135    	} else {
;;;136    		memcpy((uint8_t*) &subDome,
00001a  220d              MOVS     r2,#0xd
00001c  4350              MULS     r0,r2,r0
00001e  1841              ADDS     r1,r0,r1
000020  4805              LDR      r0,|L9.56|
000022  3117              ADDS     r1,r1,#0x17
000024  3817              SUBS     r0,r0,#0x17
                  |L9.38|
000026  f7fffffe          BL       __aeabi_memcpy
;;;137    				(uint8_t*) &dome_blink.subdome[subIndex + 1], sizeof(subDome));
;;;138    	}
;;;139    	memcpy((uint8_t*) &domeHeader, (uint8_t*) &dome_blink.header,
00002a  4903              LDR      r1,|L9.56|
00002c  220a              MOVS     r2,#0xa
00002e  1a88              SUBS     r0,r1,r2
000030  f7fffffe          BL       __aeabi_memcpy
;;;140    			sizeof(domeHeader));
;;;141    }
000034  bd10              POP      {r4,pc}
;;;142    
                          ENDP

000036  0000              DCW      0x0000
                  |L9.56|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_start||, CODE, READONLY, ALIGN=2

                  app_dome_start PROC
;;;145     */
;;;146    void app_dome_start(uint8_t domeIndex, uint8_t dir) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;147    	subDome_Assist.switch_flag = 0;
000002  4e25              LDR      r6,|L10.152|
000004  2700              MOVS     r7,#0
000006  460d              MOV      r5,r1                 ;146
000008  4604              MOV      r4,r0                 ;146
00000a  7037              STRB     r7,[r6,#0]
;;;148    	subDome_Assist.msCnt = 0;
00000c  1c71              ADDS     r1,r6,#1
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       __aeabi_uwrite4
;;;149    	subDome_Assist.stopTime = 0;
;;;150    
;;;151    //	app_dome_single_cycle(domeIndex);
;;;152    	if (domeIndex
;;;153    			> ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T) - 1)) {
;;;154    		domePro.currentDomeIndex = (FMC_APROM_END - DOME_START_ADDR)
000014  1fb0              SUBS     r0,r6,#6
000016  7177              STRB     r7,[r6,#5]            ;149
000018  2c2b              CMP      r4,#0x2b              ;152
00001a  d903              BLS      |L10.36|
00001c  212b              MOVS     r1,#0x2b
00001e  7001              STRB     r1,[r0,#0]
;;;155    				/ sizeof(DOME_DEFAULT_T) - 1;
;;;156    		domeIndex = (FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T)
000020  460c              MOV      r4,r1
000022  e000              B        |L10.38|
                  |L10.36|
;;;157    				- 1;
;;;158    	} else {
;;;159    		domePro.currentDomeIndex = domeIndex;
000024  7004              STRB     r4,[r0,#0]
                  |L10.38|
;;;160    	}
;;;161    	if (dir == 0) {
;;;162    //		app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;163    		if (*((uint8_t *) &dome_blink) == 0xFF) {
000026  481d              LDR      r0,|L10.156|
000028  2d00              CMP      r5,#0                 ;161
00002a  7802              LDRB     r2,[r0,#0]
00002c  d004              BEQ      |L10.56|
;;;164    			Light_RGB_set(0, 0, 0);
;;;165    		}
;;;166    	} else if (dir == 1) {
00002e  2d01              CMP      r5,#1
000030  d005              BEQ      |L10.62|
;;;167    		uint8_t i = 0;
;;;168    		for (i = 0;
;;;169    				i < ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T));
;;;170    				i++) {
;;;171    //			app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;172    			if (*((uint8_t *) &dome_blink) == 0xFF) {
;;;173    				if (domeIndex == 0) {
;;;174    					Light_RGB_set(0, 0, 0);
;;;175    					break;
;;;176    				}
;;;177    				domeIndex++;
;;;178    				if (domeIndex
;;;179    						>= ((FMC_APROM_END - DOME_START_ADDR)
;;;180    								/ sizeof(DOME_DEFAULT_T))) {
;;;181    					domeIndex = 0;
;;;182    //					break;
;;;183    				}
;;;184    			} else {
;;;185    				break;
;;;186    			}
;;;187    		}
;;;188    	} else if (dir == 2) {
000032  2d02              CMP      r5,#2
000034  d012              BEQ      |L10.92|
000036  e022              B        |L10.126|
                  |L10.56|
000038  2aff              CMP      r2,#0xff              ;163
00003a  d01b              BEQ      |L10.116|
00003c  e01f              B        |L10.126|
                  |L10.62|
00003e  2000              MOVS     r0,#0                 ;167
                  |L10.64|
000040  2aff              CMP      r2,#0xff              ;172
000042  d11c              BNE      |L10.126|
000044  2c00              CMP      r4,#0                 ;173
000046  d015              BEQ      |L10.116|
000048  1c64              ADDS     r4,r4,#1              ;173
00004a  b2e4              UXTB     r4,r4                 ;177
00004c  2c2c              CMP      r4,#0x2c              ;178
00004e  d300              BCC      |L10.82|
000050  2400              MOVS     r4,#0                 ;181
                  |L10.82|
000052  1c40              ADDS     r0,r0,#1              ;181
000054  b2c0              UXTB     r0,r0                 ;170
000056  282c              CMP      r0,#0x2c              ;169
000058  d3f2              BCC      |L10.64|
00005a  e010              B        |L10.126|
                  |L10.92|
;;;189    		uint8_t i = 0;
00005c  2000              MOVS     r0,#0
                  |L10.94|
;;;190    		for (i = 0;
;;;191    				i < ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T));
;;;192    				i++) {
;;;193    //			app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;194    			if (*((uint8_t *) &dome_blink) == 0xFF) {
00005e  2aff              CMP      r2,#0xff
000060  d10d              BNE      |L10.126|
;;;195    				if (domeIndex) {
000062  2c00              CMP      r4,#0
000064  d006              BEQ      |L10.116|
000066  1e64              SUBS     r4,r4,#1
;;;196    					domeIndex--;
000068  1c40              ADDS     r0,r0,#1
00006a  b2c0              UXTB     r0,r0                 ;192
00006c  b2e4              UXTB     r4,r4
00006e  282c              CMP      r0,#0x2c              ;191
000070  d3f5              BCC      |L10.94|
000072  e004              B        |L10.126|
                  |L10.116|
;;;197    				} else {
;;;198    					Light_RGB_set(0, 0, 0);
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4610              MOV      r0,r2
00007a  f7fffffe          BL       Light_RGB_set
                  |L10.126|
;;;199    					break;
;;;200    				}
;;;201    			} else {
;;;202    				break;
;;;203    			}
;;;204    		}
;;;205    	}
;;;206    //	domePro.currentDomeIndex = domeIndex;
;;;207    //	if (dome_blink.header.index == 0) {
;;;208    //		app_eeprom_get_dome_with_index(&dome_blink, 0);
;;;209    //		app_dome_stop_current();
;;;210    //	}
;;;211    
;;;212    	memcpy((uint8_t*) &subDome, (uint8_t*) &dome_blink.subdome[0],
00007e  4907              LDR      r1,|L10.156|
000080  220d              MOVS     r2,#0xd
000082  310a              ADDS     r1,r1,#0xa
000084  4608              MOV      r0,r1
000086  3821              SUBS     r0,r0,#0x21
000088  f7fffffe          BL       __aeabi_memcpy
;;;213    			sizeof(subDome));
;;;214    
;;;215    	memcpy((uint8_t*) &domeHeader, (uint8_t*) &dome_blink.header,
00008c  4903              LDR      r1,|L10.156|
00008e  220a              MOVS     r2,#0xa
000090  1a88              SUBS     r0,r1,r2
000092  f7fffffe          BL       __aeabi_memcpy
;;;216    			sizeof(domeHeader));
;;;217    
;;;218    }
000096  bdf8              POP      {r3-r7,pc}
;;;219    //static uint8_t cyc = 0;
                          ENDP

                  |L10.152|
                          DCD      ||.data||+0x8
                  |L10.156|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_start_current||, CODE, READONLY, ALIGN=2

                  app_dome_start_current PROC
;;;116    }
;;;117    void app_dome_start_current(void) {
000000  b510              PUSH     {r4,lr}
;;;118    	color_blink_index = COLOR_BLINK_NUMBER - 1;
000002  4904              LDR      r1,|L11.20|
000004  2009              MOVS     r0,#9
000006  7048              STRB     r0,[r1,#1]
;;;119    
;;;120    //	g_tWork.status.bits.blinkEnable = 1;
;;;121    	app_dome_start(domePro.currentDomeIndex, 0);
000008  1c88              ADDS     r0,r1,#2
00000a  7800              LDRB     r0,[r0,#0]  ; domePro
00000c  2100              MOVS     r1,#0
00000e  f7fffffe          BL       app_dome_start
;;;122    }
000012  bd10              POP      {r4,pc}
;;;123    void app_dome_stop_current(void) {
                          ENDP

                  |L11.20|
                          DCD      ||.data||

                          AREA ||i.app_dome_stop_current||, CODE, READONLY, ALIGN=2

                  app_dome_stop_current PROC
;;;122    }
;;;123    void app_dome_stop_current(void) {
000000  b510              PUSH     {r4,lr}
;;;124    //	g_tWork.status.bits.blinkEnable = 0;
;;;125    
;;;126    	subDome.repeate = 0;
000002  2000              MOVS     r0,#0
000004  4904              LDR      r1,|L12.24|
;;;127    	subDome.offtime = 0;
;;;128    	Light_RGB_set(0, 0, 0);
000006  4602              MOV      r2,r0
000008  71c8              STRB     r0,[r1,#7]            ;126
00000a  72c8              STRB     r0,[r1,#0xb]          ;127
00000c  7308              STRB     r0,[r1,#0xc]          ;127
00000e  4601              MOV      r1,r0
000010  f7fffffe          BL       Light_RGB_set
;;;129    }
000014  bd10              POP      {r4,pc}
;;;130    void app_dome_single_cycle(uint8_t subIndex) {
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      ||.bss||

                          AREA ||i.app_dome_subDome_pro||, CODE, READONLY, ALIGN=2

                  app_dome_subDome_pro PROC
;;;219    //static uint8_t cyc = 0;
;;;220    static void app_dome_subDome_pro(uint8_t subIndex) {
000000  b510              PUSH     {r4,lr}
;;;221    
;;;222    	subDome_Assist.switch_flag = 0;
000002  4c04              LDR      r4,|L13.20|
000004  2000              MOVS     r0,#0
000006  7020              STRB     r0,[r4,#0]
;;;223    	subDome_Assist.msCnt = 0;
000008  1c61              ADDS     r1,r4,#1
00000a  f7fffffe          BL       __aeabi_uwrite4
;;;224    	subDome_Assist.stopTime = 50;
00000e  2032              MOVS     r0,#0x32
000010  7160              STRB     r0,[r4,#5]
;;;225    #if 0
;;;226    	if (g_tWork.status.bits.DEMO) {
;;;227    		cyc++;
;;;228    		if (cyc <= 4) {
;;;229    			app_dome_single_cycle(subIndex);
;;;230    		} else {
;;;231    			cyc = 0;
;;;232    			app_dome_next();
;;;233    		}
;;;234    	} else {
;;;235    		cyc = 0;
;;;236    		app_dome_single_cycle(subIndex);
;;;237    	}
;;;238    #endif
;;;239    }
000012  bd10              POP      {r4,pc}
;;;240    
                          ENDP

                  |L13.20|
                          DCD      ||.data||+0x8

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  subDome
                          %        13
                  domeHeader
                          %        10
                  dome_blink
                          %        114

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  color_blink_buffer
000000  ffffff00          DCB      0xff,0xff,0xff,0x00
000004  ff000000          DCB      0xff,0x00,0x00,0x00
000008  ffff0000          DCB      0xff,0xff,0x00,0x00
00000c  00ffffff          DCB      0x00,0xff,0xff,0xff
000010  00ffffff          DCB      0x00,0xff,0xff,0xff
000014  0000ff80          DCB      0x00,0x00,0xff,0x80
000018  0080ffff          DCB      0x00,0x80,0xff,0xff
00001c  8000              DCB      0x80,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  blink_number
000000  00                DCB      0x00
                  color_blink_index
000001  00                DCB      0x00
                  domePro
000002  0000              DCB      0x00,0x00
                  tmp
                          DCD      0x00000000
                  subDome_Assist
                          DCD      0x00000000
00000c  0000              DCB      0x00,0x00
                  dome_running_param
00000e  0000              DCB      0x00,0x00
                          DCD      0x00000000
000014  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_dome.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_dome_c_236fdecf____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_dome_c_236fdecf____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_dome_c_236fdecf____REVSH|
#line 402
|__asm___10_app_dome_c_236fdecf____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
