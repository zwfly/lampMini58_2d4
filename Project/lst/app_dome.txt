; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_dome.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_dome.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\app_dome.crf ..\App\src\app_dome.c]
                          THUMB

                          AREA ||i.app_color_blink_next||, CODE, READONLY, ALIGN=2

                  app_color_blink_next PROC
;;;400    }
;;;401    void app_color_blink_next(void) {
000000  b510              PUSH     {r4,lr}
;;;402    	color_blink_index++;
000002  490a              LDR      r1,|L1.44|
000004  7808              LDRB     r0,[r1,#0]  ; color_blink_index
000006  1c40              ADDS     r0,r0,#1
000008  b2c0              UXTB     r0,r0
00000a  7008              STRB     r0,[r1,#0]
;;;403    	if (color_blink_index >= COLOR_BLINK_NUMBER) {
00000c  280a              CMP      r0,#0xa
00000e  d301              BCC      |L1.20|
;;;404    		color_blink_index = 0;
000010  2000              MOVS     r0,#0
000012  7008              STRB     r0,[r1,#0]
                  |L1.20|
;;;405    	}
;;;406    	app_dome_rgb(color_blink_buffer[color_blink_index][0],
000014  b2c0              UXTB     r0,r0
000016  0041              LSLS     r1,r0,#1
000018  4b05              LDR      r3,|L1.48|
00001a  1840              ADDS     r0,r0,r1
00001c  18c1              ADDS     r1,r0,r3
00001e  788a              LDRB     r2,[r1,#2]
000020  7849              LDRB     r1,[r1,#1]
000022  5c18              LDRB     r0,[r3,r0]
000024  f7fffffe          BL       app_dome_rgb
;;;407    			color_blink_buffer[color_blink_index][1],
;;;408    			color_blink_buffer[color_blink_index][2]);
;;;409    }
000028  bd10              POP      {r4,pc}
;;;410    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||.data||
                  |L1.48|
                          DCD      ||.constdata||

                          AREA ||i.app_color_blink_previous||, CODE, READONLY, ALIGN=2

                  app_color_blink_previous PROC
;;;390    }
;;;391    void app_color_blink_previous(void) {
000000  b510              PUSH     {r4,lr}
;;;392    	if (color_blink_index) {
000002  4909              LDR      r1,|L2.40|
000004  7808              LDRB     r0,[r1,#0]  ; color_blink_index
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L2.14|
00000a  1e40              SUBS     r0,r0,#1              ;391
;;;393    		color_blink_index--;
00000c  e000              B        |L2.16|
                  |L2.14|
;;;394    	} else {
;;;395    		color_blink_index = COLOR_BLINK_NUMBER - 1;
00000e  2009              MOVS     r0,#9
                  |L2.16|
000010  7008              STRB     r0,[r1,#0]
;;;396    	}
;;;397    	app_dome_rgb(color_blink_buffer[color_blink_index][0],
000012  b2c0              UXTB     r0,r0
000014  0041              LSLS     r1,r0,#1
000016  4b05              LDR      r3,|L2.44|
000018  1840              ADDS     r0,r0,r1
00001a  18c1              ADDS     r1,r0,r3
00001c  788a              LDRB     r2,[r1,#2]
00001e  7849              LDRB     r1,[r1,#1]
000020  5c18              LDRB     r0,[r3,r0]
000022  f7fffffe          BL       app_dome_rgb
;;;398    			color_blink_buffer[color_blink_index][1],
;;;399    			color_blink_buffer[color_blink_index][2]);
;;;400    }
000026  bd10              POP      {r4,pc}
;;;401    void app_color_blink_next(void) {
                          ENDP

                  |L2.40|
                          DCD      ||.data||
                  |L2.44|
                          DCD      ||.constdata||

                          AREA ||i.app_dome_Init||, CODE, READONLY, ALIGN=2

                  app_dome_Init PROC
;;;374    
;;;375    void app_dome_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;376    	color_blink_index = COLOR_BLINK_NUMBER - 1;
000002  490d              LDR      r1,|L3.56|
000004  2009              MOVS     r0,#9
000006  7008              STRB     r0,[r1,#0]
;;;377    //	g_tWork.status.bits.blinkEnable = 1;
;;;378    
;;;379    	memset((uint8_t *) &subDome_Assist, 0, sizeof(subDome_Assist));
000008  3108              ADDS     r1,r1,#8
00000a  2000              MOVS     r0,#0
00000c  6008              STR      r0,[r1,#0]
00000e  8088              STRH     r0,[r1,#4]
;;;380    
;;;381    	memset((uint8_t *) &domePro, 0, sizeof(domePro));
000010  3908              SUBS     r1,r1,#8
000012  7048              STRB     r0,[r1,#1]
;;;382    	memset((uint8_t *) &dome_blink, 0, sizeof(dome_blink));
000014  2172              MOVS     r1,#0x72
000016  4809              LDR      r0,|L3.60|
000018  f7fffffe          BL       __aeabi_memclr
;;;383    	memset((uint8_t *) &dome_running_param, 0, sizeof(dome_running_param));
00001c  4806              LDR      r0,|L3.56|
00001e  2108              MOVS     r1,#8
000020  300e              ADDS     r0,r0,#0xe
000022  f7fffffe          BL       __aeabi_memclr
;;;384    
;;;385    	dome_running_param.bright = 100;
000026  4804              LDR      r0,|L3.56|
000028  2164              MOVS     r1,#0x64
00002a  300e              ADDS     r0,r0,#0xe
00002c  7001              STRB     r1,[r0,#0]
;;;386    	dome_running_param.speed = 50;
00002e  2132              MOVS     r1,#0x32
000030  7041              STRB     r1,[r0,#1]
;;;387    //	app_dome_start(0, 0);
;;;388    	app_dome_stop_current();
000032  f7fffffe          BL       app_dome_stop_current
;;;389    
;;;390    }
000036  bd10              POP      {r4,pc}
;;;391    void app_color_blink_previous(void) {
                          ENDP

                  |L3.56|
                          DCD      ||.data||
                  |L3.60|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_get_current_Name||, CODE, READONLY, ALIGN=2

                  app_dome_get_current_Name PROC
;;;429    
;;;430    void app_dome_get_current_Name(char *name, uint8_t len) {
000000  b510              PUSH     {r4,lr}
;;;431    	if (len > sizeof(dome_blink.header.name)) {
000002  2908              CMP      r1,#8
000004  d803              BHI      |L4.14|
;;;432    		name = 0;
;;;433    		return;
;;;434    	}
;;;435    	memcpy((uint8_t *) name, (uint8_t *) dome_blink.header.name, len);
000006  460a              MOV      r2,r1
000008  4901              LDR      r1,|L4.16|
00000a  f7fffffe          BL       __aeabi_memcpy
                  |L4.14|
;;;436    }
00000e  bd10              POP      {r4,pc}
;;;437    void app_dome_start_current(void) {
                          ENDP

                  |L4.16|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_interrupter||, CODE, READONLY, ALIGN=2

                  app_dome_interrupter PROC
;;;576    
;;;577    void app_dome_interrupter(void) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;578    
;;;579    #if 1
;;;580    
;;;581    //	if (g_tWork.status.bits.blinkEnable == 0) {
;;;582    //		return;
;;;583    //	}
;;;584    
;;;585    	if (subDome_Assist.stopTime) {
000002  49e2              LDR      r1,|L5.908|
000004  b085              SUB      sp,sp,#0x14           ;577
000006  7948              LDRB     r0,[r1,#5]  ; subDome_Assist
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L5.20|
00000c  1e40              SUBS     r0,r0,#1              ;577
;;;586    		subDome_Assist.stopTime--;
00000e  7148              STRB     r0,[r1,#5]
                  |L5.16|
;;;587    		return;
;;;588    	}
;;;589    
;;;590    	if ((subDome.repeate == 0) && (subDome.offtime == 0)) {
;;;591    		return;
;;;592    	}
;;;593    
;;;594    	switch (subDome.mode & 0x0F) {
;;;595    	case 0x03:  //shadow
;;;596    	{
;;;597    		subDome_Assist.msCnt++;
;;;598    
;;;599    		if (subDome.color1.R < subDome.color2.R) {
;;;600    			tmp = subDome.color1.R * 256
;;;601    					+ subDome_Assist.msCnt * 256
;;;602    							* abs(subDome.color2.R - subDome.color1.R)
;;;603    							/ subDome.speed;
;;;604    			tmp = subDome.bright * tmp / 100;
;;;605    		} else {
;;;606    			tmp = subDome.color1.R * 256
;;;607    					- subDome_Assist.msCnt * 256
;;;608    							* abs(subDome.color2.R - subDome.color1.R)
;;;609    							/ subDome.speed;
;;;610    			tmp = subDome.bright * tmp / 100;
;;;611    		}
;;;612    		dome_running_param.color.R = tmp & 0xFFFF;
;;;613    		//////
;;;614    		if (subDome.color1.G < subDome.color2.G) {
;;;615    			tmp = subDome.color1.G * 256
;;;616    					+ subDome_Assist.msCnt * 256
;;;617    							* abs(subDome.color2.G - subDome.color1.G)
;;;618    							/ subDome.speed;
;;;619    			tmp = subDome.bright * tmp / 100;
;;;620    //			Light_Green_set(tmp);
;;;621    		} else {
;;;622    			tmp = subDome.color1.G * 256
;;;623    					- subDome_Assist.msCnt * 256
;;;624    							* abs(subDome.color2.G - subDome.color1.G)
;;;625    							/ subDome.speed;
;;;626    			tmp = subDome.bright * tmp / 100;
;;;627    //			Light_Green_set(tmp);
;;;628    		}
;;;629    		dome_running_param.color.G = tmp & 0xFFFF;
;;;630    		//////
;;;631    		if (subDome.color1.B < subDome.color2.B) {
;;;632    			tmp = subDome.color1.B * 256
;;;633    					+ subDome_Assist.msCnt * 256
;;;634    							* abs(subDome.color2.B - subDome.color1.B)
;;;635    							/ subDome.speed;
;;;636    			tmp = subDome.bright * tmp / 100;
;;;637    //			Light_Blue_set(tmp);
;;;638    		} else {
;;;639    			tmp = subDome.color1.B * 256
;;;640    					- subDome_Assist.msCnt * 256
;;;641    							* abs(subDome.color2.B - subDome.color1.B)
;;;642    							/ subDome.speed;
;;;643    			tmp = subDome.bright * tmp / 100;
;;;644    //			Light_Blue_set(tmp);
;;;645    		}
;;;646    		dome_running_param.color.B = tmp & 0xFFFF;
;;;647    		Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
;;;648    				dome_running_param.color.B);
;;;649    
;;;650    		if (subDome_Assist.msCnt >= subDome.speed) {
;;;651    			subDome_Assist.msCnt = 0;
;;;652    #if 0
;;;653    			tmp_color = subDome.color2.R;
;;;654    			subDome.color2.R = subDome.color1.R;
;;;655    			subDome.color1.R = tmp_color;
;;;656    
;;;657    			tmp_color = subDome.color2.G;
;;;658    			subDome.color2.G = subDome.color1.G;
;;;659    			subDome.color1.G = tmp_color;
;;;660    
;;;661    			tmp_color = subDome.color2.B;
;;;662    			subDome.color2.B = subDome.color1.B;
;;;663    			subDome.color1.B = tmp_color;
;;;664    
;;;665    			if (subDome_Assist.switch_flag == 0) {
;;;666    				subDome_Assist.switch_flag = 1;
;;;667    
;;;668    			} else {
;;;669    				subDome_Assist.switch_flag = 0;
;;;670    
;;;671    				if (subDome.repeate) {
;;;672    					subDome.repeate--;
;;;673    				}
;;;674    			}
;;;675    #else
;;;676    
;;;677    			if (subDome.repeate) {
;;;678    				subDome.repeate--;
;;;679    			}
;;;680    
;;;681    #endif
;;;682    		}
;;;683    		if (subDome.repeate == 0) {
;;;684    //			Light_RGB_set(0, 0, 0);
;;;685    
;;;686    //			if (subDome.offtime) {
;;;687    //				subDome.offtime--;
;;;688    //			}
;;;689    //			if (subDome.offtime == 0) {
;;;690    			app_dome_subDome_pro(subDome.mode >> 4);
;;;691    //			}
;;;692    
;;;693    		}
;;;694    	}
;;;695    		break;
;;;696    	case 0x04:  //breath
;;;697    	{
;;;698    		if (subDome_Assist.switch_flag == 0) {
;;;699    			subDome_Assist.msCnt++;
;;;700    		} else {
;;;701    			if (subDome_Assist.msCnt) {
;;;702    				subDome_Assist.msCnt--;
;;;703    			}
;;;704    		}
;;;705    
;;;706    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.R / subDome.speed;
;;;707    		tmp = tmp * subDome.bright / 100;
;;;708    		dome_running_param.color.R = tmp & 0xFFFF;
;;;709    
;;;710    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.G / subDome.speed;
;;;711    		tmp = tmp * subDome.bright / 100;
;;;712    		dome_running_param.color.G = tmp & 0xFFFF;
;;;713    
;;;714    		tmp = subDome_Assist.msCnt * 0xFF * subDome.color1.B / subDome.speed;
;;;715    		tmp = tmp * subDome.bright / 100;
;;;716    		dome_running_param.color.B = tmp & 0xFFFF;
;;;717    		Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
;;;718    				dome_running_param.color.B);
;;;719    
;;;720    		if ((subDome_Assist.msCnt >= subDome.speed)
;;;721    				|| (subDome_Assist.msCnt == 0)) {
;;;722    			if (subDome_Assist.switch_flag == 0) {
;;;723    				subDome_Assist.switch_flag = 1;
;;;724    			} else {
;;;725    				subDome_Assist.switch_flag = 0;
;;;726    				if (subDome.repeate) {
;;;727    					subDome.repeate--;
;;;728    				}
;;;729    			}
;;;730    		}
;;;731    		if (subDome.repeate == 0) {
;;;732    //			Light_RGB_set(0, 0, 0);
;;;733    //			if (subDome.offtime) {
;;;734    //				subDome.offtime--;
;;;735    //			}
;;;736    //			if (subDome.offtime == 0) {
;;;737    			app_dome_subDome_pro(subDome.mode >> 4);
;;;738    //			}
;;;739    		}
;;;740    	}
;;;741    		break;
;;;742    	case 0x05:  //blink flash
;;;743    	{
;;;744    		uint32_t tt = 0xFF;
;;;745    		if (subDome_Assist.msCnt == 0) {
;;;746    			tmp = tt * subDome.color1.R * subDome.bright / 100;
;;;747    			dome_running_param.color.R = tmp & 0xFFFF;
;;;748    
;;;749    			tmp = tt * subDome.color1.G * subDome.bright / 100;
;;;750    			dome_running_param.color.G = tmp & 0xFFFF;
;;;751    
;;;752    			tmp = tt * subDome.color1.B * subDome.bright / 100;
;;;753    			dome_running_param.color.B = tmp & 0xFFFF;
;;;754    			Light_RGB_set(dome_running_param.color.R,
;;;755    					dome_running_param.color.G, dome_running_param.color.B);
;;;756    		}
;;;757    		tmp = subDome.speed;
;;;758    		if (subDome_Assist.msCnt == tmp) {
;;;759    			tmp = tt * subDome.color2.R * subDome.bright / 100;
;;;760    			dome_running_param.color.R = tmp & 0xFFFF;
;;;761    
;;;762    			tmp = tt * subDome.color2.G * subDome.bright / 100;
;;;763    			dome_running_param.color.G = tmp & 0xFFFF;
;;;764    
;;;765    			tmp = tt * subDome.color2.B * subDome.bright / 100;
;;;766    			dome_running_param.color.B = tmp & 0xFFFF;
;;;767    			Light_RGB_set(dome_running_param.color.R,
;;;768    					dome_running_param.color.G, dome_running_param.color.B);
;;;769    		}
;;;770    		subDome_Assist.msCnt++;
;;;771    		tmp = 0;
;;;772    		tmp = tmp + subDome.speed + subDome.offtime;
;;;773    		if (subDome_Assist.msCnt >= tmp) {
;;;774    			subDome_Assist.msCnt = 0;
;;;775    			if (subDome.repeate) {
;;;776    				subDome.repeate--;
;;;777    			}
;;;778    		}
;;;779    		if (subDome.repeate == 0) {
;;;780    //			Light_RGB_set(0, 0, 0);
;;;781    //			if (subDome.offtime) {
;;;782    //				subDome.offtime--;
;;;783    //			}
;;;784    //			if (subDome.offtime == 0) {
;;;785    			app_dome_subDome_pro(subDome.mode >> 4);
;;;786    //			}
;;;787    		}
;;;788    	}
;;;789    		break;
;;;790    	default:
;;;791    
;;;792    		break;
;;;793    	}
;;;794    
;;;795    #endif
;;;796    }
000010  b005              ADD      sp,sp,#0x14
000012  bdf0              POP      {r4-r7,pc}
                  |L5.20|
000014  4dde              LDR      r5,|L5.912|
000016  79ea              LDRB     r2,[r5,#7]            ;590  ; subDome
000018  1ce8              ADDS     r0,r5,#3              ;590
00001a  9004              STR      r0,[sp,#0x10]         ;590
00001c  2a00              CMP      r2,#0                 ;590
00001e  d104              BNE      |L5.42|
000020  7a42              LDRB     r2,[r0,#9]            ;590  ; subDome
000022  7a03              LDRB     r3,[r0,#8]            ;590  ; subDome
000024  0210              LSLS     r0,r2,#8              ;590
000026  4318              ORRS     r0,r0,r3              ;590
000028  d0f2              BEQ      |L5.16|
                  |L5.42|
00002a  7828              LDRB     r0,[r5,#0]            ;594  ; subDome
00002c  4cd8              LDR      r4,|L5.912|
00002e  0700              LSLS     r0,r0,#28             ;594
000030  7862              LDRB     r2,[r4,#1]            ;599
000032  9203              STR      r2,[sp,#0xc]          ;614
000034  78a2              LDRB     r2,[r4,#2]            ;614
000036  9202              STR      r2,[sp,#8]            ;631
000038  7aa2              LDRB     r2,[r4,#0xa]          ;600
00003a  7a63              LDRB     r3,[r4,#9]            ;600
00003c  78e7              LDRB     r7,[r4,#3]            ;631
00003e  7a26              LDRB     r6,[r4,#8]            ;604
000040  0212              LSLS     r2,r2,#8              ;600
000042  431a              ORRS     r2,r2,r3              ;600
000044  0f00              LSRS     r0,r0,#28             ;594
000046  1c64              ADDS     r4,r4,#1              ;600
000048  9200              STR      r2,[sp,#0]            ;594
00004a  2803              CMP      r0,#3                 ;594
00004c  d00a              BEQ      |L5.100|
00004e  2804              CMP      r0,#4                 ;594
000050  d07e              BEQ      |L5.336|
000052  2805              CMP      r0,#5                 ;594
000054  d1dc              BNE      |L5.16|
000056  48cd              LDR      r0,|L5.908|
000058  1c40              ADDS     r0,r0,#1              ;745
00005a  f7fffffe          BL       __aeabi_uread4
00005e  2800              CMP      r0,#0                 ;745
000060  d077              BEQ      |L5.338|
000062  e147              B        |L5.756|
                  |L5.100|
000064  48c9              LDR      r0,|L5.908|
000066  1c40              ADDS     r0,r0,#1              ;597
000068  f7fffffe          BL       __aeabi_uread4
00006c  49c7              LDR      r1,|L5.908|
00006e  1c40              ADDS     r0,r0,#1              ;597
000070  1c49              ADDS     r1,r1,#1              ;597
000072  f7fffffe          BL       __aeabi_uwrite4
000076  9001              STR      r0,[sp,#4]            ;599
000078  48c5              LDR      r0,|L5.912|
00007a  49c5              LDR      r1,|L5.912|
00007c  7900              LDRB     r0,[r0,#4]            ;599  ; subDome
00007e  784b              LDRB     r3,[r1,#1]            ;599
000080  9d03              LDR      r5,[sp,#0xc]          ;600
000082  1ac1              SUBS     r1,r0,r3              ;600
000084  424a              RSBS     r2,r1,#0              ;600
000086  021b              LSLS     r3,r3,#8              ;600
000088  4285              CMP      r5,r0                 ;599
00008a  9801              LDR      r0,[sp,#4]            ;599
00008c  9303              STR      r3,[sp,#0xc]          ;599
00008e  d20a              BCS      |L5.166|
000090  2900              CMP      r1,#0                 ;600
000092  da00              BGE      |L5.150|
000094  4611              MOV      r1,r2                 ;600
                  |L5.150|
000096  4348              MULS     r0,r1,r0              ;600
000098  0200              LSLS     r0,r0,#8              ;600
00009a  9900              LDR      r1,[sp,#0]            ;600
00009c  f7fffffe          BL       __aeabi_uidivmod
0000a0  9903              LDR      r1,[sp,#0xc]          ;600
0000a2  1841              ADDS     r1,r0,r1              ;600
0000a4  e009              B        |L5.186|
                  |L5.166|
0000a6  2900              CMP      r1,#0                 ;606
0000a8  da00              BGE      |L5.172|
0000aa  4611              MOV      r1,r2                 ;606
                  |L5.172|
0000ac  4348              MULS     r0,r1,r0              ;606
0000ae  0200              LSLS     r0,r0,#8              ;606
0000b0  9900              LDR      r1,[sp,#0]            ;606
0000b2  f7fffffe          BL       __aeabi_uidivmod
0000b6  9903              LDR      r1,[sp,#0xc]          ;606
0000b8  1a09              SUBS     r1,r1,r0              ;606
                  |L5.186|
0000ba  4db4              LDR      r5,|L5.908|
0000bc  4630              MOV      r0,r6                 ;606
0000be  4348              MULS     r0,r1,r0              ;610
0000c0  3d08              SUBS     r5,r5,#8              ;606
0000c2  2164              MOVS     r1,#0x64              ;610
0000c4  f7fffffe          BL       __aeabi_uidivmod
0000c8  6068              STR      r0,[r5,#4]            ;612  ; tmp
0000ca  4628              MOV      r0,r5                 ;612
0000cc  8880              LDRH     r0,[r0,#4]            ;612  ; tmp
0000ce  4629              MOV      r1,r5                 ;612
0000d0  b280              UXTH     r0,r0                 ;612
0000d2  310e              ADDS     r1,r1,#0xe            ;612
0000d4  8048              STRH     r0,[r1,#2]            ;612
0000d6  9003              STR      r0,[sp,#0xc]          ;614
0000d8  48ad              LDR      r0,|L5.912|
0000da  49ad              LDR      r1,|L5.912|
0000dc  7940              LDRB     r0,[r0,#5]            ;614  ; subDome
0000de  788d              LDRB     r5,[r1,#2]            ;614
0000e0  9b02              LDR      r3,[sp,#8]            ;614
0000e2  1b41              SUBS     r1,r0,r5              ;615
0000e4  424a              RSBS     r2,r1,#0              ;615
0000e6  022d              LSLS     r5,r5,#8              ;615
0000e8  4283              CMP      r3,r0                 ;614
0000ea  9801              LDR      r0,[sp,#4]            ;614
0000ec  d209              BCS      |L5.258|
0000ee  2900              CMP      r1,#0                 ;615
0000f0  da00              BGE      |L5.244|
0000f2  4611              MOV      r1,r2                 ;615
                  |L5.244|
0000f4  4348              MULS     r0,r1,r0              ;615
0000f6  0200              LSLS     r0,r0,#8              ;615
0000f8  9900              LDR      r1,[sp,#0]            ;615
0000fa  f7fffffe          BL       __aeabi_uidivmod
0000fe  1941              ADDS     r1,r0,r5              ;615
000100  e008              B        |L5.276|
                  |L5.258|
000102  2900              CMP      r1,#0                 ;622
000104  da00              BGE      |L5.264|
000106  4611              MOV      r1,r2                 ;622
                  |L5.264|
000108  4348              MULS     r0,r1,r0              ;622
00010a  0200              LSLS     r0,r0,#8              ;622
00010c  9900              LDR      r1,[sp,#0]            ;622
00010e  f7fffffe          BL       __aeabi_uidivmod
000112  1a29              SUBS     r1,r5,r0              ;622
                  |L5.276|
000114  4d9d              LDR      r5,|L5.908|
000116  4630              MOV      r0,r6                 ;622
000118  4348              MULS     r0,r1,r0              ;626
00011a  3d08              SUBS     r5,r5,#8              ;622
00011c  2164              MOVS     r1,#0x64              ;626
00011e  f7fffffe          BL       __aeabi_uidivmod
000122  6068              STR      r0,[r5,#4]            ;629  ; tmp
000124  4628              MOV      r0,r5                 ;629
000126  8880              LDRH     r0,[r0,#4]            ;629  ; tmp
000128  4629              MOV      r1,r5                 ;629
00012a  b280              UXTH     r0,r0                 ;629
00012c  310e              ADDS     r1,r1,#0xe            ;629
00012e  8088              STRH     r0,[r1,#4]            ;629
000130  4d97              LDR      r5,|L5.912|
000132  9002              STR      r0,[sp,#8]            ;631
000134  463b              MOV      r3,r7                 ;631
000136  4629              MOV      r1,r5                 ;590
000138  79a8              LDRB     r0,[r5,#6]            ;631  ; subDome
00013a  78cf              LDRB     r7,[r1,#3]            ;631
00013c  1bc1              SUBS     r1,r0,r7              ;632
00013e  424a              RSBS     r2,r1,#0              ;632
000140  023f              LSLS     r7,r7,#8              ;632
000142  4283              CMP      r3,r0                 ;631
000144  9801              LDR      r0,[sp,#4]            ;631
000146  d20c              BCS      |L5.354|
000148  2900              CMP      r1,#0                 ;632
00014a  da00              BGE      |L5.334|
00014c  4611              MOV      r1,r2                 ;632
                  |L5.334|
00014e  e001              B        |L5.340|
                  |L5.336|
000150  e039              B        |L5.454|
                  |L5.338|
000152  e0a6              B        |L5.674|
                  |L5.340|
000154  4348              MULS     r0,r1,r0              ;632
000156  0200              LSLS     r0,r0,#8              ;632
000158  9900              LDR      r1,[sp,#0]            ;632
00015a  f7fffffe          BL       __aeabi_uidivmod
00015e  19c1              ADDS     r1,r0,r7              ;632
000160  e008              B        |L5.372|
                  |L5.354|
000162  2900              CMP      r1,#0                 ;639
000164  da00              BGE      |L5.360|
000166  4611              MOV      r1,r2                 ;639
                  |L5.360|
000168  4348              MULS     r0,r1,r0              ;639
00016a  0200              LSLS     r0,r0,#8              ;639
00016c  9900              LDR      r1,[sp,#0]            ;639
00016e  f7fffffe          BL       __aeabi_uidivmod
000172  1a39              SUBS     r1,r7,r0              ;639
                  |L5.372|
000174  4f85              LDR      r7,|L5.908|
000176  4630              MOV      r0,r6                 ;639
000178  4348              MULS     r0,r1,r0              ;643
00017a  3f08              SUBS     r7,r7,#8              ;639
00017c  2164              MOVS     r1,#0x64              ;643
00017e  f7fffffe          BL       __aeabi_uidivmod
000182  6078              STR      r0,[r7,#4]            ;646  ; tmp
000184  4638              MOV      r0,r7                 ;646
000186  8880              LDRH     r0,[r0,#4]            ;646  ; tmp
000188  b282              UXTH     r2,r0                 ;646
00018a  4638              MOV      r0,r7                 ;646
00018c  300e              ADDS     r0,r0,#0xe            ;646
00018e  80c2              STRH     r2,[r0,#6]            ;646
000190  9902              LDR      r1,[sp,#8]            ;647
000192  9803              LDR      r0,[sp,#0xc]          ;647
000194  f7fffffe          BL       Light_RGB_set
000198  4e7c              LDR      r6,|L5.908|
00019a  1c70              ADDS     r0,r6,#1              ;650
00019c  f7fffffe          BL       __aeabi_uread4
0001a0  7a61              LDRB     r1,[r4,#9]            ;650  ; subDome
0001a2  7a22              LDRB     r2,[r4,#8]            ;650  ; subDome
0001a4  0209              LSLS     r1,r1,#8              ;650
0001a6  4311              ORRS     r1,r1,r2              ;650
0001a8  e0ed              B        |L5.902|
                  |L5.426|
0001aa  1c71              ADDS     r1,r6,#1              ;651
0001ac  2000              MOVS     r0,#0                 ;651
0001ae  f7fffffe          BL       __aeabi_uwrite4
0001b2  e067              B        |L5.644|
                  |L5.436|
0001b4  79e8              LDRB     r0,[r5,#7]            ;683  ; subDome
0001b6  2800              CMP      r0,#0                 ;683
0001b8  d000              BEQ      |L5.444|
0001ba  e729              B        |L5.16|
                  |L5.444|
0001bc  7828              LDRB     r0,[r5,#0]            ;690  ; subDome
0001be  0900              LSRS     r0,r0,#4              ;690
0001c0  f7fffffe          BL       app_dome_subDome_pro
0001c4  e724              B        |L5.16|
                  |L5.454|
0001c6  4871              LDR      r0,|L5.908|
0001c8  7800              LDRB     r0,[r0,#0]            ;698  ; subDome_Assist
0001ca  2800              CMP      r0,#0                 ;698
0001cc  486f              LDR      r0,|L5.908|
0001ce  d05f              BEQ      |L5.656|
0001d0  1c40              ADDS     r0,r0,#1              ;698
0001d2  f7fffffe          BL       __aeabi_uread4
0001d6  2800              CMP      r0,#0                 ;701
0001d8  d004              BEQ      |L5.484|
0001da  496c              LDR      r1,|L5.908|
0001dc  1e40              SUBS     r0,r0,#1              ;702
                  |L5.478|
0001de  1c49              ADDS     r1,r1,#1              ;702
0001e0  f7fffffe          BL       __aeabi_uwrite4
                  |L5.484|
0001e4  4869              LDR      r0,|L5.908|
0001e6  1c40              ADDS     r0,r0,#1              ;706
0001e8  f7fffffe          BL       __aeabi_uread4
0001ec  9903              LDR      r1,[sp,#0xc]          ;706
0001ee  9001              STR      r0,[sp,#4]            ;706
0001f0  4348              MULS     r0,r1,r0              ;706
0001f2  0201              LSLS     r1,r0,#8              ;706
0001f4  1a08              SUBS     r0,r1,r0              ;706
0001f6  9900              LDR      r1,[sp,#0]            ;706
0001f8  f7fffffe          BL       __aeabi_uidivmod
0001fc  4601              MOV      r1,r0                 ;706
0001fe  4630              MOV      r0,r6                 ;706
000200  4348              MULS     r0,r1,r0              ;707
000202  2164              MOVS     r1,#0x64              ;707
000204  f7fffffe          BL       __aeabi_uidivmod
000208  4960              LDR      r1,|L5.908|
00020a  b280              UXTH     r0,r0                 ;708
00020c  1d89              ADDS     r1,r1,#6              ;708
00020e  9003              STR      r0,[sp,#0xc]          ;708
000210  8048              STRH     r0,[r1,#2]            ;708
000212  9902              LDR      r1,[sp,#8]            ;710
000214  9801              LDR      r0,[sp,#4]            ;710
000216  4348              MULS     r0,r1,r0              ;710
000218  0201              LSLS     r1,r0,#8              ;710
00021a  1a08              SUBS     r0,r1,r0              ;710
00021c  9900              LDR      r1,[sp,#0]            ;710
00021e  f7fffffe          BL       __aeabi_uidivmod
000222  4370              MULS     r0,r6,r0              ;711
000224  2164              MOVS     r1,#0x64              ;711
000226  f7fffffe          BL       __aeabi_uidivmod
00022a  4958              LDR      r1,|L5.908|
00022c  b280              UXTH     r0,r0                 ;712
00022e  1d89              ADDS     r1,r1,#6              ;712
000230  9002              STR      r0,[sp,#8]            ;712
000232  8088              STRH     r0,[r1,#4]            ;712
000234  9801              LDR      r0,[sp,#4]            ;714
000236  4378              MULS     r0,r7,r0              ;714
000238  0201              LSLS     r1,r0,#8              ;714
00023a  1a08              SUBS     r0,r1,r0              ;714
00023c  9900              LDR      r1,[sp,#0]            ;714
00023e  f7fffffe          BL       __aeabi_uidivmod
000242  4370              MULS     r0,r6,r0              ;715
000244  2164              MOVS     r1,#0x64              ;715
000246  f7fffffe          BL       __aeabi_uidivmod
00024a  4950              LDR      r1,|L5.908|
00024c  b282              UXTH     r2,r0                 ;716
00024e  3908              SUBS     r1,r1,#8              ;715
000250  6048              STR      r0,[r1,#4]            ;716  ; tmp
000252  4608              MOV      r0,r1                 ;716
000254  300e              ADDS     r0,r0,#0xe            ;716
000256  80c2              STRH     r2,[r0,#6]            ;716
000258  9902              LDR      r1,[sp,#8]            ;717
00025a  9803              LDR      r0,[sp,#0xc]          ;717
00025c  f7fffffe          BL       Light_RGB_set
000260  484a              LDR      r0,|L5.908|
000262  1c40              ADDS     r0,r0,#1              ;720
000264  f7fffffe          BL       __aeabi_uread4
000268  7a61              LDRB     r1,[r4,#9]            ;720  ; subDome
00026a  7a22              LDRB     r2,[r4,#8]            ;720  ; subDome
00026c  0209              LSLS     r1,r1,#8              ;720
00026e  4311              ORRS     r1,r1,r2              ;720
000270  4288              CMP      r0,r1                 ;720
000272  d201              BCS      |L5.632|
000274  2800              CMP      r0,#0                 ;721
000276  d19d              BNE      |L5.436|
                  |L5.632|
000278  4844              LDR      r0,|L5.908|
00027a  7801              LDRB     r1,[r0,#0]            ;722  ; subDome_Assist
00027c  2900              CMP      r1,#0                 ;722
00027e  d00d              BEQ      |L5.668|
000280  2100              MOVS     r1,#0                 ;725
000282  7001              STRB     r1,[r0,#0]            ;725
                  |L5.644|
000284  79e8              LDRB     r0,[r5,#7]            ;775  ; subDome
000286  2800              CMP      r0,#0                 ;775
000288  d098              BEQ      |L5.444|
00028a  1e40              SUBS     r0,r0,#1              ;775
00028c  71e8              STRB     r0,[r5,#7]            ;776
00028e  e791              B        |L5.436|
                  |L5.656|
000290  1c40              ADDS     r0,r0,#1              ;776
000292  f7fffffe          BL       __aeabi_uread4
000296  493d              LDR      r1,|L5.908|
000298  1c40              ADDS     r0,r0,#1              ;699
00029a  e7a0              B        |L5.478|
                  |L5.668|
00029c  2101              MOVS     r1,#1                 ;723
00029e  7001              STRB     r1,[r0,#0]            ;723
                  |L5.672|
0002a0  e788              B        |L5.436|
                  |L5.674|
0002a2  9803              LDR      r0,[sp,#0xc]          ;746
0002a4  4370              MULS     r0,r6,r0              ;746
0002a6  0201              LSLS     r1,r0,#8              ;746
0002a8  1a08              SUBS     r0,r1,r0              ;746
0002aa  2164              MOVS     r1,#0x64              ;746
0002ac  f7fffffe          BL       __aeabi_uidivmod
0002b0  4936              LDR      r1,|L5.908|
0002b2  b280              UXTH     r0,r0                 ;747
0002b4  1d89              ADDS     r1,r1,#6              ;747
0002b6  9001              STR      r0,[sp,#4]            ;747
0002b8  8048              STRH     r0,[r1,#2]            ;747
0002ba  9802              LDR      r0,[sp,#8]            ;749
0002bc  4370              MULS     r0,r6,r0              ;749
0002be  0201              LSLS     r1,r0,#8              ;749
0002c0  1a08              SUBS     r0,r1,r0              ;749
0002c2  2164              MOVS     r1,#0x64              ;749
0002c4  f7fffffe          BL       __aeabi_uidivmod
0002c8  4930              LDR      r1,|L5.908|
0002ca  b280              UXTH     r0,r0                 ;750
0002cc  1d89              ADDS     r1,r1,#6              ;750
0002ce  9000              STR      r0,[sp,#0]            ;750
0002d0  8088              STRH     r0,[r1,#4]            ;750
0002d2  4377              MULS     r7,r6,r7              ;752
0002d4  0238              LSLS     r0,r7,#8              ;752
0002d6  1bc0              SUBS     r0,r0,r7              ;752
0002d8  2164              MOVS     r1,#0x64              ;752
0002da  f7fffffe          BL       __aeabi_uidivmod
0002de  492b              LDR      r1,|L5.908|
0002e0  b282              UXTH     r2,r0                 ;753
0002e2  3908              SUBS     r1,r1,#8              ;752
0002e4  6048              STR      r0,[r1,#4]            ;753  ; tmp
0002e6  4608              MOV      r0,r1                 ;753
0002e8  300e              ADDS     r0,r0,#0xe            ;753
0002ea  80c2              STRH     r2,[r0,#6]            ;753
0002ec  9900              LDR      r1,[sp,#0]            ;754
0002ee  9801              LDR      r0,[sp,#4]            ;754
0002f0  f7fffffe          BL       Light_RGB_set
                  |L5.756|
0002f4  7a60              LDRB     r0,[r4,#9]            ;757  ; subDome
0002f6  4f25              LDR      r7,|L5.908|
0002f8  0206              LSLS     r6,r0,#8              ;757
0002fa  7a21              LDRB     r1,[r4,#8]            ;757  ; subDome
0002fc  3f08              SUBS     r7,r7,#8              ;757
0002fe  430e              ORRS     r6,r6,r1              ;757
000300  4638              MOV      r0,r7                 ;758
000302  3009              ADDS     r0,r0,#9              ;758
000304  607e              STR      r6,[r7,#4]            ;758  ; tmp
000306  f7fffffe          BL       __aeabi_uread4
00030a  42b0              CMP      r0,r6                 ;758
00030c  d128              BNE      |L5.864|
00030e  7928              LDRB     r0,[r5,#4]            ;759  ; subDome
000310  7a2e              LDRB     r6,[r5,#8]            ;759  ; subDome
000312  4370              MULS     r0,r6,r0              ;759
000314  0201              LSLS     r1,r0,#8              ;759
000316  1a08              SUBS     r0,r1,r0              ;759
000318  2164              MOVS     r1,#0x64              ;759
00031a  f7fffffe          BL       __aeabi_uidivmod
00031e  b280              UXTH     r0,r0                 ;760
000320  4639              MOV      r1,r7                 ;760
000322  310e              ADDS     r1,r1,#0xe            ;760
000324  9001              STR      r0,[sp,#4]            ;760
000326  8048              STRH     r0,[r1,#2]            ;760
000328  7968              LDRB     r0,[r5,#5]            ;762  ; subDome
00032a  4370              MULS     r0,r6,r0              ;762
00032c  0201              LSLS     r1,r0,#8              ;762
00032e  1a08              SUBS     r0,r1,r0              ;762
000330  2164              MOVS     r1,#0x64              ;762
000332  f7fffffe          BL       __aeabi_uidivmod
000336  b280              UXTH     r0,r0                 ;763
000338  4639              MOV      r1,r7                 ;763
00033a  310e              ADDS     r1,r1,#0xe            ;763
00033c  9000              STR      r0,[sp,#0]            ;763
00033e  8088              STRH     r0,[r1,#4]            ;763
000340  79a8              LDRB     r0,[r5,#6]            ;765  ; subDome
000342  4370              MULS     r0,r6,r0              ;765
000344  0201              LSLS     r1,r0,#8              ;765
000346  1a08              SUBS     r0,r1,r0              ;765
000348  2164              MOVS     r1,#0x64              ;765
00034a  f7fffffe          BL       __aeabi_uidivmod
00034e  b282              UXTH     r2,r0                 ;766
000350  6078              STR      r0,[r7,#4]            ;766  ; tmp
000352  4638              MOV      r0,r7                 ;766
000354  300e              ADDS     r0,r0,#0xe            ;766
000356  80c2              STRH     r2,[r0,#6]            ;766
000358  9900              LDR      r1,[sp,#0]            ;767
00035a  9801              LDR      r0,[sp,#4]            ;767
00035c  f7fffffe          BL       Light_RGB_set
                  |L5.864|
000360  4e0a              LDR      r6,|L5.908|
000362  1c70              ADDS     r0,r6,#1              ;770
000364  f7fffffe          BL       __aeabi_uread4
000368  1c71              ADDS     r1,r6,#1              ;770
00036a  1c40              ADDS     r0,r0,#1              ;770
00036c  f7fffffe          BL       __aeabi_uwrite4
000370  7a61              LDRB     r1,[r4,#9]            ;772  ; subDome
000372  7a23              LDRB     r3,[r4,#8]            ;772  ; subDome
000374  020a              LSLS     r2,r1,#8              ;772
000376  9904              LDR      r1,[sp,#0x10]         ;772
000378  431a              ORRS     r2,r2,r3              ;772
00037a  7a4b              LDRB     r3,[r1,#9]            ;772  ; subDome
00037c  7a0c              LDRB     r4,[r1,#8]            ;772  ; subDome
00037e  0219              LSLS     r1,r3,#8              ;772
000380  4321              ORRS     r1,r1,r4              ;772
000382  1851              ADDS     r1,r2,r1              ;772
000384  6079              STR      r1,[r7,#4]            ;772  ; tmp
                  |L5.902|
000386  4288              CMP      r0,r1                 ;773
000388  d38a              BCC      |L5.672|
00038a  e70e              B        |L5.426|
                          ENDP

                  |L5.908|
                          DCD      ||.data||+0x8
                  |L5.912|
                          DCD      ||.bss||

                          AREA ||i.app_dome_next||, CODE, READONLY, ALIGN=2

                  app_dome_next PROC
;;;419    }
;;;420    void app_dome_next(void) {
000000  b510              PUSH     {r4,lr}
;;;421    	domePro.currentDomeIndex++;
000002  4907              LDR      r1,|L6.32|
000004  7808              LDRB     r0,[r1,#0]  ; domePro
000006  1c40              ADDS     r0,r0,#1
000008  b2c0              UXTB     r0,r0
00000a  7008              STRB     r0,[r1,#0]
;;;422    	if (domePro.currentDomeIndex
00000c  282c              CMP      r0,#0x2c
00000e  d301              BCC      |L6.20|
;;;423    			>= ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T))) {
;;;424    		domePro.currentDomeIndex = 0;
000010  2000              MOVS     r0,#0
000012  7008              STRB     r0,[r1,#0]
                  |L6.20|
;;;425    	}
;;;426    
;;;427    	app_dome_start(domePro.currentDomeIndex, 1);
000014  b2c0              UXTB     r0,r0
000016  2101              MOVS     r1,#1
000018  f7fffffe          BL       app_dome_start
;;;428    }
00001c  bd10              POP      {r4,pc}
;;;429    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      ||.data||+0x1

                          AREA ||i.app_dome_previous||, CODE, READONLY, ALIGN=2

                  app_dome_previous PROC
;;;410    
;;;411    void app_dome_previous(void) {
000000  b510              PUSH     {r4,lr}
;;;412    	if (domePro.currentDomeIndex) {
000002  4906              LDR      r1,|L7.28|
000004  7808              LDRB     r0,[r1,#0]  ; domePro
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L7.14|
00000a  1e40              SUBS     r0,r0,#1              ;411
;;;413    		domePro.currentDomeIndex--;
00000c  e000              B        |L7.16|
                  |L7.14|
;;;414    	} else {
;;;415    		domePro.currentDomeIndex = (FMC_APROM_END - DOME_START_ADDR)
00000e  202b              MOVS     r0,#0x2b
                  |L7.16|
000010  7008              STRB     r0,[r1,#0]
;;;416    				/ sizeof(DOME_DEFAULT_T) - 1;
;;;417    	}
;;;418    	app_dome_start(domePro.currentDomeIndex, 2);
000012  b2c0              UXTB     r0,r0
000014  2102              MOVS     r1,#2
000016  f7fffffe          BL       app_dome_start
;;;419    }
00001a  bd10              POP      {r4,pc}
;;;420    void app_dome_next(void) {
                          ENDP

                  |L7.28|
                          DCD      ||.data||+0x1

                          AREA ||i.app_dome_rgb||, CODE, READONLY, ALIGN=2

                  app_dome_rgb PROC
;;;560    
;;;561    void app_dome_rgb(uint8_t r, uint8_t g, uint8_t b) {
000000  b570              PUSH     {r4-r6,lr}
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;562    	app_dome_stop_current();
000008  f7fffffe          BL       app_dome_stop_current
;;;563    	dome_running_param.color.R = r << 8;
00000c  4b04              LDR      r3,|L8.32|
00000e  0230              LSLS     r0,r6,#8
000010  8058              STRH     r0,[r3,#2]
;;;564    	dome_running_param.color.G = g << 8;
000012  0229              LSLS     r1,r5,#8
000014  8099              STRH     r1,[r3,#4]
;;;565    	dome_running_param.color.B = b << 8;
000016  0222              LSLS     r2,r4,#8
000018  80da              STRH     r2,[r3,#6]
;;;566    #if 1
;;;567    	Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
00001a  f7fffffe          BL       Light_RGB_set
;;;568    			dome_running_param.color.B);
;;;569    #else
;;;570    	Light_RGB_set(0xFFFF, 0xFFFF, 0xFFFF);
;;;571    #endif
;;;572    }
00001e  bd70              POP      {r4-r6,pc}
;;;573    
                          ENDP

                  |L8.32|
                          DCD      ||.data||+0xe

                          AREA ||i.app_dome_single_cycle||, CODE, READONLY, ALIGN=2

                  app_dome_single_cycle PROC
;;;449    }
;;;450    void app_dome_single_cycle(uint8_t subIndex) {
000000  b510              PUSH     {r4,lr}
;;;451    	if ((dome_blink.header.repeat_number & 0x0F) == (subIndex + 1)) {
000002  490d              LDR      r1,|L9.56|
000004  7a4a              LDRB     r2,[r1,#9]  ; dome_blink
000006  0713              LSLS     r3,r2,#28
000008  0f1b              LSRS     r3,r3,#28
00000a  1c42              ADDS     r2,r0,#1
00000c  4293              CMP      r3,r2
00000e  d104              BNE      |L9.26|
;;;452    		subIndex = 0;
;;;453    		memcpy((uint8_t*) &subDome, (uint8_t*) &dome_blink.subdome[subIndex],
000010  4608              MOV      r0,r1
000012  220d              MOVS     r2,#0xd
000014  3817              SUBS     r0,r0,#0x17
000016  310a              ADDS     r1,r1,#0xa
000018  e005              B        |L9.38|
                  |L9.26|
;;;454    				sizeof(subDome));
;;;455    	} else {
;;;456    		memcpy((uint8_t*) &subDome,
00001a  220d              MOVS     r2,#0xd
00001c  4350              MULS     r0,r2,r0
00001e  1841              ADDS     r1,r0,r1
000020  4805              LDR      r0,|L9.56|
000022  3117              ADDS     r1,r1,#0x17
000024  3817              SUBS     r0,r0,#0x17
                  |L9.38|
000026  f7fffffe          BL       __aeabi_memcpy
;;;457    				(uint8_t*) &dome_blink.subdome[subIndex + 1], sizeof(subDome));
;;;458    	}
;;;459    	memcpy((uint8_t*) &domeHeader, (uint8_t*) &dome_blink.header,
00002a  4903              LDR      r1,|L9.56|
00002c  220a              MOVS     r2,#0xa
00002e  1a88              SUBS     r0,r1,r2
000030  f7fffffe          BL       __aeabi_memcpy
;;;460    			sizeof(domeHeader));
;;;461    }
000034  bd10              POP      {r4,pc}
;;;462    
                          ENDP

000036  0000              DCW      0x0000
                  |L9.56|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_start||, CODE, READONLY, ALIGN=2

                  app_dome_start PROC
;;;465     */
;;;466    void app_dome_start(uint8_t domeIndex, uint8_t dir) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;467    	subDome_Assist.switch_flag = 0;
000002  4e25              LDR      r6,|L10.152|
000004  2700              MOVS     r7,#0
000006  460d              MOV      r5,r1                 ;466
000008  4604              MOV      r4,r0                 ;466
00000a  7037              STRB     r7,[r6,#0]
;;;468    	subDome_Assist.msCnt = 0;
00000c  1c71              ADDS     r1,r6,#1
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       __aeabi_uwrite4
;;;469    	subDome_Assist.stopTime = 0;
;;;470    
;;;471    //	app_dome_single_cycle(domeIndex);
;;;472    	if (domeIndex
;;;473    			> ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T) - 1)) {
;;;474    		domePro.currentDomeIndex = (FMC_APROM_END - DOME_START_ADDR)
000014  1ff0              SUBS     r0,r6,#7
000016  7177              STRB     r7,[r6,#5]            ;469
000018  2c2b              CMP      r4,#0x2b              ;472
00001a  d903              BLS      |L10.36|
00001c  212b              MOVS     r1,#0x2b
00001e  7001              STRB     r1,[r0,#0]
;;;475    				/ sizeof(DOME_DEFAULT_T) - 1;
;;;476    		domeIndex = (FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T)
000020  460c              MOV      r4,r1
000022  e000              B        |L10.38|
                  |L10.36|
;;;477    				- 1;
;;;478    	} else {
;;;479    		domePro.currentDomeIndex = domeIndex;
000024  7004              STRB     r4,[r0,#0]
                  |L10.38|
;;;480    	}
;;;481    	if (dir == 0) {
;;;482    //		app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;483    		if (*((uint8_t *) &dome_blink) == 0xFF) {
000026  481d              LDR      r0,|L10.156|
000028  2d00              CMP      r5,#0                 ;481
00002a  7802              LDRB     r2,[r0,#0]
00002c  d004              BEQ      |L10.56|
;;;484    			Light_RGB_set(0, 0, 0);
;;;485    		}
;;;486    	} else if (dir == 1) {
00002e  2d01              CMP      r5,#1
000030  d005              BEQ      |L10.62|
;;;487    		uint8_t i = 0;
;;;488    		for (i = 0;
;;;489    				i < ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T));
;;;490    				i++) {
;;;491    //			app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;492    			if (*((uint8_t *) &dome_blink) == 0xFF) {
;;;493    				if (domeIndex == 0) {
;;;494    					Light_RGB_set(0, 0, 0);
;;;495    					break;
;;;496    				}
;;;497    				domeIndex++;
;;;498    				if (domeIndex
;;;499    						>= ((FMC_APROM_END - DOME_START_ADDR)
;;;500    								/ sizeof(DOME_DEFAULT_T))) {
;;;501    					domeIndex = 0;
;;;502    //					break;
;;;503    				}
;;;504    			} else {
;;;505    				break;
;;;506    			}
;;;507    		}
;;;508    	} else if (dir == 2) {
000032  2d02              CMP      r5,#2
000034  d012              BEQ      |L10.92|
000036  e022              B        |L10.126|
                  |L10.56|
000038  2aff              CMP      r2,#0xff              ;483
00003a  d01b              BEQ      |L10.116|
00003c  e01f              B        |L10.126|
                  |L10.62|
00003e  2000              MOVS     r0,#0                 ;487
                  |L10.64|
000040  2aff              CMP      r2,#0xff              ;492
000042  d11c              BNE      |L10.126|
000044  2c00              CMP      r4,#0                 ;493
000046  d015              BEQ      |L10.116|
000048  1c64              ADDS     r4,r4,#1              ;493
00004a  b2e4              UXTB     r4,r4                 ;497
00004c  2c2c              CMP      r4,#0x2c              ;498
00004e  d300              BCC      |L10.82|
000050  2400              MOVS     r4,#0                 ;501
                  |L10.82|
000052  1c40              ADDS     r0,r0,#1              ;501
000054  b2c0              UXTB     r0,r0                 ;490
000056  282c              CMP      r0,#0x2c              ;489
000058  d3f2              BCC      |L10.64|
00005a  e010              B        |L10.126|
                  |L10.92|
;;;509    		uint8_t i = 0;
00005c  2000              MOVS     r0,#0
                  |L10.94|
;;;510    		for (i = 0;
;;;511    				i < ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T));
;;;512    				i++) {
;;;513    //			app_eeprom_get_dome_with_index(&dome_blink, domeIndex);
;;;514    			if (*((uint8_t *) &dome_blink) == 0xFF) {
00005e  2aff              CMP      r2,#0xff
000060  d10d              BNE      |L10.126|
;;;515    				if (domeIndex) {
000062  2c00              CMP      r4,#0
000064  d006              BEQ      |L10.116|
000066  1e64              SUBS     r4,r4,#1
;;;516    					domeIndex--;
000068  1c40              ADDS     r0,r0,#1
00006a  b2c0              UXTB     r0,r0                 ;512
00006c  b2e4              UXTB     r4,r4
00006e  282c              CMP      r0,#0x2c              ;511
000070  d3f5              BCC      |L10.94|
000072  e004              B        |L10.126|
                  |L10.116|
;;;517    				} else {
;;;518    					Light_RGB_set(0, 0, 0);
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4610              MOV      r0,r2
00007a  f7fffffe          BL       Light_RGB_set
                  |L10.126|
;;;519    					break;
;;;520    				}
;;;521    			} else {
;;;522    				break;
;;;523    			}
;;;524    		}
;;;525    	}
;;;526    //	domePro.currentDomeIndex = domeIndex;
;;;527    //	if (dome_blink.header.index == 0) {
;;;528    //		app_eeprom_get_dome_with_index(&dome_blink, 0);
;;;529    //		app_dome_stop_current();
;;;530    //	}
;;;531    
;;;532    	memcpy((uint8_t*) &subDome, (uint8_t*) &dome_blink.subdome[0],
00007e  4907              LDR      r1,|L10.156|
000080  220d              MOVS     r2,#0xd
000082  310a              ADDS     r1,r1,#0xa
000084  4608              MOV      r0,r1
000086  3821              SUBS     r0,r0,#0x21
000088  f7fffffe          BL       __aeabi_memcpy
;;;533    			sizeof(subDome));
;;;534    
;;;535    	memcpy((uint8_t*) &domeHeader, (uint8_t*) &dome_blink.header,
00008c  4903              LDR      r1,|L10.156|
00008e  220a              MOVS     r2,#0xa
000090  1a88              SUBS     r0,r1,r2
000092  f7fffffe          BL       __aeabi_memcpy
;;;536    			sizeof(domeHeader));
;;;537    
;;;538    }
000096  bdf8              POP      {r3-r7,pc}
;;;539    static uint8_t cyc = 0;
                          ENDP

                  |L10.152|
                          DCD      ||.data||+0x8
                  |L10.156|
                          DCD      ||.bss||+0x17

                          AREA ||i.app_dome_start_current||, CODE, READONLY, ALIGN=2

                  app_dome_start_current PROC
;;;436    }
;;;437    void app_dome_start_current(void) {
000000  b510              PUSH     {r4,lr}
;;;438    	color_blink_index = COLOR_BLINK_NUMBER - 1;
000002  4904              LDR      r1,|L11.20|
000004  2009              MOVS     r0,#9
000006  7008              STRB     r0,[r1,#0]
;;;439    
;;;440    //	g_tWork.status.bits.blinkEnable = 1;
;;;441    	app_dome_start(domePro.currentDomeIndex, 0);
000008  1c48              ADDS     r0,r1,#1
00000a  7800              LDRB     r0,[r0,#0]  ; domePro
00000c  2100              MOVS     r1,#0
00000e  f7fffffe          BL       app_dome_start
;;;442    }
000012  bd10              POP      {r4,pc}
;;;443    void app_dome_stop_current(void) {
                          ENDP

                  |L11.20|
                          DCD      ||.data||

                          AREA ||i.app_dome_stop_current||, CODE, READONLY, ALIGN=2

                  app_dome_stop_current PROC
;;;442    }
;;;443    void app_dome_stop_current(void) {
000000  b510              PUSH     {r4,lr}
;;;444    //	g_tWork.status.bits.blinkEnable = 0;
;;;445    
;;;446    	subDome.repeate = 0;
000002  2000              MOVS     r0,#0
000004  4904              LDR      r1,|L12.24|
;;;447    	subDome.offtime = 0;
;;;448    	Light_RGB_set(0, 0, 0);
000006  4602              MOV      r2,r0
000008  71c8              STRB     r0,[r1,#7]            ;446
00000a  72c8              STRB     r0,[r1,#0xb]          ;447
00000c  7308              STRB     r0,[r1,#0xc]          ;447
00000e  4601              MOV      r1,r0
000010  f7fffffe          BL       Light_RGB_set
;;;449    }
000014  bd10              POP      {r4,pc}
;;;450    void app_dome_single_cycle(uint8_t subIndex) {
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      ||.bss||

                          AREA ||i.app_dome_subDome_pro||, CODE, READONLY, ALIGN=2

                  app_dome_subDome_pro PROC
;;;539    static uint8_t cyc = 0;
;;;540    static void app_dome_subDome_pro(uint8_t subIndex) {
000000  b510              PUSH     {r4,lr}
;;;541    
;;;542    	subDome_Assist.switch_flag = 0;
000002  4c04              LDR      r4,|L13.20|
000004  2000              MOVS     r0,#0
000006  7020              STRB     r0,[r4,#0]
;;;543    	subDome_Assist.msCnt = 0;
000008  1c61              ADDS     r1,r4,#1
00000a  f7fffffe          BL       __aeabi_uwrite4
;;;544    	subDome_Assist.stopTime = 50;
00000e  2032              MOVS     r0,#0x32
000010  7160              STRB     r0,[r4,#5]
;;;545    #if 0
;;;546    	if (g_tWork.status.bits.DEMO) {
;;;547    		cyc++;
;;;548    		if (cyc <= 4) {
;;;549    			app_dome_single_cycle(subIndex);
;;;550    		} else {
;;;551    			cyc = 0;
;;;552    			app_dome_next();
;;;553    		}
;;;554    	} else {
;;;555    		cyc = 0;
;;;556    		app_dome_single_cycle(subIndex);
;;;557    	}
;;;558    #endif
;;;559    }
000012  bd10              POP      {r4,pc}
;;;560    
                          ENDP

                  |L13.20|
                          DCD      ||.data||+0x8

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  subDome
                          %        13
                  domeHeader
                          %        10
                  dome_blink
                          %        114

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  color_blink_buffer
000000  ffffff00          DCB      0xff,0xff,0xff,0x00
000004  ff000000          DCB      0xff,0x00,0x00,0x00
000008  ffff0000          DCB      0xff,0xff,0x00,0x00
00000c  00ffffff          DCB      0x00,0xff,0xff,0xff
000010  00ffffff          DCB      0x00,0xff,0xff,0xff
000014  0000ff80          DCB      0x00,0x00,0xff,0x80
000018  0080ffff          DCB      0x00,0x80,0xff,0xff
00001c  8000              DCB      0x80,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  color_blink_index
000000  00                DCB      0x00
                  domePro
000001  000000            DCB      0x00,0x00,0x00
                  tmp
                          DCD      0x00000000
                  subDome_Assist
                          DCD      0x00000000
00000c  0000              DCB      0x00,0x00
                  dome_running_param
00000e  0000              DCB      0x00,0x00
                          DCD      0x00000000
000014  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_dome.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_dome_c_8d6f043f____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_dome_c_8d6f043f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_dome_c_8d6f043f____REVSH|
#line 402
|__asm___10_app_dome_c_8d6f043f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
