; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_eeprom.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_eeprom.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\app_eeprom.crf ..\App\src\app_eeprom.c]
                          THUMB

                          AREA ||i.app_eeprom_Init||, CODE, READONLY, ALIGN=1

                  app_eeprom_Init PROC
;;;9      
;;;10     void app_eeprom_Init(void) {
000000  4770              BX       lr
;;;11     
;;;12     }
;;;13     
                          ENDP


                          AREA ||i.app_eeprom_erase||, CODE, READONLY, ALIGN=1

                  app_eeprom_erase PROC
;;;51     
;;;52     void app_eeprom_erase(uint32_t addr) {
000000  211b              MOVS     r1,#0x1b
000002  b510              PUSH     {r4,lr}
;;;53     	bsp_eeprom_erase(DOME_START_ADDR + addr);
000004  0289              LSLS     r1,r1,#10
000006  1840              ADDS     r0,r0,r1
000008  f7fffffe          BL       bsp_eeprom_erase
;;;54     }
00000c  bd10              POP      {r4,pc}
;;;55     void app_eeprom_write_int(uint32_t addr, uint32_t d) {
                          ENDP


                          AREA ||i.app_eeprom_get_dome_with_index||, CODE, READONLY, ALIGN=2

                  app_eeprom_get_dome_with_index PROC
;;;13     
;;;14     void app_eeprom_get_dome_with_index(DOME_DEFAULT_T *dd, uint8_t index) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;15     	uint8_t availableGroup = 0;
;;;16     	uint8_t minSpaceBytes = 0;
;;;17     	uint16_t i = 0;
;;;18     	uint8_t *pt;
;;;19     	if (sizeof(DOME_DEFAULT_T) % 4) {
;;;20     		minSpaceBytes = (sizeof(DOME_DEFAULT_T) / 4) * 4 + 4;
000002  2474              MOVS     r4,#0x74
000004  460f              MOV      r7,r1                 ;14
000006  4606              MOV      r6,r0                 ;14
;;;21     	} else {
;;;22     		minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;23     	}
;;;24     	availableGroup = (FMC_APROM_END - DOME_START_ADDR) / minSpaceBytes;
;;;25     
;;;26     	if (index >= availableGroup) {
000008  292c              CMP      r1,#0x2c
00000a  d300              BCC      |L3.14|
;;;27     		index = 0;
00000c  2700              MOVS     r7,#0
                  |L3.14|
00000e  2159              MOVS     r1,#0x59
000010  2216              MOVS     r2,#0x16
000012  2388              MOVS     r3,#0x88
                  |L3.20|
000014  481a              LDR      r0,|L3.128|
000016  6001              STR      r1,[r0,#0]
000018  6002              STR      r2,[r0,#0]
00001a  6003              STR      r3,[r0,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  2800              CMP      r0,#0
000020  d0f8              BEQ      |L3.20|
;;;28     	}
;;;29     	
;;;30     pt	 = (uint8_t *) dd;
;;;31     	SYS_UnlockReg();
;;;32     	FMC_Open();
000022  f7fffffe          BL       FMC_Open
;;;33     	for (i = 0; i < (sizeof(DOME_DEFAULT_T) / 4); i++) {
000026  2500              MOVS     r5,#0
;;;34     		uint8_t j = 0;
;;;35     		uint32_t dt = app_eeprom_read_int(index * minSpaceBytes + i * 4);
000028  4367              MULS     r7,r4,r7
                  |L3.42|
00002a  00a8              LSLS     r0,r5,#2
00002c  9000              STR      r0,[sp,#0]
00002e  2400              MOVS     r4,#0                 ;34
000030  1838              ADDS     r0,r7,r0
000032  f7fffffe          BL       app_eeprom_read_int
000036  4603              MOV      r3,r0
;;;36     		for (j = 0; j < 4; j++) {
;;;37     			*(pt + i * 4 + j) = (dt >> (j * 8)) & 0xFF;
000038  9800              LDR      r0,[sp,#0]
00003a  1982              ADDS     r2,r0,r6
                  |L3.60|
00003c  00e1              LSLS     r1,r4,#3
00003e  4618              MOV      r0,r3
000040  40c8              LSRS     r0,r0,r1
000042  5510              STRB     r0,[r2,r4]
000044  1c64              ADDS     r4,r4,#1
000046  b2e4              UXTB     r4,r4                 ;36
000048  2c04              CMP      r4,#4                 ;36
00004a  d3f7              BCC      |L3.60|
00004c  1c6d              ADDS     r5,r5,#1              ;36
00004e  b2ad              UXTH     r5,r5                 ;33
000050  2d1c              CMP      r5,#0x1c              ;33
000052  d3ea              BCC      |L3.42|
;;;38     		}
;;;39     	}
;;;40     	if (sizeof(DOME_DEFAULT_T) % 4) {
;;;41     		uint32_t dt = app_eeprom_read_int(
000054  4638              MOV      r0,r7
000056  3070              ADDS     r0,r0,#0x70
000058  f7fffffe          BL       app_eeprom_read_int
00005c  4602              MOV      r2,r0
;;;42     				index * minSpaceBytes + (sizeof(DOME_DEFAULT_T) / 4) * 4);
;;;43     		for (i = 0; i < (sizeof(DOME_DEFAULT_T) % 4); i++) {
00005e  2000              MOVS     r0,#0
                  |L3.96|
;;;44     			*(pt + (sizeof(DOME_DEFAULT_T) / 4) * 4 + i) = (dt >> (i * 8))
000060  00c3              LSLS     r3,r0,#3
000062  4611              MOV      r1,r2
000064  40d9              LSRS     r1,r1,r3
000066  1833              ADDS     r3,r6,r0
000068  3360              ADDS     r3,r3,#0x60
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0                 ;43
00006e  7419              STRB     r1,[r3,#0x10]
000070  2802              CMP      r0,#2                 ;43
000072  d3f5              BCC      |L3.96|
;;;45     					& 0xFF;
;;;46     		}
;;;47     	}
;;;48     	FMC_Close();
000074  f7fffffe          BL       FMC_Close
000078  4801              LDR      r0,|L3.128|
00007a  2100              MOVS     r1,#0
00007c  6001              STR      r1,[r0,#0]
;;;49     	SYS_LockReg();
;;;50     }
00007e  bdf8              POP      {r3-r7,pc}
;;;51     
                          ENDP

                  |L3.128|
                          DCD      0x50000100

                          AREA ||i.app_eeprom_read_int||, CODE, READONLY, ALIGN=1

                  app_eeprom_read_int PROC
;;;57     }
;;;58     uint32_t app_eeprom_read_int(uint32_t addr) {
000000  211b              MOVS     r1,#0x1b
000002  b510              PUSH     {r4,lr}
;;;59     	return bsp_eeprom_read_int(DOME_START_ADDR + addr);
000004  0289              LSLS     r1,r1,#10
000006  1840              ADDS     r0,r0,r1
000008  f7fffffe          BL       bsp_eeprom_read_int
;;;60     }
00000c  bd10              POP      {r4,pc}
;;;61     
                          ENDP


                          AREA ||i.app_eeprom_write_int||, CODE, READONLY, ALIGN=1

                  app_eeprom_write_int PROC
;;;54     }
;;;55     void app_eeprom_write_int(uint32_t addr, uint32_t d) {
000000  221b              MOVS     r2,#0x1b
000002  b510              PUSH     {r4,lr}
;;;56     	bsp_eeprom_write_int(DOME_START_ADDR + addr, d);
000004  0292              LSLS     r2,r2,#10
000006  1880              ADDS     r0,r0,r2
000008  f7fffffe          BL       bsp_eeprom_write_int
;;;57     }
00000c  bd10              POP      {r4,pc}
;;;58     uint32_t app_eeprom_read_int(uint32_t addr) {
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_eeprom.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_app_eeprom_c_0e2cdbe2____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_app_eeprom_c_0e2cdbe2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_app_eeprom_c_0e2cdbe2____REVSH|
#line 402
|__asm___12_app_eeprom_c_0e2cdbe2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
