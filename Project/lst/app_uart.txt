; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 --omf_browse=.\obj\app_uart.crf ..\App\src\app_uart.c]
                          THUMB

                          AREA ||i.app_RC_Receiver_cmd_pro||, CODE, READONLY, ALIGN=2

                  app_RC_Receiver_cmd_pro PROC
;;;52     
;;;53     static void app_RC_Receiver_cmd_pro(Uart_ST* st) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;54     
;;;55     	uint8_t index = 0;
;;;56     	uint8_t i = 0;
000004  2400              MOVS     r4,#0
000006  4605              MOV      r5,r0                 ;53
;;;57     	uint8_t buffer[PAYLOAD_WIDTH] = { 0 };
;;;58     
;;;59     	switch (st->rxBuf[(st->pRead + 3) % sizeof(st->rxBuf)]) {
000008  2003              MOVS     r0,#3
00000a  0200              LSLS     r0,r0,#8
00000c  9400              STR      r4,[sp,#0]            ;57
00000e  9401              STR      r4,[sp,#4]            ;57
000010  9402              STR      r4,[sp,#8]            ;57
000012  182e              ADDS     r6,r5,r0
000014  9403              STR      r4,[sp,#0xc]
000016  8873              LDRH     r3,[r6,#2]
000018  1cd8              ADDS     r0,r3,#3
00001a  05c0              LSLS     r0,r0,#23
00001c  0dc0              LSRS     r0,r0,#23
00001e  5c28              LDRB     r0,[r5,r0]
000020  49fe              LDR      r1,|L1.1052|
;;;60     	case BLINK_METHOD_CMD:  //闪法
;;;61     	{
;;;62     //		break;
;;;63     		uint8_t index = st->rxBuf[(st->pRead + 12) % sizeof(st->rxBuf)];
;;;64     		uint8_t availableGroup = 0;
;;;65     		uint8_t minSpaceBytes = 0;
;;;66     		if (sizeof(DOME_DEFAULT_T) % 4) {
;;;67     			minSpaceBytes = (sizeof(DOME_DEFAULT_T) / 4) * 4 + 4;
;;;68     		} else {
;;;69     			minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;70     		}
;;;71     		availableGroup = (FMC_APROM_END - DOME_START_ADDR) / minSpaceBytes;
;;;72     
;;;73     		if (index > (availableGroup - 1)) {
;;;74     			break;
;;;75     		}
;;;76     		FMC_ENABLE_AP_UPDATE();
;;;77     		SYS_UnlockReg();
;;;78     		FMC_Open();
;;;79     
;;;80     		if (index == 0) {
;;;81     			u8_tmp = (FMC_APROM_END - DOME_START_ADDR) / FMC_FLASH_PAGE_SIZE;
;;;82     			for (i = 0; i < u8_tmp; i++) {
;;;83     				app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;84     			}
;;;85     		}
;;;86     #if 0
;;;87     		for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;88     			uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;89     			+ (&dome_blink.header.index
;;;90     					- &dome_blink);
;;;91     			app_eeprom_write_byte(addr, 0);
;;;92     			nop
;;;93     		}
;;;94     #endif
;;;95     #if 1
;;;96     		tmp = st->rxBuf[(st->pRead + 13) % sizeof(st->rxBuf)] & 0x0F; //sub mode number
;;;97     
;;;98     		uint8_t bytes = tmp * sizeof(SUBDOME_T) + sizeof(DOME_HEADER_T);
;;;99     
;;;100    //		if (minSpaceBytes % 4) {
;;;101    //			minSpaceBytes++;
;;;102    //		}
;;;103    
;;;104    		for (i = 0; i < (bytes / 4); i++) {
;;;105    			uint32_t addr = index * minSpaceBytes + i * 4;
;;;106    			uint32_t dt = st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;107    			dt |= st->rxBuf[(st->pRead + 4 + i + 1) % sizeof(st->rxBuf)] << 8;
;;;108    			dt |= st->rxBuf[(st->pRead + 4 + i + 2) % sizeof(st->rxBuf)] << 16;
;;;109    			dt |= st->rxBuf[(st->pRead + 4 + i + 3) % sizeof(st->rxBuf)] << 24;
;;;110    			app_eeprom_write_int(addr, dt);
;;;111    		}
;;;112    		if (bytes % 4) {
;;;113    			uint32_t addr = index * minSpaceBytes + (bytes / 4) * 4;
;;;114    			uint32_t dt = 0;
;;;115    			for (i = 0; i < (bytes % 4); i++) {
;;;116    				switch (i) {
;;;117    				case 0:
;;;118    					dt = st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4)
;;;119    							% sizeof(st->rxBuf)];
;;;120    					break;
;;;121    				case 1:
;;;122    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;123    							% sizeof(st->rxBuf)] << 8;
;;;124    					break;
;;;125    				case 2:
;;;126    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;127    							% sizeof(st->rxBuf)] << 16;
;;;128    					break;
;;;129    				}
;;;130    			}
;;;131    			app_eeprom_write_int(addr, dt);
;;;132    		}
;;;133    
;;;134    		FMC_Close();
;;;135    		SYS_LockReg();
;;;136    		FMC_DISABLE_AP_UPDATE();
;;;137    #endif
;;;138    		u8_tmp = index & 0xFF;
;;;139    		app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;140    	}
;;;141    		break;
;;;142    	case RCV_VOL_CMD:
;;;143    		buffer[index++] = LAMP2LCD_HEADER;
;;;144    		buffer[index++] = len;
;;;145    		buffer[index++] = RCV_VOL_CMD;
;;;146    		for (i = 0; i < (len - 1); i++) {
;;;147    			buffer[index++] =
;;;148    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;149    		}
;;;150    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;151    			buffer[index] += buffer[i + 1];
;;;152    		}
;;;153    		index++;
;;;154    		app_2d4_send(buffer, index);
;;;155    		break;
;;;156    	case RCV_POWER_STATUS_CMD:
;;;157    		buffer[index++] = LAMP2LCD_HEADER;
;;;158    		buffer[index++] = len;
;;;159    		buffer[index++] = RCV_POWER_STATUS_CMD;
;;;160    		for (i = 0; i < (len - 1); i++) {
;;;161    			buffer[index++] =
;;;162    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;163    		}
;;;164    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;165    			buffer[index] += buffer[i + 1];
;;;166    		}
;;;167    		index++;
;;;168    		app_2d4_send(buffer, index);
;;;169    		break;
;;;170    #if 0
;;;171    		case RCV_X_BOX_STATUS_CMD:
;;;172    		buffer[index++] = LAMP2LCD_HEADER;
;;;173    		buffer[index++] = len;
;;;174    		buffer[index++] = RCV_X_BOX_STATUS_CMD;
;;;175    		for (i = 0; i < (len - 1); i++) {
;;;176    			buffer[index++] = st->rxBuf[(st->pRead + 4
;;;177    					+ i) % sizeof(st->rxBuf)];
;;;178    		}
;;;179    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;180    			buffer[index] += buffer[i + 1];
;;;181    		}
;;;182    		index++;
;;;183    		app_2d4_send(buffer, index);
;;;184    		break;
;;;185    #endif
;;;186    	case RCV_BT_STATUS_CMD:
;;;187    		buffer[index++] = LAMP2LCD_HEADER;
;;;188    		buffer[index++] = len;
;;;189    		buffer[index++] = RCV_BT_STATUS_CMD;
;;;190    		for (i = 0; i < (len - 1); i++) {
;;;191    			buffer[index++] =
;;;192    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;193    		}
;;;194    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;195    			buffer[index] += buffer[i + 1];
;;;196    		}
;;;197    		index++;
;;;198    		if (g_tWork.status.bits.DOME == 0) {
000022  4aff              LDR      r2,|L1.1056|
000024  780f              LDRB     r7,[r1,#0]            ;144
000026  6812              LDR      r2,[r2,#0]
000028  1e79              SUBS     r1,r7,#1              ;146
00002a  2841              CMP      r0,#0x41              ;59
00002c  d07e              BEQ      |L1.300|
00002e  dc20              BGT      |L1.114|
000030  2835              CMP      r0,#0x35              ;59
000032  d07c              BEQ      |L1.302|
000034  dc0f              BGT      |L1.86|
000036  2812              CMP      r0,#0x12              ;59
000038  d04b              BEQ      |L1.210|
00003a  2831              CMP      r0,#0x31              ;59
00003c  d078              BEQ      |L1.304|
00003e  2833              CMP      r0,#0x33              ;59
000040  d077              BEQ      |L1.306|
000042  2834              CMP      r0,#0x34              ;59
000044  d132              BNE      |L1.172|
;;;199    			app_2d4_send(buffer, index);
;;;200    		}
;;;201    		break;
;;;202    	case RCV_PREV_NEXT_CMD:
;;;203    		buffer[index++] = LAMP2LCD_HEADER;
;;;204    		buffer[index++] = len;
;;;205    		buffer[index++] = RCV_PREV_NEXT_CMD;
;;;206    		for (i = 0; i < (len - 1); i++) {
;;;207    			buffer[index++] =
;;;208    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;209    		}
;;;210    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;211    			buffer[index] += buffer[i + 1];
;;;212    		}
;;;213    		index++;
;;;214    		if (g_tWork.status.bits.DOME == 0) {
;;;215    			app_2d4_send(buffer, index);
;;;216    		}
;;;217    		break;
;;;218    	case RCV_USB_PLAY_TIME_CMD:
;;;219    		buffer[index++] = LAMP2LCD_HEADER;
;;;220    		buffer[index++] = len;
;;;221    		buffer[index++] = RCV_USB_PLAY_TIME_CMD;
;;;222    		for (i = 0; i < (len - 1); i++) {
;;;223    			buffer[index++] =
;;;224    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;225    		}
;;;226    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;227    			buffer[index] += buffer[i + 1];
;;;228    		}
;;;229    		index++;
;;;230    		if (g_tWork.status.bits.DOME == 0) {
;;;231    			app_2d4_send(buffer, index);
;;;232    		}
;;;233    		break;
;;;234    	case RCV_FM_HZ_CMD:
;;;235    		buffer[index++] = LAMP2LCD_HEADER;
;;;236    		buffer[index++] = len;
;;;237    		buffer[index++] = RCV_FM_HZ_CMD;
;;;238    		for (i = 0; i < (len - 1); i++) {
;;;239    			buffer[index++] =
;;;240    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;241    		}
;;;242    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;243    			buffer[index] += buffer[i + 1];
;;;244    		}
;;;245    		index++;
;;;246    
;;;247    		if (g_tWork.status.bits.DOME == 0) {
;;;248    			app_2d4_send(buffer, index);
;;;249    		}
;;;250    		break;
;;;251    	case MODE_CHANGE_CMD:   //MODE
;;;252    		buffer[index++] = LAMP2LCD_HEADER;
;;;253    		buffer[index++] = len;
;;;254    		buffer[index++] = MODE_CHANGE_CMD;
;;;255    		for (i = 0; i < (len - 1); i++) {
;;;256    			buffer[index++] =
;;;257    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;258    		}
;;;259    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;260    			buffer[index] += buffer[i + 1];
;;;261    		}
;;;262    		index++;
;;;263    		app_2d4_send(buffer, index);
;;;264    		break;
;;;265    	case RCV_PLAY_PAUSE_STATUS_CMD:
;;;266    		buffer[index++] = LAMP2LCD_HEADER;
000046  20f8              MOVS     r0,#0xf8
000048  466b              MOV      r3,sp
00004a  7018              STRB     r0,[r3,#0]
;;;267    		buffer[index++] = len;
00004c  705f              STRB     r7,[r3,#1]
;;;268    		buffer[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
00004e  2034              MOVS     r0,#0x34
000050  7098              STRB     r0,[r3,#2]
000052  2003              MOVS     r0,#3
;;;269    		for (i = 0; i < (len - 1); i++) {
000054  e202              B        |L1.1116|
                  |L1.86|
000056  2836              CMP      r0,#0x36              ;59
000058  d06c              BEQ      |L1.308|
00005a  2837              CMP      r0,#0x37              ;59
00005c  d06b              BEQ      |L1.310|
00005e  2838              CMP      r0,#0x38              ;59
000060  d124              BNE      |L1.172|
000062  20f8              MOVS     r0,#0xf8              ;143
000064  466a              MOV      r2,sp                 ;143
000066  7010              STRB     r0,[r2,#0]            ;143
000068  7057              STRB     r7,[r2,#1]            ;144
00006a  2038              MOVS     r0,#0x38              ;145
00006c  7090              STRB     r0,[r2,#2]            ;145
00006e  2003              MOVS     r0,#3                 ;145
000070  e0f0              B        |L1.596|
                  |L1.114|
000072  49eb              LDR      r1,|L1.1056|
;;;270    			buffer[index++] =
;;;271    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;272    		}
;;;273    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;274    			buffer[index] += buffer[i + 1];
;;;275    		}
;;;276    		index++;
;;;277    		if (g_tWork.status.bits.DOME == 0) {
;;;278    			app_2d4_send(buffer, index);
;;;279    		}
;;;280    		break;
;;;281    		/// app --start
;;;282    	case KEY_CARD_POWER_CMD:
;;;283    		if (g_tWork.status.bits.blinkEnable == 0) {
;;;284    			//								g_tWork.status.bits.pause = 0;
;;;285    			g_tWork.status.bits.blinkEnable = 1;
;;;286    			g_tWork.status.bits.DEMO = 1;
000074  2704              MOVS     r7,#4
000076  6809              LDR      r1,[r1,#0]            ;198
;;;287    			app_dome_start_current();
;;;288    		} else {
;;;289    			//								g_tWork.status.bits.pause = 1;
;;;290    			g_tWork.status.bits.blinkEnable = 0;
;;;291    			g_tWork.status.bits.DEMO = 0;
000078  43b9              BICS     r1,r1,r7
00007a  2863              CMP      r0,#0x63              ;59
00007c  d07e              BEQ      |L1.380|
00007e  dc17              BGT      |L1.176|
000080  2854              CMP      r0,#0x54              ;59
000082  d07c              BEQ      |L1.382|
000084  2857              CMP      r0,#0x57              ;59
000086  d07b              BEQ      |L1.384|
000088  2862              CMP      r0,#0x62              ;59
00008a  d10f              BNE      |L1.172|
;;;292    			app_dome_stop_current();
;;;293    		}
;;;294    		buffer[index++] = LAMP2LCD_HEADER;
;;;295    		buffer[index++] = 10;
;;;296    		buffer[index++] = KEY_POWER_SHORT_CMD;
;;;297    		buffer[index++] = g_tWork.status.bits.blinkEnable;
;;;298    		app_dome_get_current_Name(buffer + index, 8);
;;;299    		index += 8;
;;;300    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;301    			buffer[index] += buffer[i + 1];
;;;302    		}
;;;303    		index++;
;;;304    		app_2d4_send(buffer, index);
;;;305    		break;
;;;306    	case KEY_CARD_DEMO_CMD:
;;;307    		//							if (g_tWork.status.bits.DEMO) {
;;;308    		//								g_tWork.status.bits.DEMO = 0;
;;;309    		//							} else {
;;;310    		g_tWork.status.bits.DEMO = 1;
;;;311    		//							}
;;;312    		app_dome_start(0, 0);
;;;313    
;;;314    		break;
;;;315    	case APP_COLOR_ATLA_CMD:
;;;316    #if 1
;;;317    		g_tWork.status.bits.DEMO = 0;
00008c  48e4              LDR      r0,|L1.1056|
;;;318    		app_dome_rgb(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)],
00008e  6001              STR      r1,[r0,#0]  ; g_tWork
000090  1d98              ADDS     r0,r3,#6
000092  05c0              LSLS     r0,r0,#23
000094  0dc0              LSRS     r0,r0,#23
000096  5c2a              LDRB     r2,[r5,r0]
000098  1d58              ADDS     r0,r3,#5
00009a  05c0              LSLS     r0,r0,#23
00009c  0dc0              LSRS     r0,r0,#23
00009e  5c29              LDRB     r1,[r5,r0]
0000a0  1d1b              ADDS     r3,r3,#4
0000a2  05d8              LSLS     r0,r3,#23
0000a4  0dc0              LSRS     r0,r0,#23
0000a6  5c28              LDRB     r0,[r5,r0]
0000a8  f7fffffe          BL       app_dome_rgb
                  |L1.172|
;;;319    				st->rxBuf[(st->pRead + 5) % sizeof(st->rxBuf)],
;;;320    				st->rxBuf[(st->pRead + 6) % sizeof(st->rxBuf)]);
;;;321    #else
;;;322    		app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;323    #endif
;;;324    		break;
;;;325    	case APP_BRIGHT_CMD:
;;;326    		dome_running_param.bright = st->rxBuf[(st->pRead + 4)
;;;327    				% sizeof(st->rxBuf)];
;;;328    		Light_bright_set(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
;;;329    		break;
;;;330    	case APP_SPEED_CMD:
;;;331    		dome_running_param.speed =
;;;332    				st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;333    		break;
;;;334    	case APP_FLASH_INDEX_CMD:
;;;335    		g_tWork.status.bits.DEMO = 0;
;;;336    		app_dome_start_current();
;;;337    		app_dome_start(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)], 0);
;;;338    		break;
;;;339    	case APP_SWITCH_INDEX_CMD: {
;;;340    		uint8_t switchData = st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;341    		if (((switchData >> 4) & 0x0F) == 0) {
;;;342    			Relay_set(switchData & 0x0F);
;;;343    		}
;;;344    	}
;;;345    		break;
;;;346    		/// app --end
;;;347    	default:
;;;348    		break;
;;;349    	}
;;;350    
;;;351    }
0000ac  b007              ADD      sp,sp,#0x1c
0000ae  bdf0              POP      {r4-r7,pc}
                  |L1.176|
0000b0  2864              CMP      r0,#0x64              ;59
0000b2  d066              BEQ      |L1.386|
0000b4  2865              CMP      r0,#0x65              ;59
0000b6  d07d              BEQ      |L1.436|
0000b8  2866              CMP      r0,#0x66              ;59
0000ba  d1f7              BNE      |L1.172|
0000bc  1d1b              ADDS     r3,r3,#4              ;59
0000be  05d8              LSLS     r0,r3,#23             ;340
0000c0  0dc0              LSRS     r0,r0,#23             ;340
0000c2  5c28              LDRB     r0,[r5,r0]            ;340
0000c4  0901              LSRS     r1,r0,#4              ;341
0000c6  d1f1              BNE      |L1.172|
0000c8  0700              LSLS     r0,r0,#28             ;342
0000ca  0f00              LSRS     r0,r0,#28             ;342
0000cc  f7fffffe          BL       Relay_set
0000d0  e7ec              B        |L1.172|
                  |L1.210|
0000d2  330c              ADDS     r3,r3,#0xc
0000d4  05d8              LSLS     r0,r3,#23             ;63
0000d6  0dc0              LSRS     r0,r0,#23             ;63
0000d8  5c2c              LDRB     r4,[r5,r0]            ;63
0000da  2074              MOVS     r0,#0x74              ;67
0000dc  9005              STR      r0,[sp,#0x14]         ;73
0000de  2c2b              CMP      r4,#0x2b              ;73
0000e0  dce4              BGT      |L1.172|
0000e2  48d0              LDR      r0,|L1.1060|
0000e4  6801              LDR      r1,[r0,#0]            ;76
0000e6  2208              MOVS     r2,#8                 ;76
0000e8  4311              ORRS     r1,r1,r2              ;76
0000ea  6001              STR      r1,[r0,#0]            ;76
0000ec  2159              MOVS     r1,#0x59              ;76
0000ee  2216              MOVS     r2,#0x16              ;76
0000f0  2388              MOVS     r3,#0x88              ;76
                  |L1.242|
0000f2  48cd              LDR      r0,|L1.1064|
0000f4  6001              STR      r1,[r0,#0]            ;76
0000f6  6002              STR      r2,[r0,#0]            ;76
0000f8  6003              STR      r3,[r0,#0]            ;76
0000fa  6800              LDR      r0,[r0,#0]            ;76
0000fc  2800              CMP      r0,#0                 ;76
0000fe  d0f8              BEQ      |L1.242|
000100  f7fffffe          BL       FMC_Open
000104  2c00              CMP      r4,#0                 ;80
000106  d10c              BNE      |L1.290|
000108  210a              MOVS     r1,#0xa               ;81
00010a  48c4              LDR      r0,|L1.1052|
00010c  2700              MOVS     r7,#0                 ;82
00010e  7041              STRB     r1,[r0,#1]            ;81
                  |L1.272|
000110  0278              LSLS     r0,r7,#9              ;83
000112  f7fffffe          BL       app_eeprom_erase
000116  48c1              LDR      r0,|L1.1052|
000118  1c7f              ADDS     r7,r7,#1              ;83
00011a  7840              LDRB     r0,[r0,#1]            ;82  ; u8_tmp
00011c  b2ff              UXTB     r7,r7                 ;82
00011e  4287              CMP      r7,r0                 ;82
000120  d3f6              BCC      |L1.272|
                  |L1.290|
000122  8870              LDRH     r0,[r6,#2]            ;96
000124  300d              ADDS     r0,r0,#0xd            ;96
000126  05c0              LSLS     r0,r0,#23             ;96
000128  0dc0              LSRS     r0,r0,#23             ;96
00012a  e005              B        |L1.312|
                  |L1.300|
00012c  e15e              B        |L1.1004|
                  |L1.302|
00012e  e0f0              B        |L1.786|
                  |L1.304|
000130  e0a3              B        |L1.634|
                  |L1.306|
000132  e0c5              B        |L1.704|
                  |L1.308|
000134  e111              B        |L1.858|
                  |L1.310|
000136  e135              B        |L1.932|
                  |L1.312|
000138  5c28              LDRB     r0,[r5,r0]            ;96
00013a  49b8              LDR      r1,|L1.1052|
00013c  0700              LSLS     r0,r0,#28             ;96
00013e  0f00              LSRS     r0,r0,#28             ;96
000140  8048              STRH     r0,[r1,#2]            ;96
000142  210d              MOVS     r1,#0xd               ;98
000144  4348              MULS     r0,r1,r0              ;98
000146  300a              ADDS     r0,r0,#0xa            ;98
000148  b2c0              UXTB     r0,r0                 ;98
00014a  2700              MOVS     r7,#0                 ;104
00014c  9004              STR      r0,[sp,#0x10]         ;104
00014e  0880              LSRS     r0,r0,#2              ;104
000150  9006              STR      r0,[sp,#0x18]         ;104
000152  e029              B        |L1.424|
                  |L1.340|
000154  9805              LDR      r0,[sp,#0x14]         ;105
000156  00b9              LSLS     r1,r7,#2              ;105
000158  4360              MULS     r0,r4,r0              ;105
00015a  1843              ADDS     r3,r0,r1              ;105
00015c  8870              LDRH     r0,[r6,#2]            ;106
00015e  1d39              ADDS     r1,r7,#4              ;106
000160  1841              ADDS     r1,r0,r1              ;106
000162  05c9              LSLS     r1,r1,#23             ;106
000164  0dc9              LSRS     r1,r1,#23             ;106
000166  5c6a              LDRB     r2,[r5,r1]            ;106
000168  1d79              ADDS     r1,r7,#5              ;107
00016a  1841              ADDS     r1,r0,r1              ;107
00016c  05c9              LSLS     r1,r1,#23             ;107
00016e  0dc9              LSRS     r1,r1,#23             ;107
000170  5c69              LDRB     r1,[r5,r1]            ;107
000172  0209              LSLS     r1,r1,#8              ;107
000174  4311              ORRS     r1,r1,r2              ;107
000176  1dba              ADDS     r2,r7,#6              ;108
000178  1882              ADDS     r2,r0,r2              ;108
00017a  e003              B        |L1.388|
                  |L1.380|
00017c  e1b6              B        |L1.1260|
                  |L1.382|
00017e  e17d              B        |L1.1148|
                  |L1.384|
000180  e1ae              B        |L1.1248|
                  |L1.386|
000182  e1bd              B        |L1.1280|
                  |L1.388|
000184  05d2              LSLS     r2,r2,#23             ;108
000186  0dd2              LSRS     r2,r2,#23             ;108
000188  5caa              LDRB     r2,[r5,r2]            ;108
00018a  0412              LSLS     r2,r2,#16             ;108
00018c  430a              ORRS     r2,r2,r1              ;108
00018e  1df9              ADDS     r1,r7,#7              ;109
000190  1840              ADDS     r0,r0,r1              ;109
000192  05c0              LSLS     r0,r0,#23             ;109
000194  0dc0              LSRS     r0,r0,#23             ;109
000196  5c28              LDRB     r0,[r5,r0]            ;109
000198  0601              LSLS     r1,r0,#24             ;109
00019a  4311              ORRS     r1,r1,r2              ;109
00019c  4618              MOV      r0,r3                 ;110
00019e  f7fffffe          BL       app_eeprom_write_int
0001a2  1c7f              ADDS     r7,r7,#1              ;110
0001a4  9806              LDR      r0,[sp,#0x18]         ;104
0001a6  b2ff              UXTB     r7,r7                 ;104
                  |L1.424|
0001a8  42b8              CMP      r0,r7                 ;104
0001aa  d8d3              BHI      |L1.340|
0001ac  9804              LDR      r0,[sp,#0x10]         ;112
0001ae  0780              LSLS     r0,r0,#30             ;112
0001b0  d033              BEQ      |L1.538|
0001b2  e000              B        |L1.438|
                  |L1.436|
0001b4  e1ab              B        |L1.1294|
                  |L1.438|
0001b6  9904              LDR      r1,[sp,#0x10]         ;113
0001b8  9805              LDR      r0,[sp,#0x14]         ;113
0001ba  088a              LSRS     r2,r1,#2              ;113
0001bc  4360              MULS     r0,r4,r0              ;113
0001be  0092              LSLS     r2,r2,#2              ;113
0001c0  1880              ADDS     r0,r0,r2              ;113
0001c2  9b04              LDR      r3,[sp,#0x10]         ;115
0001c4  2100              MOVS     r1,#0                 ;114
0001c6  4684              MOV      r12,r0                ;113
0001c8  079f              LSLS     r7,r3,#30             ;115
0001ca  4608              MOV      r0,r1                 ;115
0001cc  0fbf              LSRS     r7,r7,#30             ;115
0001ce  e01f              B        |L1.528|
                  |L1.464|
0001d0  2800              CMP      r0,#0                 ;116
0001d2  d004              BEQ      |L1.478|
0001d4  2801              CMP      r0,#1                 ;116
0001d6  d009              BEQ      |L1.492|
0001d8  2802              CMP      r0,#2                 ;116
0001da  d117              BNE      |L1.524|
0001dc  e00e              B        |L1.508|
                  |L1.478|
0001de  8873              LDRH     r3,[r6,#2]            ;118
0001e0  1d11              ADDS     r1,r2,#4              ;118
0001e2  1859              ADDS     r1,r3,r1              ;118
0001e4  05c9              LSLS     r1,r1,#23             ;118
0001e6  0dc9              LSRS     r1,r1,#23             ;118
0001e8  5c69              LDRB     r1,[r5,r1]            ;118
0001ea  e00f              B        |L1.524|
                  |L1.492|
0001ec  8873              LDRH     r3,[r6,#2]            ;122
0001ee  189b              ADDS     r3,r3,r2              ;122
0001f0  1d5b              ADDS     r3,r3,#5              ;122
0001f2  05db              LSLS     r3,r3,#23             ;122
0001f4  0ddb              LSRS     r3,r3,#23             ;122
0001f6  5ceb              LDRB     r3,[r5,r3]            ;122
0001f8  021b              LSLS     r3,r3,#8              ;122
0001fa  e006              B        |L1.522|
                  |L1.508|
0001fc  8873              LDRH     r3,[r6,#2]            ;126
0001fe  189b              ADDS     r3,r3,r2              ;126
000200  1d9b              ADDS     r3,r3,#6              ;126
000202  05db              LSLS     r3,r3,#23             ;126
000204  0ddb              LSRS     r3,r3,#23             ;126
000206  5ceb              LDRB     r3,[r5,r3]            ;126
000208  041b              LSLS     r3,r3,#16             ;126
                  |L1.522|
00020a  4319              ORRS     r1,r1,r3              ;122
                  |L1.524|
00020c  1c40              ADDS     r0,r0,#1              ;122
00020e  b2c0              UXTB     r0,r0                 ;115
                  |L1.528|
000210  4287              CMP      r7,r0                 ;115
000212  d8dd              BHI      |L1.464|
000214  4660              MOV      r0,r12                ;131
000216  f7fffffe          BL       app_eeprom_write_int
                  |L1.538|
00021a  f7fffffe          BL       FMC_Close
00021e  4982              LDR      r1,|L1.1064|
000220  2000              MOVS     r0,#0                 ;134
000222  6008              STR      r0,[r1,#0]            ;134
000224  487f              LDR      r0,|L1.1060|
000226  6801              LDR      r1,[r0,#0]            ;136
000228  2208              MOVS     r2,#8                 ;136
00022a  4391              BICS     r1,r1,r2              ;136
00022c  6001              STR      r1,[r0,#0]            ;136
00022e  487b              LDR      r0,|L1.1052|
000230  2201              MOVS     r2,#1                 ;139
000232  7044              STRB     r4,[r0,#1]            ;138
000234  1c41              ADDS     r1,r0,#1              ;139
000236  2012              MOVS     r0,#0x12              ;139
000238  f7fffffe          BL       app_uart_send
                  |L1.572|
00023c  e736              B        |L1.172|
                  |L1.574|
00023e  8873              LDRH     r3,[r6,#2]            ;147
000240  1d27              ADDS     r7,r4,#4              ;147
000242  19db              ADDS     r3,r3,r7              ;147
000244  05db              LSLS     r3,r3,#23             ;147
000246  0ddb              LSRS     r3,r3,#23             ;147
000248  5ceb              LDRB     r3,[r5,r3]            ;147
00024a  5413              STRB     r3,[r2,r0]            ;147
00024c  1c40              ADDS     r0,r0,#1              ;147
00024e  1c64              ADDS     r4,r4,#1              ;147
000250  b2c0              UXTB     r0,r0                 ;147
000252  b2e4              UXTB     r4,r4                 ;146
                  |L1.596|
000254  428c              CMP      r4,r1                 ;146
000256  dbf2              BLT      |L1.574|
000258  2100              MOVS     r1,#0                 ;150
00025a  e006              B        |L1.618|
                  |L1.604|
00025c  1854              ADDS     r4,r2,r1              ;151
00025e  5c13              LDRB     r3,[r2,r0]            ;151
000260  7864              LDRB     r4,[r4,#1]            ;151
000262  191b              ADDS     r3,r3,r4              ;151
000264  1c49              ADDS     r1,r1,#1              ;151
000266  5413              STRB     r3,[r2,r0]            ;151
000268  b2c9              UXTB     r1,r1                 ;150
                  |L1.618|
00026a  7853              LDRB     r3,[r2,#1]            ;150
00026c  1c5b              ADDS     r3,r3,#1              ;150
00026e  428b              CMP      r3,r1                 ;150
000270  d8f4              BHI      |L1.604|
                  |L1.626|
000272  1c40              ADDS     r0,r0,#1              ;150
000274  b2c1              UXTB     r1,r0                 ;153
000276  4610              MOV      r0,r2                 ;154
000278  e12f              B        |L1.1242|
                  |L1.634|
00027a  20f8              MOVS     r0,#0xf8              ;157
00027c  466a              MOV      r2,sp                 ;157
00027e  7010              STRB     r0,[r2,#0]            ;157
000280  7057              STRB     r7,[r2,#1]            ;158
000282  2031              MOVS     r0,#0x31              ;159
000284  7090              STRB     r0,[r2,#2]            ;159
000286  2003              MOVS     r0,#3                 ;159
000288  e00a              B        |L1.672|
                  |L1.650|
00028a  8873              LDRH     r3,[r6,#2]            ;161
00028c  1d27              ADDS     r7,r4,#4              ;161
00028e  19db              ADDS     r3,r3,r7              ;161
000290  05db              LSLS     r3,r3,#23             ;161
000292  0ddb              LSRS     r3,r3,#23             ;161
000294  5ceb              LDRB     r3,[r5,r3]            ;161
000296  5413              STRB     r3,[r2,r0]            ;161
000298  1c40              ADDS     r0,r0,#1              ;161
00029a  1c64              ADDS     r4,r4,#1              ;161
00029c  b2c0              UXTB     r0,r0                 ;161
00029e  b2e4              UXTB     r4,r4                 ;160
                  |L1.672|
0002a0  428c              CMP      r4,r1                 ;160
0002a2  dbf2              BLT      |L1.650|
0002a4  2100              MOVS     r1,#0                 ;164
0002a6  e006              B        |L1.694|
                  |L1.680|
0002a8  1854              ADDS     r4,r2,r1              ;165
0002aa  5c13              LDRB     r3,[r2,r0]            ;165
0002ac  7864              LDRB     r4,[r4,#1]            ;165
0002ae  191b              ADDS     r3,r3,r4              ;165
0002b0  1c49              ADDS     r1,r1,#1              ;165
0002b2  5413              STRB     r3,[r2,r0]            ;165
0002b4  b2c9              UXTB     r1,r1                 ;164
                  |L1.694|
0002b6  7853              LDRB     r3,[r2,#1]            ;164
0002b8  1c5b              ADDS     r3,r3,#1              ;164
0002ba  428b              CMP      r3,r1                 ;164
0002bc  d8f4              BHI      |L1.680|
0002be  e7d8              B        |L1.626|
                  |L1.704|
0002c0  20f8              MOVS     r0,#0xf8              ;187
0002c2  466b              MOV      r3,sp                 ;187
0002c4  7018              STRB     r0,[r3,#0]            ;187
0002c6  705f              STRB     r7,[r3,#1]            ;188
0002c8  2033              MOVS     r0,#0x33              ;189
0002ca  7098              STRB     r0,[r3,#2]            ;189
0002cc  2003              MOVS     r0,#3                 ;189
0002ce  e00b              B        |L1.744|
                  |L1.720|
0002d0  8873              LDRH     r3,[r6,#2]            ;191
0002d2  1d27              ADDS     r7,r4,#4              ;191
0002d4  19db              ADDS     r3,r3,r7              ;191
0002d6  05db              LSLS     r3,r3,#23             ;191
0002d8  0ddb              LSRS     r3,r3,#23             ;191
0002da  5cef              LDRB     r7,[r5,r3]            ;191
0002dc  466b              MOV      r3,sp                 ;191
0002de  541f              STRB     r7,[r3,r0]            ;191
0002e0  1c40              ADDS     r0,r0,#1              ;191
0002e2  1c64              ADDS     r4,r4,#1              ;191
0002e4  b2c0              UXTB     r0,r0                 ;191
0002e6  b2e4              UXTB     r4,r4                 ;190
                  |L1.744|
0002e8  428c              CMP      r4,r1                 ;190
0002ea  dbf1              BLT      |L1.720|
0002ec  2100              MOVS     r1,#0                 ;194
0002ee  e006              B        |L1.766|
                  |L1.752|
0002f0  185d              ADDS     r5,r3,r1              ;195
0002f2  5c1c              LDRB     r4,[r3,r0]            ;195
0002f4  786d              LDRB     r5,[r5,#1]            ;195
0002f6  1964              ADDS     r4,r4,r5              ;195
0002f8  1c49              ADDS     r1,r1,#1              ;195
0002fa  541c              STRB     r4,[r3,r0]            ;195
0002fc  b2c9              UXTB     r1,r1                 ;194
                  |L1.766|
0002fe  785c              LDRB     r4,[r3,#1]            ;194
000300  1c64              ADDS     r4,r4,#1              ;194
000302  428c              CMP      r4,r1                 ;194
000304  d8f4              BHI      |L1.752|
                  |L1.774|
000306  1c40              ADDS     r0,r0,#1              ;194
000308  b2c1              UXTB     r1,r0                 ;197
00030a  07d0              LSLS     r0,r2,#31             ;198
00030c  d196              BNE      |L1.572|
00030e  4618              MOV      r0,r3                 ;278
000310  e0e3              B        |L1.1242|
                  |L1.786|
000312  20f8              MOVS     r0,#0xf8              ;203
000314  466b              MOV      r3,sp                 ;203
000316  7018              STRB     r0,[r3,#0]            ;203
000318  705f              STRB     r7,[r3,#1]            ;204
00031a  2035              MOVS     r0,#0x35              ;205
00031c  7098              STRB     r0,[r3,#2]            ;205
00031e  2003              MOVS     r0,#3                 ;205
000320  e00b              B        |L1.826|
                  |L1.802|
000322  8873              LDRH     r3,[r6,#2]            ;207
000324  1d27              ADDS     r7,r4,#4              ;207
000326  19db              ADDS     r3,r3,r7              ;207
000328  05db              LSLS     r3,r3,#23             ;207
00032a  0ddb              LSRS     r3,r3,#23             ;207
00032c  5cef              LDRB     r7,[r5,r3]            ;207
00032e  466b              MOV      r3,sp                 ;207
000330  541f              STRB     r7,[r3,r0]            ;207
000332  1c40              ADDS     r0,r0,#1              ;207
000334  1c64              ADDS     r4,r4,#1              ;207
000336  b2c0              UXTB     r0,r0                 ;207
000338  b2e4              UXTB     r4,r4                 ;206
                  |L1.826|
00033a  428c              CMP      r4,r1                 ;206
00033c  dbf1              BLT      |L1.802|
00033e  2100              MOVS     r1,#0                 ;210
000340  e006              B        |L1.848|
                  |L1.834|
000342  185d              ADDS     r5,r3,r1              ;211
000344  5c1c              LDRB     r4,[r3,r0]            ;211
000346  786d              LDRB     r5,[r5,#1]            ;211
000348  1964              ADDS     r4,r4,r5              ;211
00034a  1c49              ADDS     r1,r1,#1              ;211
00034c  541c              STRB     r4,[r3,r0]            ;211
00034e  b2c9              UXTB     r1,r1                 ;210
                  |L1.848|
000350  785c              LDRB     r4,[r3,#1]            ;210
000352  1c64              ADDS     r4,r4,#1              ;210
000354  428c              CMP      r4,r1                 ;210
000356  d8f4              BHI      |L1.834|
000358  e7d5              B        |L1.774|
                  |L1.858|
00035a  23f8              MOVS     r3,#0xf8              ;219
00035c  4668              MOV      r0,sp                 ;219
00035e  7003              STRB     r3,[r0,#0]            ;219
000360  7047              STRB     r7,[r0,#1]            ;220
000362  2336              MOVS     r3,#0x36              ;221
000364  7083              STRB     r3,[r0,#2]            ;221
000366  2003              MOVS     r0,#3                 ;221
000368  e00b              B        |L1.898|
                  |L1.874|
00036a  8873              LDRH     r3,[r6,#2]            ;223
00036c  1d27              ADDS     r7,r4,#4              ;223
00036e  19db              ADDS     r3,r3,r7              ;223
000370  05db              LSLS     r3,r3,#23             ;223
000372  0ddb              LSRS     r3,r3,#23             ;223
000374  5cef              LDRB     r7,[r5,r3]            ;223
000376  466b              MOV      r3,sp                 ;223
000378  541f              STRB     r7,[r3,r0]            ;223
00037a  1c40              ADDS     r0,r0,#1              ;223
00037c  1c64              ADDS     r4,r4,#1              ;223
00037e  b2c0              UXTB     r0,r0                 ;223
000380  b2e4              UXTB     r4,r4                 ;222
                  |L1.898|
000382  428c              CMP      r4,r1                 ;222
000384  dbf1              BLT      |L1.874|
000386  2100              MOVS     r1,#0                 ;226
000388  466b              MOV      r3,sp                 ;57
00038a  e006              B        |L1.922|
                  |L1.908|
00038c  185d              ADDS     r5,r3,r1              ;227
00038e  5c1c              LDRB     r4,[r3,r0]            ;227
000390  786d              LDRB     r5,[r5,#1]            ;227
000392  1964              ADDS     r4,r4,r5              ;227
000394  1c49              ADDS     r1,r1,#1              ;227
000396  541c              STRB     r4,[r3,r0]            ;227
000398  b2c9              UXTB     r1,r1                 ;226
                  |L1.922|
00039a  785c              LDRB     r4,[r3,#1]            ;226
00039c  1c64              ADDS     r4,r4,#1              ;226
00039e  428c              CMP      r4,r1                 ;226
0003a0  d8f4              BHI      |L1.908|
0003a2  e7b0              B        |L1.774|
                  |L1.932|
0003a4  20f8              MOVS     r0,#0xf8              ;235
0003a6  466b              MOV      r3,sp                 ;235
0003a8  7018              STRB     r0,[r3,#0]            ;235
0003aa  705f              STRB     r7,[r3,#1]            ;236
0003ac  2037              MOVS     r0,#0x37              ;237
0003ae  7098              STRB     r0,[r3,#2]            ;237
0003b0  2003              MOVS     r0,#3                 ;237
0003b2  e00b              B        |L1.972|
                  |L1.948|
0003b4  8873              LDRH     r3,[r6,#2]            ;239
0003b6  1d27              ADDS     r7,r4,#4              ;239
0003b8  19db              ADDS     r3,r3,r7              ;239
0003ba  05db              LSLS     r3,r3,#23             ;239
0003bc  0ddb              LSRS     r3,r3,#23             ;239
0003be  5cef              LDRB     r7,[r5,r3]            ;239
0003c0  466b              MOV      r3,sp                 ;239
0003c2  541f              STRB     r7,[r3,r0]            ;239
0003c4  1c40              ADDS     r0,r0,#1              ;239
0003c6  1c64              ADDS     r4,r4,#1              ;239
0003c8  b2c0              UXTB     r0,r0                 ;239
0003ca  b2e4              UXTB     r4,r4                 ;238
                  |L1.972|
0003cc  428c              CMP      r4,r1                 ;238
0003ce  dbf1              BLT      |L1.948|
0003d0  2100              MOVS     r1,#0                 ;242
0003d2  e006              B        |L1.994|
                  |L1.980|
0003d4  185d              ADDS     r5,r3,r1              ;243
0003d6  5c1c              LDRB     r4,[r3,r0]            ;243
0003d8  786d              LDRB     r5,[r5,#1]            ;243
0003da  1964              ADDS     r4,r4,r5              ;243
0003dc  1c49              ADDS     r1,r1,#1              ;243
0003de  541c              STRB     r4,[r3,r0]            ;243
0003e0  b2c9              UXTB     r1,r1                 ;242
                  |L1.994|
0003e2  785c              LDRB     r4,[r3,#1]            ;242
0003e4  1c64              ADDS     r4,r4,#1              ;242
0003e6  428c              CMP      r4,r1                 ;242
0003e8  d8f4              BHI      |L1.980|
0003ea  e78c              B        |L1.774|
                  |L1.1004|
0003ec  20f8              MOVS     r0,#0xf8              ;252
0003ee  466a              MOV      r2,sp                 ;252
0003f0  7010              STRB     r0,[r2,#0]            ;252
0003f2  7057              STRB     r7,[r2,#1]            ;253
0003f4  2041              MOVS     r0,#0x41              ;254
0003f6  7090              STRB     r0,[r2,#2]            ;254
0003f8  2003              MOVS     r0,#3                 ;254
0003fa  e00a              B        |L1.1042|
                  |L1.1020|
0003fc  8873              LDRH     r3,[r6,#2]            ;256
0003fe  1d27              ADDS     r7,r4,#4              ;256
000400  19db              ADDS     r3,r3,r7              ;256
000402  05db              LSLS     r3,r3,#23             ;256
000404  0ddb              LSRS     r3,r3,#23             ;256
000406  5ceb              LDRB     r3,[r5,r3]            ;256
000408  5413              STRB     r3,[r2,r0]            ;256
00040a  1c40              ADDS     r0,r0,#1              ;256
00040c  1c64              ADDS     r4,r4,#1              ;256
00040e  b2c0              UXTB     r0,r0                 ;256
000410  b2e4              UXTB     r4,r4                 ;255
                  |L1.1042|
000412  428c              CMP      r4,r1                 ;255
000414  dbf2              BLT      |L1.1020|
000416  2100              MOVS     r1,#0                 ;259
000418  e00f              B        |L1.1082|
00041a  0000              DCW      0x0000
                  |L1.1052|
                          DCD      ||.data||
                  |L1.1056|
                          DCD      g_tWork
                  |L1.1060|
                          DCD      0x5000c000
                  |L1.1064|
                          DCD      0x50000100
                  |L1.1068|
00042c  1854              ADDS     r4,r2,r1              ;260
00042e  5c13              LDRB     r3,[r2,r0]            ;260
000430  7864              LDRB     r4,[r4,#1]            ;260
000432  191b              ADDS     r3,r3,r4              ;260
000434  1c49              ADDS     r1,r1,#1              ;260
000436  5413              STRB     r3,[r2,r0]            ;260
000438  b2c9              UXTB     r1,r1                 ;259
                  |L1.1082|
00043a  7853              LDRB     r3,[r2,#1]            ;259
00043c  1c5b              ADDS     r3,r3,#1              ;259
00043e  428b              CMP      r3,r1                 ;259
000440  d8f4              BHI      |L1.1068|
000442  e716              B        |L1.626|
                  |L1.1092|
000444  8873              LDRH     r3,[r6,#2]            ;270
000446  1d27              ADDS     r7,r4,#4              ;270
000448  19db              ADDS     r3,r3,r7              ;270
00044a  05db              LSLS     r3,r3,#23             ;270
00044c  0ddb              LSRS     r3,r3,#23             ;270
00044e  5cef              LDRB     r7,[r5,r3]            ;270
000450  466b              MOV      r3,sp                 ;270
000452  541f              STRB     r7,[r3,r0]            ;270
000454  1c40              ADDS     r0,r0,#1              ;270
000456  1c64              ADDS     r4,r4,#1              ;270
000458  b2c0              UXTB     r0,r0                 ;270
00045a  b2e4              UXTB     r4,r4                 ;269
                  |L1.1116|
00045c  428c              CMP      r4,r1                 ;269
00045e  dbf1              BLT      |L1.1092|
000460  2100              MOVS     r1,#0                 ;273
000462  e006              B        |L1.1138|
                  |L1.1124|
000464  185d              ADDS     r5,r3,r1              ;274
000466  5c1c              LDRB     r4,[r3,r0]            ;274
000468  786d              LDRB     r5,[r5,#1]            ;274
00046a  1964              ADDS     r4,r4,r5              ;274
00046c  1c49              ADDS     r1,r1,#1              ;274
00046e  541c              STRB     r4,[r3,r0]            ;274
000470  b2c9              UXTB     r1,r1                 ;273
                  |L1.1138|
000472  785c              LDRB     r4,[r3,#1]            ;273
000474  1c64              ADDS     r4,r4,#1              ;273
000476  428c              CMP      r4,r1                 ;273
000478  d8f4              BHI      |L1.1124|
00047a  e744              B        |L1.774|
                  |L1.1148|
00047c  4d2a              LDR      r5,|L1.1320|
00047e  0710              LSLS     r0,r2,#28             ;283
000480  d406              BMI      |L1.1168|
000482  2008              MOVS     r0,#8                 ;285
000484  4302              ORRS     r2,r2,r0              ;285
000486  433a              ORRS     r2,r2,r7              ;286
000488  602a              STR      r2,[r5,#0]            ;287  ; g_tWork
00048a  f7fffffe          BL       app_dome_start_current
00048e  e005              B        |L1.1180|
                  |L1.1168|
000490  2008              MOVS     r0,#8                 ;290
000492  4382              BICS     r2,r2,r0              ;290
000494  43ba              BICS     r2,r2,r7              ;291
000496  602a              STR      r2,[r5,#0]            ;292  ; g_tWork
000498  f7fffffe          BL       app_dome_stop_current
                  |L1.1180|
00049c  21f8              MOVS     r1,#0xf8              ;294
00049e  466e              MOV      r6,sp                 ;294
0004a0  7031              STRB     r1,[r6,#0]            ;294
0004a2  210a              MOVS     r1,#0xa               ;295
0004a4  2201              MOVS     r2,#1                 ;294
0004a6  7071              STRB     r1,[r6,#1]            ;295
0004a8  70b2              STRB     r2,[r6,#2]            ;296
0004aa  7829              LDRB     r1,[r5,#0]            ;297  ; g_tWork
0004ac  a801              ADD      r0,sp,#4              ;298
0004ae  0709              LSLS     r1,r1,#28             ;297
0004b0  0fc9              LSRS     r1,r1,#31             ;297
0004b2  70f1              STRB     r1,[r6,#3]            ;297
0004b4  2108              MOVS     r1,#8                 ;298
0004b6  f7fffffe          BL       app_dome_get_current_Name
0004ba  210c              MOVS     r1,#0xc               ;299
0004bc  e006              B        |L1.1228|
                  |L1.1214|
0004be  1932              ADDS     r2,r6,r4              ;301
0004c0  5c70              LDRB     r0,[r6,r1]            ;301
0004c2  7852              LDRB     r2,[r2,#1]            ;301
0004c4  1880              ADDS     r0,r0,r2              ;301
0004c6  1c64              ADDS     r4,r4,#1              ;301
0004c8  5470              STRB     r0,[r6,r1]            ;301
0004ca  b2e4              UXTB     r4,r4                 ;300
                  |L1.1228|
0004cc  4668              MOV      r0,sp                 ;300
0004ce  7840              LDRB     r0,[r0,#1]            ;300
0004d0  1c40              ADDS     r0,r0,#1              ;300
0004d2  42a0              CMP      r0,r4                 ;300
0004d4  d8f3              BHI      |L1.1214|
0004d6  4668              MOV      r0,sp                 ;304
0004d8  1c49              ADDS     r1,r1,#1              ;304
                  |L1.1242|
0004da  f7fffffe          BL       app_2d4_send
0004de  e5e5              B        |L1.172|
                  |L1.1248|
0004e0  4811              LDR      r0,|L1.1320|
0004e2  433a              ORRS     r2,r2,r7              ;310
0004e4  2100              MOVS     r1,#0                 ;312
0004e6  6002              STR      r2,[r0,#0]            ;312  ; g_tWork
0004e8  4608              MOV      r0,r1                 ;312
0004ea  e01a              B        |L1.1314|
                  |L1.1260|
0004ec  1d1b              ADDS     r3,r3,#4              ;314
0004ee  05d8              LSLS     r0,r3,#23             ;326
0004f0  0dc0              LSRS     r0,r0,#23             ;326
0004f2  490e              LDR      r1,|L1.1324|
0004f4  5c2a              LDRB     r2,[r5,r0]            ;326
0004f6  700a              STRB     r2,[r1,#0]            ;326
0004f8  5c28              LDRB     r0,[r5,r0]            ;328
0004fa  f7fffffe          BL       Light_bright_set
0004fe  e5d5              B        |L1.172|
                  |L1.1280|
000500  1d1b              ADDS     r3,r3,#4
000502  05d8              LSLS     r0,r3,#23             ;331
000504  0dc0              LSRS     r0,r0,#23             ;331
000506  5c29              LDRB     r1,[r5,r0]            ;331
000508  4808              LDR      r0,|L1.1324|
00050a  7041              STRB     r1,[r0,#1]            ;331
00050c  e5ce              B        |L1.172|
                  |L1.1294|
00050e  4806              LDR      r0,|L1.1320|
000510  6001              STR      r1,[r0,#0]            ;336  ; g_tWork
000512  f7fffffe          BL       app_dome_start_current
000516  8870              LDRH     r0,[r6,#2]            ;337
000518  2100              MOVS     r1,#0                 ;337
00051a  1d00              ADDS     r0,r0,#4              ;337
00051c  05c0              LSLS     r0,r0,#23             ;337
00051e  0dc0              LSRS     r0,r0,#23             ;337
000520  5c28              LDRB     r0,[r5,r0]            ;337
                  |L1.1314|
000522  f7fffffe          BL       app_dome_start
000526  e5c1              B        |L1.172|
;;;352    
                          ENDP

                  |L1.1320|
                          DCD      g_tWork
                  |L1.1324|
                          DCD      dome_running_param

                          AREA ||i.app_uart_Init||, CODE, READONLY, ALIGN=2

                  app_uart_Init PROC
;;;27     
;;;28     void app_uart_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;29     
;;;30     	memset((uint8_t *) &uart_st, 0, sizeof(Uart_ST));
000002  21c1              MOVS     r1,#0xc1
000004  0089              LSLS     r1,r1,#2
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       __aeabi_memclr
;;;31     }
00000c  bd10              POP      {r4,pc}
;;;32     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.app_uart_pro||, CODE, READONLY, ALIGN=2

                  app_uart_pro PROC
;;;352    
;;;353    void app_uart_pro(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;354    	uint8_t ucData = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;355    
;;;356    #if 1
;;;357    	while (1) {
;;;358    
;;;359    		if (comGetChar(COM1, &ucData)) {
;;;360    #if 0
;;;361    			comSendChar(COM0, ucData);
;;;362    #endif
;;;363    
;;;364    			uart_st.rxBuf[uart_st.pWrite++] = ucData;
000008  4f2a              LDR      r7,|L3.180|
00000a  2003              MOVS     r0,#3
00000c  0200              LSLS     r0,r0,#8
00000e  183c              ADDS     r4,r7,r0
                  |L3.16|
000010  4669              MOV      r1,sp                 ;359
000012  2001              MOVS     r0,#1                 ;359
000014  f7fffffe          BL       comGetChar
000018  2800              CMP      r0,#0                 ;359
00001a  d04a              BEQ      |L3.178|
00001c  4668              MOV      r0,sp
00001e  8821              LDRH     r1,[r4,#0]  ; uart_st
000020  7800              LDRB     r0,[r0,#0]
000022  5478              STRB     r0,[r7,r1]
000024  8820              LDRH     r0,[r4,#0]  ; uart_st
;;;365    			if (uart_st.pWrite >= sizeof(uart_st.rxBuf)) {
000026  2301              MOVS     r3,#1
000028  1c40              ADDS     r0,r0,#1              ;364
00002a  b280              UXTH     r0,r0                 ;364
00002c  025b              LSLS     r3,r3,#9
00002e  8020              STRH     r0,[r4,#0]            ;364
000030  4298              CMP      r0,r3
000032  d301              BCC      |L3.56|
;;;366    				uart_st.pWrite = 0;
000034  2000              MOVS     r0,#0
000036  8020              STRH     r0,[r4,#0]
                  |L3.56|
;;;367    			}
;;;368    
;;;369    			/*
;;;370    			 (0x55,0xAA)...0x00......0x00...0x00,0x00...0x00
;;;371    			 Head..........Length....cmd....Data........crc8()
;;;372    			 */
;;;373    			if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
000038  8862              LDRH     r2,[r4,#2]  ; uart_st
00003a  b280              UXTH     r0,r0
00003c  1a80              SUBS     r0,r0,r2
00003e  05c0              LSLS     r0,r0,#23
000040  0dc0              LSRS     r0,r0,#23
000042  2805              CMP      r0,#5
000044  d9e4              BLS      |L3.16|
;;;374    					% sizeof(uart_st.rxBuf) > 5) {
;;;375    				if (((uart_st.rxBuf[uart_st.pRead]) == 0x55)
000046  5cb9              LDRB     r1,[r7,r2]
000048  2955              CMP      r1,#0x55
00004a  d105              BNE      |L3.88|
;;;376    						&& ((uart_st.rxBuf[(uart_st.pRead + 1)
00004c  1c51              ADDS     r1,r2,#1
00004e  05c9              LSLS     r1,r1,#23
000050  0dc9              LSRS     r1,r1,#23
000052  5c79              LDRB     r1,[r7,r1]
000054  29aa              CMP      r1,#0xaa
000056  d006              BEQ      |L3.102|
                  |L3.88|
000058  1c52              ADDS     r2,r2,#1
;;;377    								% sizeof(uart_st.rxBuf)]) == 0xAA)) {
;;;378    					uint8_t len = uart_st.rxBuf[(uart_st.pRead + 2)
;;;379    							% sizeof(uart_st.rxBuf)];
;;;380    					if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
;;;381    							% sizeof(uart_st.rxBuf) >= (len + 4)) {
;;;382    						if (uart_st.rxBuf[(uart_st.pRead + len + 3)
;;;383    								% sizeof(uart_st.rxBuf)]
;;;384    								!= app_CalcCRC8_cycle(
;;;385    										uart_st.rxBuf + uart_st.pRead, len + 3,
;;;386    										uart_st.pRead, sizeof(uart_st.rxBuf))) {
;;;387    							uart_st.pRead++;
;;;388    							log_err(
;;;389    									"[ERROR]   remote control check error!\r\n");
;;;390    						} else {
;;;391    							/* your code */
;;;392    							app_RC_Receiver_cmd_pro(&uart_st);
;;;393    							uart_st.pRead += len + 4;
;;;394    							uart_st.pRead = uart_st.pRead
;;;395    									% sizeof(uart_st.rxBuf);
;;;396    						}
;;;397    					}
;;;398    				} else {
;;;399    					uart_st.pRead++;
00005a  8062              STRH     r2,[r4,#2]
                  |L3.92|
;;;400    				}
;;;401    				uart_st.pRead = uart_st.pRead % sizeof(uart_st.rxBuf);
00005c  8860              LDRH     r0,[r4,#2]  ; uart_st
00005e  05c0              LSLS     r0,r0,#23
000060  0dc0              LSRS     r0,r0,#23
000062  8060              STRH     r0,[r4,#2]
000064  e7d4              B        |L3.16|
                  |L3.102|
000066  1c91              ADDS     r1,r2,#2              ;378
000068  05c9              LSLS     r1,r1,#23             ;378
00006a  0dc9              LSRS     r1,r1,#23             ;378
00006c  5c7d              LDRB     r5,[r7,r1]            ;378
00006e  1d2e              ADDS     r6,r5,#4              ;380
000070  42b0              CMP      r0,r6                 ;380
000072  d3f3              BCC      |L3.92|
000074  19d0              ADDS     r0,r2,r7              ;382
000076  1ce9              ADDS     r1,r5,#3              ;382
000078  f7fffffe          BL       app_CalcCRC8_cycle
00007c  8861              LDRH     r1,[r4,#2]            ;382  ; uart_st
00007e  1ced              ADDS     r5,r5,#3              ;382
000080  194a              ADDS     r2,r1,r5              ;382
000082  05d2              LSLS     r2,r2,#23             ;382
000084  0dd2              LSRS     r2,r2,#23             ;382
000086  5cba              LDRB     r2,[r7,r2]            ;382
000088  4290              CMP      r0,r2                 ;382
00008a  d009              BEQ      |L3.160|
00008c  1c49              ADDS     r1,r1,#1              ;382
00008e  8061              STRH     r1,[r4,#2]            ;387
000090  21ff              MOVS     r1,#0xff              ;388
000092  a309              ADR      r3,|L3.184|
000094  2202              MOVS     r2,#2                 ;388
000096  3185              ADDS     r1,r1,#0x85           ;388
000098  4811              LDR      r0,|L3.224|
00009a  f7fffffe          BL       LITE_syslog
00009e  e7dd              B        |L3.92|
                  |L3.160|
0000a0  4804              LDR      r0,|L3.180|
0000a2  f7fffffe          BL       app_RC_Receiver_cmd_pro
0000a6  8860              LDRH     r0,[r4,#2]            ;393  ; uart_st
0000a8  1980              ADDS     r0,r0,r6              ;393
0000aa  05c0              LSLS     r0,r0,#23             ;394
0000ac  0dc0              LSRS     r0,r0,#23             ;394
0000ae  8060              STRH     r0,[r4,#2]            ;394
0000b0  e7d4              B        |L3.92|
                  |L3.178|
;;;402    			}
;;;403    			continue;
;;;404    		}
;;;405    		break;
;;;406    
;;;407    	}
;;;408    #else
;;;409    	while (riflag) {
;;;410    		riflag--;
;;;411    		if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE >= 4) {
;;;412    			if (((st.rxBuf[st.pRead]) == 0x55)
;;;413    					&& ((st.rxBuf[(st.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
;;;414    				len = st.rxBuf[(st.pRead + 2) % RCV_BUFSIZE];
;;;415    				if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE
;;;416    						>= (len + 4)) {
;;;417    					if (st.rxBuf[(st.pRead + len + 3) % RCV_BUFSIZE]
;;;418    							!= app_CalcCRC8_cycle(st.rxBuf + st.pRead,
;;;419    									len + 3, st.pRead, RCV_BUFSIZE)) {
;;;420    						st.pRead++;
;;;421    					} else {
;;;422    						uint8_t index = 0;
;;;423    						memset(sendBuf, 0, PAYLOAD_WIDTH);
;;;424    						switch (st.rxBuf[(st.pRead + 3) % RCV_BUFSIZE]) {
;;;425    							case BLINK_METHOD_CMD:  //闪法
;;;426    							{
;;;427    								uint8_t i = 0;
;;;428    								uint16_t index = 0;
;;;429    								index =
;;;430    								st.rxBuf[(st.pRead + 12) % RCV_BUFSIZE];
;;;431    
;;;432    								if (index
;;;433    										>= ((FMC_APROM_END - DOME_START_ADDR)
;;;434    												/ sizeof(DOME_DEFAULT_T) - 1)) {
;;;435    									break;
;;;436    								}
;;;437    								FMC_ENABLE_AP_UPDATE();
;;;438    								SYS_UnlockReg();
;;;439    								FMC_Open();
;;;440    
;;;441    								if (index == 0) {
;;;442    									u8_tmp = (FMC_APROM_END - DOME_START_ADDR)
;;;443    									/ FMC_FLASH_PAGE_SIZE;
;;;444    									for (i = 0; i < u8_tmp; i++) {
;;;445    										app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;446    									}
;;;447    								}
;;;448    #if 0
;;;449    								for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;450    									uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;451    									+ (&dome_blink.header.index
;;;452    											- &dome_blink);
;;;453    									app_eeprom_write_byte(addr, 0);
;;;454    									nop
;;;455    								}
;;;456    #endif
;;;457    #if 1
;;;458    								tmp = st.rxBuf[(st.pRead + 13) % RCV_BUFSIZE]
;;;459    								& 0x0F;  //sub mode number
;;;460    
;;;461    								uint8_t n = (tmp * sizeof(SUBDOME_T)
;;;462    										+ sizeof(DOME_HEADER_T));
;;;463    								uint8_t minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;464    								if (minSpaceBytes % 4) {
;;;465    									minSpaceBytes++;
;;;466    								}
;;;467    
;;;468    								for (i = 0; i < (n / 4); i++) {
;;;469    									uint32_t addr = index * minSpaceBytes + i * 4;
;;;470    									uint32_t dt = st.rxBuf[(st.pRead + 4 + i)
;;;471    									% RCV_BUFSIZE];
;;;472    									dt |= st.rxBuf[(st.pRead + 4 + i + 1)
;;;473    									% RCV_BUFSIZE] << 8;
;;;474    									dt |= st.rxBuf[(st.pRead + 4 + i + 2)
;;;475    									% RCV_BUFSIZE] << 16;
;;;476    									dt |= st.rxBuf[(st.pRead + 4 + i + 3)
;;;477    									% RCV_BUFSIZE] << 24;
;;;478    									app_eeprom_write_int(addr, dt);
;;;479    								}
;;;480    								for (i = 0; i < (n % 4); i++) {
;;;481    									uint32_t addr = index * minSpaceBytes + n / 4
;;;482    									+ 4;
;;;483    									uint32_t dt = 0;
;;;484    									switch (i) {
;;;485    										case 0:
;;;486    										dt = st.rxBuf[(st.pRead + 4 + n / 4)
;;;487    										% RCV_BUFSIZE];
;;;488    										break;
;;;489    										case 1:
;;;490    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;491    												+ i) % RCV_BUFSIZE] << 8;
;;;492    										break;
;;;493    										case 2:
;;;494    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;495    												+ i) % RCV_BUFSIZE] << 16;
;;;496    										break;
;;;497    										case 3:
;;;498    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;499    												+ i) % RCV_BUFSIZE] << 24;
;;;500    										break;
;;;501    									}
;;;502    									app_eeprom_write_int(addr, dt);
;;;503    								}
;;;504    
;;;505    								FMC_Close();
;;;506    								SYS_LockReg();
;;;507    								FMC_DISABLE_AP_UPDATE();
;;;508    #endif
;;;509    								u8_tmp = index & 0xFF;
;;;510    								app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;511    							}
;;;512    							break;
;;;513    							case RCV_VOL_CMD:
;;;514    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;515    							sendBuf[index++] = len;
;;;516    							sendBuf[index++] = RCV_VOL_CMD;
;;;517    							for (i = 0; i < (len - 1); i++) {
;;;518    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;519    										+ i) % RCV_BUFSIZE];
;;;520    							}
;;;521    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;522    								sendBuf[index] += sendBuf[i + 1];
;;;523    							}
;;;524    							index++;
;;;525    							app_2d4_send(sendBuf, index);
;;;526    							break;
;;;527    							case RCV_POWER_STATUS_CMD:
;;;528    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;529    							sendBuf[index++] = len;
;;;530    							sendBuf[index++] = RCV_POWER_STATUS_CMD;
;;;531    							for (i = 0; i < (len - 1); i++) {
;;;532    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;533    										+ i) % RCV_BUFSIZE];
;;;534    							}
;;;535    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;536    								sendBuf[index] += sendBuf[i + 1];
;;;537    							}
;;;538    							index++;
;;;539    							app_2d4_send(sendBuf, index);
;;;540    							break;
;;;541    #if 0
;;;542    							case RCV_X_BOX_STATUS_CMD:
;;;543    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;544    							sendBuf[index++] = len;
;;;545    							sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
;;;546    							for (i = 0; i < (len - 1); i++) {
;;;547    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;548    										+ i) % RCV_BUFSIZE];
;;;549    							}
;;;550    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;551    								sendBuf[index] += sendBuf[i + 1];
;;;552    							}
;;;553    							index++;
;;;554    							app_2d4_send(sendBuf, index);
;;;555    							break;
;;;556    #endif
;;;557    							case RCV_BT_STATUS_CMD:
;;;558    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;559    							sendBuf[index++] = len;
;;;560    							sendBuf[index++] = RCV_BT_STATUS_CMD;
;;;561    							for (i = 0; i < (len - 1); i++) {
;;;562    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;563    										+ i) % RCV_BUFSIZE];
;;;564    							}
;;;565    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;566    								sendBuf[index] += sendBuf[i + 1];
;;;567    							}
;;;568    							index++;
;;;569    							if (g_tWork.status.bits.DOME == 0) {
;;;570    								app_2d4_send(sendBuf, index);
;;;571    							}
;;;572    							break;
;;;573    							case RCV_PREV_NEXT_CMD:
;;;574    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;575    							sendBuf[index++] = len;
;;;576    							sendBuf[index++] = RCV_PREV_NEXT_CMD;
;;;577    							for (i = 0; i < (len - 1); i++) {
;;;578    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;579    										+ i) % RCV_BUFSIZE];
;;;580    							}
;;;581    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;582    								sendBuf[index] += sendBuf[i + 1];
;;;583    							}
;;;584    							index++;
;;;585    							if (g_tWork.status.bits.DOME == 0) {
;;;586    								app_2d4_send(sendBuf, index);
;;;587    							}
;;;588    							break;
;;;589    							case RCV_USB_PLAY_TIME_CMD:
;;;590    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;591    							sendBuf[index++] = len;
;;;592    							sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
;;;593    							for (i = 0; i < (len - 1); i++) {
;;;594    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;595    										+ i) % RCV_BUFSIZE];
;;;596    							}
;;;597    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;598    								sendBuf[index] += sendBuf[i + 1];
;;;599    							}
;;;600    							index++;
;;;601    							if (g_tWork.status.bits.DOME == 0) {
;;;602    								app_2d4_send(sendBuf, index);
;;;603    							}
;;;604    							break;
;;;605    							case RCV_FM_HZ_CMD:
;;;606    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;607    							sendBuf[index++] = len;
;;;608    							sendBuf[index++] = RCV_FM_HZ_CMD;
;;;609    							for (i = 0; i < (len - 1); i++) {
;;;610    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;611    										+ i) % RCV_BUFSIZE];
;;;612    							}
;;;613    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;614    								sendBuf[index] += sendBuf[i + 1];
;;;615    							}
;;;616    							index++;
;;;617    
;;;618    							if (g_tWork.status.bits.DOME == 0) {
;;;619    								app_2d4_send(sendBuf, index);
;;;620    							}
;;;621    							break;
;;;622    							case MODE_CHANGE_CMD:   //MODE
;;;623    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;624    							sendBuf[index++] = len;
;;;625    							sendBuf[index++] = MODE_CHANGE_CMD;
;;;626    							for (i = 0; i < (len - 1); i++) {
;;;627    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;628    										+ i) % RCV_BUFSIZE];
;;;629    							}
;;;630    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;631    								sendBuf[index] += sendBuf[i + 1];
;;;632    							}
;;;633    							index++;
;;;634    							app_2d4_send(sendBuf, index);
;;;635    							break;
;;;636    							case RCV_PLAY_PAUSE_STATUS_CMD:
;;;637    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;638    							sendBuf[index++] = len;
;;;639    							sendBuf[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
;;;640    							for (i = 0; i < (len - 1); i++) {
;;;641    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;642    										+ i) % RCV_BUFSIZE];
;;;643    							}
;;;644    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;645    								sendBuf[index] += sendBuf[i + 1];
;;;646    							}
;;;647    							index++;
;;;648    							if (g_tWork.status.bits.DOME == 0) {
;;;649    								app_2d4_send(sendBuf, index);
;;;650    							}
;;;651    							break;
;;;652    							/// app --start
;;;653    							case KEY_CARD_POWER_CMD:
;;;654    							if (g_tWork.status.bits.blinkEnable == 0) {
;;;655    //								g_tWork.status.bits.pause = 0;
;;;656    								g_tWork.status.bits.blinkEnable = 1;
;;;657    								g_tWork.status.bits.DEMO = 1;
;;;658    								app_dome_start_current();
;;;659    							} else {
;;;660    //								g_tWork.status.bits.pause = 1;
;;;661    								g_tWork.status.bits.blinkEnable = 0;
;;;662    								g_tWork.status.bits.DEMO = 0;
;;;663    								app_dome_stop_current();
;;;664    							}
;;;665    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;666    							sendBuf[index++] = 10;
;;;667    							sendBuf[index++] = KEY_POWER_SHORT_CMD;
;;;668    							sendBuf[index++] = g_tWork.status.bits.blinkEnable;
;;;669    							app_dome_get_current_Name(sendBuf + index, 8);
;;;670    							index += 8;
;;;671    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;672    								sendBuf[index] += sendBuf[i + 1];
;;;673    							}
;;;674    							index++;
;;;675    							app_2d4_send(sendBuf, index);
;;;676    							break;
;;;677    							case KEY_CARD_DEMO_CMD:
;;;678    //							if (g_tWork.status.bits.DEMO) {
;;;679    //								g_tWork.status.bits.DEMO = 0;
;;;680    //							} else {
;;;681    							g_tWork.status.bits.DEMO = 1;
;;;682    //							}
;;;683    							app_dome_start(0, 0);
;;;684    
;;;685    							break;
;;;686    							case APP_COLOR_ATLA_CMD:
;;;687    #if 1
;;;688    							app_dome_rgb(
;;;689    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;690    									st.rxBuf[(st.pRead + 5) % RCV_BUFSIZE],
;;;691    									st.rxBuf[(st.pRead + 6) % RCV_BUFSIZE]);
;;;692    #else
;;;693    							app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;694    #endif
;;;695    							break;
;;;696    							case APP_BRIGHT_CMD:
;;;697    							dome_running_param.bright = st.rxBuf[(st.pRead
;;;698    									+ 4) % RCV_BUFSIZE];
;;;699    							Light_bright_set(
;;;700    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE]);
;;;701    							break;
;;;702    							case APP_SPEED_CMD:
;;;703    							dome_running_param.speed = st.rxBuf[(st.pRead
;;;704    									+ 4) % RCV_BUFSIZE];
;;;705    							break;
;;;706    							case APP_FLASH_INDEX_CMD:
;;;707    							g_tWork.status.bits.DEMO = 0;
;;;708    							app_dome_start_current();
;;;709    							app_dome_start(
;;;710    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;711    									0);
;;;712    							break;
;;;713    							case APP_SWITCH_INDEX_CMD: {
;;;714    								uint8_t switchData = st.rxBuf[(st.pRead + 4)
;;;715    								% RCV_BUFSIZE];
;;;716    								if (((switchData >> 4) & 0x0F) == 0) {
;;;717    									Relay_set(switchData & 0x0F);
;;;718    								}
;;;719    							}
;;;720    							break;
;;;721    							/// app --end
;;;722    							default:
;;;723    							break;
;;;724    						}
;;;725    						st.pRead += len + 4;
;;;726    #if 1
;;;727    						st.pRead = st.pRead % RCV_BUFSIZE;
;;;728    //						break;
;;;729    						return;
;;;730    #endif
;;;731    					}
;;;732    				}
;;;733    			} else {
;;;734    				st.pRead++;
;;;735    			}
;;;736    			st.pRead = st.pRead % RCV_BUFSIZE;
;;;737    		}
;;;738    	}
;;;739    #endif
;;;740    }
0000b2  bdf8              POP      {r3-r7,pc}
                          ENDP

                  |L3.180|
                          DCD      ||.bss||
                  |L3.184|
0000b8  5b455252          DCB      "[ERROR]   remote control check error!\r\n",0
0000bc  4f525d20
0000c0  20207265
0000c4  6d6f7465
0000c8  20636f6e
0000cc  74726f6c
0000d0  20636865
0000d4  636b2065
0000d8  72726f72
0000dc  210d0a00
                  |L3.224|
                          DCD      ||.constdata||

                          AREA ||i.app_uart_send||, CODE, READONLY, ALIGN=2

                  app_uart_send PROC
;;;32     
;;;33     void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  4604              MOV      r4,r0
000004  b082              SUB      sp,sp,#8
;;;34     	uint8_t index = 0, i = 0;
;;;35     
;;;36     	memset(uart_st.txBuf, 0, sizeof(uart_st.txBuf));
000006  21ff              MOVS     r1,#0xff
000008  481a              LDR      r0,|L4.116|
00000a  4616              MOV      r6,r2                 ;33
00000c  2500              MOVS     r5,#0                 ;34
00000e  3101              ADDS     r1,#1
000010  9000              STR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_memclr
;;;37     
;;;38     	uart_st.txBuf[index++] = 0x55;
000016  9800              LDR      r0,[sp,#0]
000018  2155              MOVS     r1,#0x55
00001a  7001              STRB     r1,[r0,#0]
;;;39     	uart_st.txBuf[index++] = 0xAA;
00001c  4815              LDR      r0,|L4.116|
00001e  21aa              MOVS     r1,#0xaa
000020  1c40              ADDS     r0,r0,#1
000022  7001              STRB     r1,[r0,#0]
;;;40     	uart_st.txBuf[index++] = len + 1;
000024  4913              LDR      r1,|L4.116|
000026  1c70              ADDS     r0,r6,#1
000028  1c89              ADDS     r1,r1,#2
00002a  7008              STRB     r0,[r1,#0]
;;;41     	uart_st.txBuf[index++] = cmd;
00002c  1c48              ADDS     r0,r1,#1
00002e  7004              STRB     r4,[r0,#0]
000030  4f11              LDR      r7,|L4.120|
000032  2404              MOVS     r4,#4
;;;42     	for (i = 0; i < len; i++) {
000034  e00a              B        |L4.76|
                  |L4.54|
;;;43     		uart_st.txBuf[index++] = *(ptr + i);
000036  9803              LDR      r0,[sp,#0xc]
000038  5d41              LDRB     r1,[r0,r5]
00003a  1938              ADDS     r0,r7,r4
00003c  30ff              ADDS     r0,r0,#0xff
00003e  30ff              ADDS     r0,r0,#0xff
000040  3002              ADDS     r0,#2
000042  1c64              ADDS     r4,r4,#1
000044  1c6d              ADDS     r5,r5,#1
000046  7001              STRB     r1,[r0,#0]
000048  b2e4              UXTB     r4,r4
00004a  b2ed              UXTB     r5,r5                 ;42
                  |L4.76|
00004c  42b5              CMP      r5,r6                 ;42
00004e  d3f2              BCC      |L4.54|
000050  1d36              ADDS     r6,r6,#4              ;42
;;;44     	}
;;;45     	uart_st.txBuf[index++] = app_CalcCRC8(uart_st.txBuf, len + 4);
000052  b2f1              UXTB     r1,r6
000054  9800              LDR      r0,[sp,#0]
000056  f7fffffe          BL       app_CalcCRC8
00005a  1939              ADDS     r1,r7,r4
00005c  31ff              ADDS     r1,r1,#0xff
00005e  31ff              ADDS     r1,r1,#0xff
000060  3102              ADDS     r1,#2
000062  7008              STRB     r0,[r1,#0]
000064  1c64              ADDS     r4,r4,#1
000066  b2e2              UXTB     r2,r4
;;;46     	comSendBuf(COM1, uart_st.txBuf, index);
000068  2001              MOVS     r0,#1
00006a  9900              LDR      r1,[sp,#0]
00006c  f7fffffe          BL       comSendBuf
;;;47     
;;;48     //	for (i = 0; i < (len + 5); i++) {
;;;49     //		comSendChar(uart_st.txBuf[i]);
;;;50     //	}
;;;51     }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
;;;52     
                          ENDP

                  |L4.116|
                          DCD      ||.bss||+0x200
                  |L4.120|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  uart_st
                          %        772

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6170705f          DCB      0x61,0x70,0x70,0x5f
000004  75617274          DCB      0x75,0x61,0x72,0x74
000008  5f70726f          DCB      0x5f,0x70,0x72,0x6f
00000c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  len
000000  00                DCB      0x00
                  u8_tmp
000001  00                DCB      0x00
                  tmp
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_uart_c_fe162fbd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REVSH|
#line 402
|__asm___10_app_uart_c_fe162fbd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
