; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\app_uart.crf ..\App\src\app_uart.c]
                          THUMB

                          AREA ||i.app_RC_Receiver_cmd_pro||, CODE, READONLY, ALIGN=2

                  app_RC_Receiver_cmd_pro PROC
;;;52     
;;;53     static void app_RC_Receiver_cmd_pro(Uart_ST* st) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;54     
;;;55     	uint8_t index = 0;
;;;56     	uint8_t i = 0;
000004  2600              MOVS     r6,#0
000006  4604              MOV      r4,r0                 ;53
;;;57     	uint8_t buffer[PAYLOAD_WIDTH] = { 0 };
000008  9600              STR      r6,[sp,#0]
00000a  9601              STR      r6,[sp,#4]
00000c  9602              STR      r6,[sp,#8]
;;;58     
;;;59     	switch (st->rxBuf[(st->pRead + 3) % sizeof(st->rxBuf)]) {
00000e  2003              MOVS     r0,#3
000010  9603              STR      r6,[sp,#0xc]
000012  0200              LSLS     r0,r0,#8
000014  1825              ADDS     r5,r4,r0
000016  886b              LDRH     r3,[r5,#2]
000018  49fe              LDR      r1,|L1.1044|
00001a  1cd8              ADDS     r0,r3,#3
;;;60     	case BLINK_METHOD_CMD:  //闪法
;;;61     	{
;;;62     //		break;
;;;63     		uint8_t index = st->rxBuf[(st->pRead + 12) % sizeof(st->rxBuf)];
;;;64     		uint8_t availableGroup = 0;
;;;65     		uint8_t minSpaceBytes = 0;
;;;66     		uint8_t bytes = 0;
;;;67     		if (sizeof(DOME_DEFAULT_T) % 4) {
;;;68     			minSpaceBytes = (sizeof(DOME_DEFAULT_T) / 4) * 4 + 4;
;;;69     		} else {
;;;70     			minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;71     		}
;;;72     		availableGroup = (FMC_APROM_END - DOME_START_ADDR) / minSpaceBytes;
;;;73     
;;;74     		if (index > (availableGroup - 1)) {
;;;75     			break;
;;;76     		}
;;;77     		FMC_ENABLE_AP_UPDATE();
;;;78     		SYS_UnlockReg();
;;;79     		FMC_Open();
;;;80     
;;;81     		if (index == 0) {
;;;82     			u8_tmp = (FMC_APROM_END - DOME_START_ADDR) / FMC_FLASH_PAGE_SIZE;
;;;83     			for (i = 0; i < u8_tmp; i++) {
;;;84     				app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;85     			}
;;;86     		}
;;;87     #if 0
;;;88     		for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;89     			uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;90     			+ (&dome_blink.header.index
;;;91     					- &dome_blink);
;;;92     			app_eeprom_write_byte(addr, 0);
;;;93     			nop
;;;94     		}
;;;95     #endif
;;;96     #if 1
;;;97     		tmp = st->rxBuf[(st->pRead + 13) % sizeof(st->rxBuf)] & 0x0F; //sub mode number
;;;98     
;;;99     		bytes = tmp * sizeof(SUBDOME_T) + sizeof(DOME_HEADER_T);
;;;100    
;;;101    //		if (minSpaceBytes % 4) {
;;;102    //			minSpaceBytes++;
;;;103    //		}
;;;104    
;;;105    		for (i = 0; i < (bytes / 4); i++) {
;;;106    			uint32_t addr = index * minSpaceBytes + i * 4;
;;;107    			uint32_t dt = st->rxBuf[(st->pRead + 4 + i * 4) % sizeof(st->rxBuf)];
;;;108    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 1) % sizeof(st->rxBuf)]
;;;109    					<< 8;
;;;110    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 2) % sizeof(st->rxBuf)]
;;;111    					<< 16;
;;;112    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 3) % sizeof(st->rxBuf)]
;;;113    					<< 24;
;;;114    			app_eeprom_write_int(addr, dt);
;;;115    		}
;;;116    		if (bytes % 4) {
;;;117    			uint32_t addr = index * minSpaceBytes + (bytes / 4) * 4;
;;;118    			uint32_t dt = 0;
;;;119    			for (i = 0; i < (bytes % 4); i++) {
;;;120    				switch (i) {
;;;121    				case 0:
;;;122    					dt = st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4)
;;;123    							% sizeof(st->rxBuf)];
;;;124    					break;
;;;125    				case 1:
;;;126    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;127    							% sizeof(st->rxBuf)] << 8;
;;;128    					break;
;;;129    				case 2:
;;;130    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;131    							% sizeof(st->rxBuf)] << 16;
;;;132    					break;
;;;133    				}
;;;134    			}
;;;135    			app_eeprom_write_int(addr, dt);
;;;136    		}
;;;137    
;;;138    		FMC_Close();
;;;139    		SYS_LockReg();
;;;140    		FMC_DISABLE_AP_UPDATE();
;;;141    #endif
;;;142    		u8_tmp = index & 0xFF;
;;;143    		app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;144    	}
;;;145    		break;
;;;146    	case RCV_VOL_CMD:
;;;147    		buffer[index++] = LAMP2LCD_HEADER;
;;;148    		buffer[index++] = len;
00001c  780f              LDRB     r7,[r1,#0]
00001e  05c0              LSLS     r0,r0,#23             ;59
000020  0dc0              LSRS     r0,r0,#23             ;59
;;;149    		buffer[index++] = RCV_VOL_CMD;
;;;150    		for (i = 0; i < (len - 1); i++) {
000022  49fd              LDR      r1,|L1.1048|
000024  5c20              LDRB     r0,[r4,r0]            ;59
000026  1e7a              SUBS     r2,r7,#1
;;;151    			buffer[index++] =
;;;152    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;153    		}
;;;154    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;155    			buffer[index] += buffer[i + 1];
;;;156    		}
;;;157    		index++;
;;;158    		app_2d4_send(buffer, index);
;;;159    		break;
;;;160    	case RCV_POWER_STATUS_CMD:
;;;161    		buffer[index++] = LAMP2LCD_HEADER;
;;;162    		buffer[index++] = len;
;;;163    		buffer[index++] = RCV_POWER_STATUS_CMD;
;;;164    		for (i = 0; i < (len - 1); i++) {
;;;165    			buffer[index++] =
;;;166    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;167    		}
;;;168    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;169    			buffer[index] += buffer[i + 1];
;;;170    		}
;;;171    		index++;
;;;172    		app_2d4_send(buffer, index);
;;;173    		break;
;;;174    #if 0
;;;175    		case RCV_X_BOX_STATUS_CMD:
;;;176    		buffer[index++] = LAMP2LCD_HEADER;
;;;177    		buffer[index++] = len;
;;;178    		buffer[index++] = RCV_X_BOX_STATUS_CMD;
;;;179    		for (i = 0; i < (len - 1); i++) {
;;;180    			buffer[index++] = st->rxBuf[(st->pRead + 4
;;;181    					+ i) % sizeof(st->rxBuf)];
;;;182    		}
;;;183    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;184    			buffer[index] += buffer[i + 1];
;;;185    		}
;;;186    		index++;
;;;187    		app_2d4_send(buffer, index);
;;;188    		break;
;;;189    #endif
;;;190    	case RCV_BT_STATUS_CMD:
;;;191    		g_tWork.device_mode = BT_MODE;
;;;192    		if (g_tWork.status.bits.DOME) {
000028  6849              LDR      r1,[r1,#4]
00002a  2841              CMP      r0,#0x41              ;59
00002c  d07e              BEQ      |L1.300|
00002e  dc28              BGT      |L1.130|
000030  2835              CMP      r0,#0x35              ;59
000032  d07c              BEQ      |L1.302|
000034  dc17              BGT      |L1.102|
000036  2812              CMP      r0,#0x12              ;59
000038  d061              BEQ      |L1.254|
00003a  2831              CMP      r0,#0x31              ;59
00003c  d078              BEQ      |L1.304|
00003e  2833              CMP      r0,#0x33              ;59
000040  d077              BEQ      |L1.306|
000042  2834              CMP      r0,#0x34              ;59
000044  d135              BNE      |L1.178|
000046  1d1b              ADDS     r3,r3,#4              ;59
;;;193    			break;
;;;194    		}
;;;195    		buffer[index++] = LAMP2LCD_HEADER;
;;;196    		buffer[index++] = len;
;;;197    		buffer[index++] = RCV_BT_STATUS_CMD;
;;;198    		for (i = 0; i < (len - 1); i++) {
;;;199    			buffer[index++] =
;;;200    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;201    		}
;;;202    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;203    			buffer[index] += buffer[i + 1];
;;;204    		}
;;;205    		index++;
;;;206    		app_2d4_send(buffer, index);
;;;207    		break;
;;;208    	case RCV_PREV_NEXT_CMD:
;;;209    		if (g_tWork.status.bits.DOME) {
;;;210    			break;
;;;211    		}
;;;212    		buffer[index++] = LAMP2LCD_HEADER;
;;;213    		buffer[index++] = len;
;;;214    		buffer[index++] = RCV_PREV_NEXT_CMD;
;;;215    		for (i = 0; i < (len - 1); i++) {
;;;216    			buffer[index++] =
;;;217    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;218    		}
;;;219    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;220    			buffer[index] += buffer[i + 1];
;;;221    		}
;;;222    		index++;
;;;223    		app_2d4_send(buffer, index);
;;;224    		break;
;;;225    	case RCV_USB_PLAY_TIME_CMD:
;;;226    		g_tWork.device_mode = USB_MODE;
;;;227    		if (g_tWork.status.bits.DOME) {
;;;228    			break;
;;;229    		}
;;;230    		buffer[index++] = LAMP2LCD_HEADER;
;;;231    		buffer[index++] = len;
;;;232    		buffer[index++] = RCV_USB_PLAY_TIME_CMD;
;;;233    		for (i = 0; i < (len - 1); i++) {
;;;234    			buffer[index++] =
;;;235    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;236    		}
;;;237    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;238    			buffer[index] += buffer[i + 1];
;;;239    		}
;;;240    		index++;
;;;241    		app_2d4_send(buffer, index);
;;;242    		break;
;;;243    	case RCV_FM_HZ_CMD:
;;;244    		g_tWork.device_mode = FM_MODE;
;;;245    		if (g_tWork.status.bits.DOME) {
;;;246    			break;
;;;247    		}
;;;248    		buffer[index++] = LAMP2LCD_HEADER;
;;;249    		buffer[index++] = len;
;;;250    		buffer[index++] = RCV_FM_HZ_CMD;
;;;251    		for (i = 0; i < (len - 1); i++) {
;;;252    			buffer[index++] =
;;;253    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;254    		}
;;;255    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;256    			buffer[index] += buffer[i + 1];
;;;257    		}
;;;258    		index++;
;;;259    		app_2d4_send(buffer, index);
;;;260    		break;
;;;261    	case MODE_CHANGE_CMD:   //MODE
;;;262    		buffer[index++] = LAMP2LCD_HEADER;
;;;263    		buffer[index++] = len;
;;;264    		buffer[index++] = MODE_CHANGE_CMD;
;;;265    		for (i = 0; i < (len - 1); i++) {
;;;266    			buffer[index++] =
;;;267    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;268    		}
;;;269    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;270    			buffer[index] += buffer[i + 1];
;;;271    		}
;;;272    		index++;
;;;273    		app_2d4_send(buffer, index);
;;;274    		break;
;;;275    	case RCV_PLAY_PAUSE_STATUS_CMD:
;;;276    		g_tWork.device_mode = st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
000048  05d8              LSLS     r0,r3,#23
00004a  0dc0              LSRS     r0,r0,#23
00004c  5c23              LDRB     r3,[r4,r0]
00004e  48f2              LDR      r0,|L1.1048|
000050  7003              STRB     r3,[r0,#0]
;;;277    		if (g_tWork.status.bits.DOME) {
000052  07c8              LSLS     r0,r1,#31
000054  d12d              BNE      |L1.178|
;;;278    			break;
;;;279    		}
;;;280    		buffer[index++] = LAMP2LCD_HEADER;
000056  20f8              MOVS     r0,#0xf8
000058  466b              MOV      r3,sp
00005a  7018              STRB     r0,[r3,#0]
;;;281    		buffer[index++] = len;
00005c  705f              STRB     r7,[r3,#1]
;;;282    		buffer[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
00005e  2034              MOVS     r0,#0x34
000060  7098              STRB     r0,[r3,#2]
000062  2003              MOVS     r0,#3
;;;283    		for (i = 0; i < (len - 1); i++) {
000064  e21a              B        |L1.1180|
                  |L1.102|
000066  2836              CMP      r0,#0x36              ;59
000068  d07e              BEQ      |L1.360|
00006a  2837              CMP      r0,#0x37              ;59
00006c  d07d              BEQ      |L1.362|
00006e  2838              CMP      r0,#0x38              ;59
000070  d11f              BNE      |L1.178|
000072  20f8              MOVS     r0,#0xf8              ;147
000074  466b              MOV      r3,sp                 ;147
000076  7018              STRB     r0,[r3,#0]            ;147
000078  705f              STRB     r7,[r3,#1]            ;148
00007a  2038              MOVS     r0,#0x38              ;149
00007c  7098              STRB     r0,[r3,#2]            ;149
00007e  2003              MOVS     r0,#3                 ;149
000080  e0ff              B        |L1.642|
                  |L1.130|
000082  4de5              LDR      r5,|L1.1048|
;;;284    			buffer[index++] =
;;;285    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;286    		}
;;;287    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;288    			buffer[index] += buffer[i + 1];
;;;289    		}
;;;290    		index++;
;;;291    		app_2d4_send(buffer, index);
;;;292    		break;
;;;293    	case DEVICE_STA_CMD: {
;;;294    		uint8_t sta[2] = { 0 };
;;;295    		memset(sta, 0, sizeof(sta));
;;;296    		sta[0] |= g_tWork.status.bits.blinkEnable ? 0x80 : 0;
;;;297    		sta[0] |= g_tWork.status.bits.DEMO ? 0x40 : 0;
;;;298    		sta[1] |= Relay_IsOn() ? 0x01 : 0;
;;;299    		app_uart_send(DEVICE_STA_CMD, sta, sizeof(sta));
;;;300    	}
;;;301    		break;
;;;302    		/// app --start
;;;303    	case KEY_CARD_POWER_CMD:
;;;304    		if (g_tWork.status.bits.blinkEnable == 0) {
;;;305    			//								g_tWork.status.bits.pause = 0;
;;;306    			g_tWork.status.bits.blinkEnable = 1;
;;;307    			g_tWork.status.bits.DEMO = 1;
000084  2204              MOVS     r2,#4
000086  686d              LDR      r5,[r5,#4]            ;192
;;;308    			app_dome_start_current();
;;;309    		} else {
;;;310    			//								g_tWork.status.bits.pause = 1;
;;;311    			g_tWork.status.bits.blinkEnable = 0;
;;;312    			g_tWork.status.bits.DEMO = 0;
;;;313    			app_dome_stop_current();
;;;314    		}
;;;315    		buffer[index++] = LAMP2LCD_HEADER;
;;;316    		buffer[index++] = 10;
;;;317    		buffer[index++] = KEY_POWER_SHORT_CMD;
;;;318    		if (g_tWork.status.bits.blinkEnable) {
;;;319    			buffer[index++] = 0;
;;;320    		} else {
;;;321    			buffer[index++] = 1;
;;;322    		}
;;;323    
;;;324    		app_dome_get_current_Name(buffer + index, 8);
;;;325    		index += 8;
;;;326    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;327    			buffer[index] += buffer[i + 1];
;;;328    		}
;;;329    		index++;
;;;330    		app_2d4_send(buffer, index);
;;;331    		break;
;;;332    	case KEY_CARD_DEMO_CMD:
;;;333    		//							if (g_tWork.status.bits.DEMO) {
;;;334    		//								g_tWork.status.bits.DEMO = 0;
;;;335    		//							} else {
;;;336    		g_tWork.status.bits.DEMO = 1;
;;;337    		//							}
;;;338    		app_dome_start(1);
;;;339    
;;;340    		break;
;;;341    	case APP_COLOR_ATLA_CMD:
;;;342    #if 1
;;;343    		g_tWork.status.bits.DEMO = 0;
;;;344    		app_dome_rgb(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)],
;;;345    				st->rxBuf[(st->pRead + 5) % sizeof(st->rxBuf)],
;;;346    				st->rxBuf[(st->pRead + 6) % sizeof(st->rxBuf)]);
;;;347    #else
;;;348    		app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;349    #endif
;;;350    		break;
;;;351    	case APP_BRIGHT_CMD:
;;;352    		dome_running_param.bright = st->rxBuf[(st->pRead + 4)
000088  4fe4              LDR      r7,|L1.1052|
00008a  4395              BICS     r5,r5,r2              ;312
00008c  2864              CMP      r0,#0x64              ;59
00008e  d06d              BEQ      |L1.364|
000090  dc11              BGT      |L1.182|
000092  2854              CMP      r0,#0x54              ;59
000094  d06b              BEQ      |L1.366|
000096  2857              CMP      r0,#0x57              ;59
000098  d06a              BEQ      |L1.368|
00009a  2862              CMP      r0,#0x62              ;59
00009c  d069              BEQ      |L1.370|
00009e  2863              CMP      r0,#0x63              ;59
0000a0  d107              BNE      |L1.178|
0000a2  1d1b              ADDS     r3,r3,#4              ;59
0000a4  05d8              LSLS     r0,r3,#23
0000a6  0dc0              LSRS     r0,r0,#23
0000a8  5c21              LDRB     r1,[r4,r0]
0000aa  7039              STRB     r1,[r7,#0]
;;;353    				% sizeof(st->rxBuf)];
;;;354    		Light_bright_set(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
0000ac  5c20              LDRB     r0,[r4,r0]
0000ae  f7fffffe          BL       Light_bright_set
                  |L1.178|
;;;355    		break;
;;;356    	case APP_SPEED_CMD:
;;;357    		dome_running_param.speed =
;;;358    				st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;359    		break;
;;;360    	case APP_FLASH_INDEX_CMD:
;;;361    		g_tWork.status.bits.DEMO = 0;
;;;362    		g_tWork.status.bits.blinkEnable = 1;
;;;363    //		app_dome_start_current();
;;;364    		app_dome_start(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
;;;365    
;;;366    		break;
;;;367    	case APP_SWITCH_INDEX_CMD: {
;;;368    		uint8_t switchData = st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;369    		if (((switchData >> 4) & 0x0F) == 0) {
;;;370    			Relay_set(switchData & 0x0F);
;;;371    		}
;;;372    	}
;;;373    		break;
;;;374    		/// app --end
;;;375    	default:
;;;376    		break;
;;;377    	}
;;;378    
;;;379    }
0000b2  b007              ADD      sp,sp,#0x1c
0000b4  bdf0              POP      {r4-r7,pc}
                  |L1.182|
0000b6  2865              CMP      r0,#0x65              ;59
0000b8  d07e              BEQ      |L1.440|
0000ba  2866              CMP      r0,#0x66              ;59
0000bc  d07d              BEQ      |L1.442|
0000be  28f0              CMP      r0,#0xf0              ;59
0000c0  d1f7              BNE      |L1.178|
0000c2  2000              MOVS     r0,#0                 ;294
0000c4  466a              MOV      r2,sp                 ;296
0000c6  9004              STR      r0,[sp,#0x10]         ;296
0000c8  7c10              LDRB     r0,[r2,#0x10]         ;296
0000ca  070a              LSLS     r2,r1,#28             ;296
0000cc  0fd2              LSRS     r2,r2,#31             ;296
0000ce  01d2              LSLS     r2,r2,#7              ;296
0000d0  0749              LSLS     r1,r1,#29             ;297
0000d2  4310              ORRS     r0,r0,r2              ;296
0000d4  0fc9              LSRS     r1,r1,#31             ;297
0000d6  0189              LSLS     r1,r1,#6              ;297
0000d8  4308              ORRS     r0,r0,r1              ;297
0000da  466a              MOV      r2,sp                 ;297
0000dc  7410              STRB     r0,[r2,#0x10]         ;297
0000de  f7fffffe          BL       Relay_IsOn
0000e2  2800              CMP      r0,#0                 ;298
0000e4  d000              BEQ      |L1.232|
0000e6  2001              MOVS     r0,#1                 ;298
                  |L1.232|
0000e8  4669              MOV      r1,sp                 ;298
0000ea  7c49              LDRB     r1,[r1,#0x11]         ;298
0000ec  2202              MOVS     r2,#2                 ;299
0000ee  4308              ORRS     r0,r0,r1              ;298
0000f0  4669              MOV      r1,sp                 ;298
0000f2  7448              STRB     r0,[r1,#0x11]         ;298
0000f4  a904              ADD      r1,sp,#0x10           ;299
0000f6  20f0              MOVS     r0,#0xf0              ;299
                  |L1.248|
0000f8  f7fffffe          BL       app_uart_send
0000fc  e7d9              B        |L1.178|
                  |L1.254|
0000fe  330c              ADDS     r3,r3,#0xc
000100  05d8              LSLS     r0,r3,#23             ;63
000102  0dc0              LSRS     r0,r0,#23             ;63
000104  5c27              LDRB     r7,[r4,r0]            ;63
000106  2074              MOVS     r0,#0x74              ;68
000108  9005              STR      r0,[sp,#0x14]         ;74
00010a  2f2b              CMP      r7,#0x2b              ;74
00010c  dcd1              BGT      |L1.178|
00010e  48c4              LDR      r0,|L1.1056|
000110  6802              LDR      r2,[r0,#0]            ;77
000112  2108              MOVS     r1,#8                 ;77
000114  430a              ORRS     r2,r2,r1              ;77
000116  6002              STR      r2,[r0,#0]            ;77
000118  2159              MOVS     r1,#0x59              ;77
00011a  2216              MOVS     r2,#0x16              ;77
00011c  2388              MOVS     r3,#0x88              ;77
                  |L1.286|
00011e  48c1              LDR      r0,|L1.1060|
000120  6001              STR      r1,[r0,#0]            ;77
000122  6002              STR      r2,[r0,#0]            ;77
000124  6003              STR      r3,[r0,#0]            ;77
000126  6800              LDR      r0,[r0,#0]            ;77
000128  2800              CMP      r0,#0                 ;77
00012a  e003              B        |L1.308|
                  |L1.300|
00012c  e188              B        |L1.1088|
                  |L1.302|
00012e  e107              B        |L1.832|
                  |L1.304|
000130  e0ba              B        |L1.680|
                  |L1.306|
000132  e0dc              B        |L1.750|
                  |L1.308|
000134  d0f3              BEQ      |L1.286|
000136  f7fffffe          BL       FMC_Open
00013a  2f00              CMP      r7,#0                 ;81
00013c  d10c              BNE      |L1.344|
00013e  210a              MOVS     r1,#0xa               ;82
000140  48b4              LDR      r0,|L1.1044|
000142  2600              MOVS     r6,#0                 ;83
000144  7041              STRB     r1,[r0,#1]            ;82
                  |L1.326|
000146  0270              LSLS     r0,r6,#9              ;84
000148  f7fffffe          BL       app_eeprom_erase
00014c  48b1              LDR      r0,|L1.1044|
00014e  1c76              ADDS     r6,r6,#1              ;84
000150  7840              LDRB     r0,[r0,#1]            ;83  ; u8_tmp
000152  b2f6              UXTB     r6,r6                 ;83
000154  4286              CMP      r6,r0                 ;83
000156  d3f6              BCC      |L1.326|
                  |L1.344|
000158  8868              LDRH     r0,[r5,#2]            ;97
00015a  300d              ADDS     r0,r0,#0xd            ;97
00015c  05c0              LSLS     r0,r0,#23             ;97
00015e  0dc0              LSRS     r0,r0,#23             ;97
000160  5c20              LDRB     r0,[r4,r0]            ;97
000162  0700              LSLS     r0,r0,#28             ;97
000164  0f00              LSRS     r0,r0,#28             ;97
000166  e005              B        |L1.372|
                  |L1.360|
000168  e10f              B        |L1.906|
                  |L1.362|
00016a  e136              B        |L1.986|
                  |L1.364|
00016c  e1f0              B        |L1.1360|
                  |L1.366|
00016e  e1a5              B        |L1.1212|
                  |L1.368|
000170  e1d8              B        |L1.1316|
                  |L1.370|
000172  e1dc              B        |L1.1326|
                  |L1.372|
000174  49a7              LDR      r1,|L1.1044|
000176  2600              MOVS     r6,#0                 ;105
000178  8048              STRH     r0,[r1,#2]            ;97
00017a  210d              MOVS     r1,#0xd               ;99
00017c  4348              MULS     r0,r1,r0              ;99
00017e  300a              ADDS     r0,r0,#0xa            ;99
000180  b2c0              UXTB     r0,r0                 ;99
000182  9004              STR      r0,[sp,#0x10]         ;105
000184  0880              LSRS     r0,r0,#2              ;105
000186  9006              STR      r0,[sp,#0x18]         ;105
000188  e029              B        |L1.478|
                  |L1.394|
00018a  9805              LDR      r0,[sp,#0x14]         ;106
00018c  4639              MOV      r1,r7                 ;106
00018e  4341              MULS     r1,r0,r1              ;106
000190  00b0              LSLS     r0,r6,#2              ;106
000192  1809              ADDS     r1,r1,r0              ;106
000194  468c              MOV      r12,r1                ;106
000196  8869              LDRH     r1,[r5,#2]            ;107
000198  1d02              ADDS     r2,r0,#4              ;107
00019a  188a              ADDS     r2,r1,r2              ;107
00019c  05d2              LSLS     r2,r2,#23             ;107
00019e  0dd2              LSRS     r2,r2,#23             ;107
0001a0  5ca3              LDRB     r3,[r4,r2]            ;107
0001a2  1d42              ADDS     r2,r0,#5              ;108
0001a4  188a              ADDS     r2,r1,r2              ;108
0001a6  05d2              LSLS     r2,r2,#23             ;108
0001a8  0dd2              LSRS     r2,r2,#23             ;108
0001aa  5ca2              LDRB     r2,[r4,r2]            ;108
0001ac  0212              LSLS     r2,r2,#8              ;108
0001ae  431a              ORRS     r2,r2,r3              ;108
0001b0  1d83              ADDS     r3,r0,#6              ;110
0001b2  18cb              ADDS     r3,r1,r3              ;110
0001b4  05db              LSLS     r3,r3,#23             ;110
0001b6  e001              B        |L1.444|
                  |L1.440|
0001b8  e1d0              B        |L1.1372|
                  |L1.442|
0001ba  e1da              B        |L1.1394|
                  |L1.444|
0001bc  1dc0              ADDS     r0,r0,#7              ;110
0001be  1808              ADDS     r0,r1,r0              ;112
0001c0  05c0              LSLS     r0,r0,#23             ;112
0001c2  0ddb              LSRS     r3,r3,#23             ;110
0001c4  0dc0              LSRS     r0,r0,#23             ;112
0001c6  5ce3              LDRB     r3,[r4,r3]            ;110
0001c8  5c20              LDRB     r0,[r4,r0]            ;112
0001ca  041b              LSLS     r3,r3,#16             ;110
0001cc  0601              LSLS     r1,r0,#24             ;112
0001ce  4313              ORRS     r3,r3,r2              ;110
0001d0  4319              ORRS     r1,r1,r3              ;112
0001d2  4660              MOV      r0,r12                ;114
0001d4  f7fffffe          BL       app_eeprom_write_int
0001d8  1c76              ADDS     r6,r6,#1              ;114
0001da  9806              LDR      r0,[sp,#0x18]         ;105
0001dc  b2f6              UXTB     r6,r6                 ;105
                  |L1.478|
0001de  42b0              CMP      r0,r6                 ;105
0001e0  d8d3              BHI      |L1.394|
0001e2  9804              LDR      r0,[sp,#0x10]         ;116
0001e4  0780              LSLS     r0,r0,#30             ;116
0001e6  d031              BEQ      |L1.588|
0001e8  9904              LDR      r1,[sp,#0x10]         ;117
0001ea  9805              LDR      r0,[sp,#0x14]         ;117
0001ec  088a              LSRS     r2,r1,#2              ;117
0001ee  4378              MULS     r0,r7,r0              ;117
0001f0  0092              LSLS     r2,r2,#2              ;117
0001f2  1880              ADDS     r0,r0,r2              ;117
0001f4  9b04              LDR      r3,[sp,#0x10]         ;119
0001f6  2100              MOVS     r1,#0                 ;118
0001f8  4684              MOV      r12,r0                ;117
0001fa  079e              LSLS     r6,r3,#30             ;119
0001fc  4608              MOV      r0,r1                 ;119
0001fe  0fb6              LSRS     r6,r6,#30             ;119
000200  e01f              B        |L1.578|
                  |L1.514|
000202  2800              CMP      r0,#0                 ;120
000204  d004              BEQ      |L1.528|
000206  2801              CMP      r0,#1                 ;120
000208  d009              BEQ      |L1.542|
00020a  2802              CMP      r0,#2                 ;120
00020c  d117              BNE      |L1.574|
00020e  e00e              B        |L1.558|
                  |L1.528|
000210  886b              LDRH     r3,[r5,#2]            ;122
000212  1d11              ADDS     r1,r2,#4              ;122
000214  1859              ADDS     r1,r3,r1              ;122
000216  05c9              LSLS     r1,r1,#23             ;122
000218  0dc9              LSRS     r1,r1,#23             ;122
00021a  5c61              LDRB     r1,[r4,r1]            ;122
00021c  e00f              B        |L1.574|
                  |L1.542|
00021e  886b              LDRH     r3,[r5,#2]            ;126
000220  189b              ADDS     r3,r3,r2              ;126
000222  1d5b              ADDS     r3,r3,#5              ;126
000224  05db              LSLS     r3,r3,#23             ;126
000226  0ddb              LSRS     r3,r3,#23             ;126
000228  5ce3              LDRB     r3,[r4,r3]            ;126
00022a  021b              LSLS     r3,r3,#8              ;126
00022c  e006              B        |L1.572|
                  |L1.558|
00022e  886b              LDRH     r3,[r5,#2]            ;130
000230  189b              ADDS     r3,r3,r2              ;130
000232  1d9b              ADDS     r3,r3,#6              ;130
000234  05db              LSLS     r3,r3,#23             ;130
000236  0ddb              LSRS     r3,r3,#23             ;130
000238  5ce3              LDRB     r3,[r4,r3]            ;130
00023a  041b              LSLS     r3,r3,#16             ;130
                  |L1.572|
00023c  4319              ORRS     r1,r1,r3              ;126
                  |L1.574|
00023e  1c40              ADDS     r0,r0,#1              ;126
000240  b2c0              UXTB     r0,r0                 ;119
                  |L1.578|
000242  4286              CMP      r6,r0                 ;119
000244  d8dd              BHI      |L1.514|
000246  4660              MOV      r0,r12                ;135
000248  f7fffffe          BL       app_eeprom_write_int
                  |L1.588|
00024c  f7fffffe          BL       FMC_Close
000250  4974              LDR      r1,|L1.1060|
000252  2000              MOVS     r0,#0                 ;138
000254  6008              STR      r0,[r1,#0]            ;138
000256  4872              LDR      r0,|L1.1056|
000258  6802              LDR      r2,[r0,#0]            ;140
00025a  2108              MOVS     r1,#8                 ;140
00025c  438a              BICS     r2,r2,r1              ;140
00025e  6002              STR      r2,[r0,#0]            ;140
000260  486c              LDR      r0,|L1.1044|
000262  2201              MOVS     r2,#1                 ;143
000264  7047              STRB     r7,[r0,#1]            ;142
000266  1c41              ADDS     r1,r0,#1              ;143
000268  2012              MOVS     r0,#0x12              ;143
00026a  e745              B        |L1.248|
                  |L1.620|
00026c  8869              LDRH     r1,[r5,#2]            ;151
00026e  1d37              ADDS     r7,r6,#4              ;151
000270  19c9              ADDS     r1,r1,r7              ;151
000272  05c9              LSLS     r1,r1,#23             ;151
000274  0dc9              LSRS     r1,r1,#23             ;151
000276  5c61              LDRB     r1,[r4,r1]            ;151
000278  5419              STRB     r1,[r3,r0]            ;151
00027a  1c40              ADDS     r0,r0,#1              ;151
00027c  1c76              ADDS     r6,r6,#1              ;151
00027e  b2c0              UXTB     r0,r0                 ;151
000280  b2f6              UXTB     r6,r6                 ;150
                  |L1.642|
000282  4296              CMP      r6,r2                 ;150
000284  dbf2              BLT      |L1.620|
000286  2100              MOVS     r1,#0                 ;154
000288  e006              B        |L1.664|
                  |L1.650|
00028a  185c              ADDS     r4,r3,r1              ;155
00028c  5c1a              LDRB     r2,[r3,r0]            ;155
00028e  7864              LDRB     r4,[r4,#1]            ;155
000290  1912              ADDS     r2,r2,r4              ;155
000292  1c49              ADDS     r1,r1,#1              ;155
000294  541a              STRB     r2,[r3,r0]            ;155
000296  b2c9              UXTB     r1,r1                 ;154
                  |L1.664|
000298  785a              LDRB     r2,[r3,#1]            ;154
00029a  1c52              ADDS     r2,r2,#1              ;154
00029c  428a              CMP      r2,r1                 ;154
00029e  d8f4              BHI      |L1.650|
                  |L1.672|
0002a0  1c40              ADDS     r0,r0,#1              ;154
0002a2  b2c1              UXTB     r1,r0                 ;157
0002a4  4618              MOV      r0,r3                 ;158
0002a6  e13a              B        |L1.1310|
                  |L1.680|
0002a8  20f8              MOVS     r0,#0xf8              ;161
0002aa  466b              MOV      r3,sp                 ;161
0002ac  7018              STRB     r0,[r3,#0]            ;161
0002ae  705f              STRB     r7,[r3,#1]            ;162
0002b0  2031              MOVS     r0,#0x31              ;163
0002b2  7098              STRB     r0,[r3,#2]            ;163
0002b4  2003              MOVS     r0,#3                 ;163
0002b6  e00a              B        |L1.718|
                  |L1.696|
0002b8  8869              LDRH     r1,[r5,#2]            ;165
0002ba  1d37              ADDS     r7,r6,#4              ;165
0002bc  19c9              ADDS     r1,r1,r7              ;165
0002be  05c9              LSLS     r1,r1,#23             ;165
0002c0  0dc9              LSRS     r1,r1,#23             ;165
0002c2  5c61              LDRB     r1,[r4,r1]            ;165
0002c4  5419              STRB     r1,[r3,r0]            ;165
0002c6  1c40              ADDS     r0,r0,#1              ;165
0002c8  1c76              ADDS     r6,r6,#1              ;165
0002ca  b2c0              UXTB     r0,r0                 ;165
0002cc  b2f6              UXTB     r6,r6                 ;164
                  |L1.718|
0002ce  4296              CMP      r6,r2                 ;164
0002d0  dbf2              BLT      |L1.696|
0002d2  2100              MOVS     r1,#0                 ;168
0002d4  e006              B        |L1.740|
                  |L1.726|
0002d6  185c              ADDS     r4,r3,r1              ;169
0002d8  5c1a              LDRB     r2,[r3,r0]            ;169
0002da  7864              LDRB     r4,[r4,#1]            ;169
0002dc  1912              ADDS     r2,r2,r4              ;169
0002de  1c49              ADDS     r1,r1,#1              ;169
0002e0  541a              STRB     r2,[r3,r0]            ;169
0002e2  b2c9              UXTB     r1,r1                 ;168
                  |L1.740|
0002e4  785a              LDRB     r2,[r3,#1]            ;168
0002e6  1c52              ADDS     r2,r2,#1              ;168
0002e8  428a              CMP      r2,r1                 ;168
0002ea  d8f4              BHI      |L1.726|
0002ec  e7d8              B        |L1.672|
                  |L1.750|
0002ee  4b4a              LDR      r3,|L1.1048|
0002f0  2001              MOVS     r0,#1                 ;191
0002f2  7018              STRB     r0,[r3,#0]            ;191
0002f4  07c8              LSLS     r0,r1,#31             ;192
0002f6  d000              BEQ      |L1.762|
                  |L1.760|
0002f8  e6db              B        |L1.178|
                  |L1.762|
0002fa  20f8              MOVS     r0,#0xf8              ;195
0002fc  466b              MOV      r3,sp                 ;195
0002fe  7018              STRB     r0,[r3,#0]            ;195
000300  705f              STRB     r7,[r3,#1]            ;196
000302  2033              MOVS     r0,#0x33              ;197
000304  7098              STRB     r0,[r3,#2]            ;197
000306  2003              MOVS     r0,#3                 ;197
000308  e00a              B        |L1.800|
                  |L1.778|
00030a  8869              LDRH     r1,[r5,#2]            ;199
00030c  1d37              ADDS     r7,r6,#4              ;199
00030e  19c9              ADDS     r1,r1,r7              ;199
000310  05c9              LSLS     r1,r1,#23             ;199
000312  0dc9              LSRS     r1,r1,#23             ;199
000314  5c61              LDRB     r1,[r4,r1]            ;199
000316  5419              STRB     r1,[r3,r0]            ;199
000318  1c40              ADDS     r0,r0,#1              ;199
00031a  1c76              ADDS     r6,r6,#1              ;199
00031c  b2c0              UXTB     r0,r0                 ;199
00031e  b2f6              UXTB     r6,r6                 ;198
                  |L1.800|
000320  4296              CMP      r6,r2                 ;198
000322  dbf2              BLT      |L1.778|
000324  2100              MOVS     r1,#0                 ;202
000326  e006              B        |L1.822|
                  |L1.808|
000328  185c              ADDS     r4,r3,r1              ;203
00032a  5c1a              LDRB     r2,[r3,r0]            ;203
00032c  7864              LDRB     r4,[r4,#1]            ;203
00032e  1912              ADDS     r2,r2,r4              ;203
000330  1c49              ADDS     r1,r1,#1              ;203
000332  541a              STRB     r2,[r3,r0]            ;203
000334  b2c9              UXTB     r1,r1                 ;202
                  |L1.822|
000336  785a              LDRB     r2,[r3,#1]            ;202
000338  1c52              ADDS     r2,r2,#1              ;202
00033a  428a              CMP      r2,r1                 ;202
00033c  d8f4              BHI      |L1.808|
00033e  e7af              B        |L1.672|
                  |L1.832|
000340  07c8              LSLS     r0,r1,#31             ;209
000342  d1d9              BNE      |L1.760|
000344  21f8              MOVS     r1,#0xf8              ;212
000346  466b              MOV      r3,sp                 ;212
000348  7019              STRB     r1,[r3,#0]            ;212
00034a  2135              MOVS     r1,#0x35              ;214
00034c  705f              STRB     r7,[r3,#1]            ;213
00034e  7099              STRB     r1,[r3,#2]            ;214
000350  2003              MOVS     r0,#3                 ;214
000352  e00a              B        |L1.874|
                  |L1.852|
000354  8869              LDRH     r1,[r5,#2]            ;216
000356  1d37              ADDS     r7,r6,#4              ;216
000358  19c9              ADDS     r1,r1,r7              ;216
00035a  05c9              LSLS     r1,r1,#23             ;216
00035c  0dc9              LSRS     r1,r1,#23             ;216
00035e  5c61              LDRB     r1,[r4,r1]            ;216
000360  5419              STRB     r1,[r3,r0]            ;216
000362  1c40              ADDS     r0,r0,#1              ;216
000364  1c76              ADDS     r6,r6,#1              ;216
000366  b2c0              UXTB     r0,r0                 ;216
000368  b2f6              UXTB     r6,r6                 ;215
                  |L1.874|
00036a  4296              CMP      r6,r2                 ;215
00036c  dbf2              BLT      |L1.852|
00036e  2100              MOVS     r1,#0                 ;219
000370  e006              B        |L1.896|
                  |L1.882|
000372  185c              ADDS     r4,r3,r1              ;220
000374  5c1a              LDRB     r2,[r3,r0]            ;220
000376  7864              LDRB     r4,[r4,#1]            ;220
000378  1912              ADDS     r2,r2,r4              ;220
00037a  1c49              ADDS     r1,r1,#1              ;220
00037c  541a              STRB     r2,[r3,r0]            ;220
00037e  b2c9              UXTB     r1,r1                 ;219
                  |L1.896|
000380  785a              LDRB     r2,[r3,#1]            ;219
000382  1c52              ADDS     r2,r2,#1              ;219
000384  428a              CMP      r2,r1                 ;219
000386  d8f4              BHI      |L1.882|
000388  e78a              B        |L1.672|
                  |L1.906|
00038a  4b23              LDR      r3,|L1.1048|
00038c  2003              MOVS     r0,#3                 ;226
00038e  7018              STRB     r0,[r3,#0]            ;226
000390  07c8              LSLS     r0,r1,#31             ;227
000392  d1b1              BNE      |L1.760|
000394  20f8              MOVS     r0,#0xf8              ;230
000396  466b              MOV      r3,sp                 ;230
000398  7018              STRB     r0,[r3,#0]            ;230
00039a  705f              STRB     r7,[r3,#1]            ;231
00039c  2036              MOVS     r0,#0x36              ;232
00039e  7098              STRB     r0,[r3,#2]            ;232
0003a0  2003              MOVS     r0,#3                 ;232
0003a2  e00a              B        |L1.954|
                  |L1.932|
0003a4  8869              LDRH     r1,[r5,#2]            ;234
0003a6  1d37              ADDS     r7,r6,#4              ;234
0003a8  19c9              ADDS     r1,r1,r7              ;234
0003aa  05c9              LSLS     r1,r1,#23             ;234
0003ac  0dc9              LSRS     r1,r1,#23             ;234
0003ae  5c61              LDRB     r1,[r4,r1]            ;234
0003b0  5419              STRB     r1,[r3,r0]            ;234
0003b2  1c40              ADDS     r0,r0,#1              ;234
0003b4  1c76              ADDS     r6,r6,#1              ;234
0003b6  b2c0              UXTB     r0,r0                 ;234
0003b8  b2f6              UXTB     r6,r6                 ;233
                  |L1.954|
0003ba  4296              CMP      r6,r2                 ;233
0003bc  dbf2              BLT      |L1.932|
0003be  2100              MOVS     r1,#0                 ;237
0003c0  e006              B        |L1.976|
                  |L1.962|
0003c2  185c              ADDS     r4,r3,r1              ;238
0003c4  5c1a              LDRB     r2,[r3,r0]            ;238
0003c6  7864              LDRB     r4,[r4,#1]            ;238
0003c8  1912              ADDS     r2,r2,r4              ;238
0003ca  1c49              ADDS     r1,r1,#1              ;238
0003cc  541a              STRB     r2,[r3,r0]            ;238
0003ce  b2c9              UXTB     r1,r1                 ;237
                  |L1.976|
0003d0  785a              LDRB     r2,[r3,#1]            ;237
0003d2  1c52              ADDS     r2,r2,#1              ;237
0003d4  428a              CMP      r2,r1                 ;237
0003d6  d8f4              BHI      |L1.962|
0003d8  e762              B        |L1.672|
                  |L1.986|
0003da  4b0f              LDR      r3,|L1.1048|
0003dc  2002              MOVS     r0,#2                 ;244
0003de  7018              STRB     r0,[r3,#0]            ;244
0003e0  07c8              LSLS     r0,r1,#31             ;245
0003e2  d189              BNE      |L1.760|
0003e4  20f8              MOVS     r0,#0xf8              ;248
0003e6  466b              MOV      r3,sp                 ;248
0003e8  7018              STRB     r0,[r3,#0]            ;248
0003ea  705f              STRB     r7,[r3,#1]            ;249
0003ec  2037              MOVS     r0,#0x37              ;250
0003ee  7098              STRB     r0,[r3,#2]            ;250
0003f0  2003              MOVS     r0,#3                 ;250
0003f2  e00a              B        |L1.1034|
                  |L1.1012|
0003f4  8869              LDRH     r1,[r5,#2]            ;252
0003f6  1d37              ADDS     r7,r6,#4              ;252
0003f8  19c9              ADDS     r1,r1,r7              ;252
0003fa  05c9              LSLS     r1,r1,#23             ;252
0003fc  0dc9              LSRS     r1,r1,#23             ;252
0003fe  5c61              LDRB     r1,[r4,r1]            ;252
000400  5419              STRB     r1,[r3,r0]            ;252
000402  1c40              ADDS     r0,r0,#1              ;252
000404  1c76              ADDS     r6,r6,#1              ;252
000406  b2c0              UXTB     r0,r0                 ;252
000408  b2f6              UXTB     r6,r6                 ;251
                  |L1.1034|
00040a  4296              CMP      r6,r2                 ;251
00040c  dbf2              BLT      |L1.1012|
00040e  2100              MOVS     r1,#0                 ;255
000410  e011              B        |L1.1078|
000412  0000              DCW      0x0000
                  |L1.1044|
                          DCD      ||.data||
                  |L1.1048|
                          DCD      g_tWork
                  |L1.1052|
                          DCD      dome_running_param
                  |L1.1056|
                          DCD      0x5000c000
                  |L1.1060|
                          DCD      0x50000100
                  |L1.1064|
000428  185c              ADDS     r4,r3,r1              ;256
00042a  5c1a              LDRB     r2,[r3,r0]            ;256
00042c  7864              LDRB     r4,[r4,#1]            ;256
00042e  1912              ADDS     r2,r2,r4              ;256
000430  1c49              ADDS     r1,r1,#1              ;256
000432  541a              STRB     r2,[r3,r0]            ;256
000434  b2c9              UXTB     r1,r1                 ;255
                  |L1.1078|
000436  785a              LDRB     r2,[r3,#1]            ;255
000438  1c52              ADDS     r2,r2,#1              ;255
00043a  428a              CMP      r2,r1                 ;255
00043c  d8f4              BHI      |L1.1064|
00043e  e72f              B        |L1.672|
                  |L1.1088|
000440  21f8              MOVS     r1,#0xf8              ;262
000442  466b              MOV      r3,sp                 ;262
000444  7019              STRB     r1,[r3,#0]            ;262
000446  2141              MOVS     r1,#0x41              ;264
000448  705f              STRB     r7,[r3,#1]            ;263
00044a  7099              STRB     r1,[r3,#2]            ;264
00044c  2003              MOVS     r0,#3                 ;264
00044e  e00a              B        |L1.1126|
                  |L1.1104|
000450  8869              LDRH     r1,[r5,#2]            ;266
000452  1d37              ADDS     r7,r6,#4              ;266
000454  19c9              ADDS     r1,r1,r7              ;266
000456  05c9              LSLS     r1,r1,#23             ;266
000458  0dc9              LSRS     r1,r1,#23             ;266
00045a  5c61              LDRB     r1,[r4,r1]            ;266
00045c  5419              STRB     r1,[r3,r0]            ;266
00045e  1c40              ADDS     r0,r0,#1              ;266
000460  1c76              ADDS     r6,r6,#1              ;266
000462  b2c0              UXTB     r0,r0                 ;266
000464  b2f6              UXTB     r6,r6                 ;265
                  |L1.1126|
000466  4296              CMP      r6,r2                 ;265
000468  dbf2              BLT      |L1.1104|
00046a  2100              MOVS     r1,#0                 ;269
00046c  e006              B        |L1.1148|
                  |L1.1134|
00046e  185c              ADDS     r4,r3,r1              ;270
000470  5c1a              LDRB     r2,[r3,r0]            ;270
000472  7864              LDRB     r4,[r4,#1]            ;270
000474  1912              ADDS     r2,r2,r4              ;270
000476  1c49              ADDS     r1,r1,#1              ;270
000478  541a              STRB     r2,[r3,r0]            ;270
00047a  b2c9              UXTB     r1,r1                 ;269
                  |L1.1148|
00047c  785a              LDRB     r2,[r3,#1]            ;269
00047e  1c52              ADDS     r2,r2,#1              ;269
000480  428a              CMP      r2,r1                 ;269
000482  d8f4              BHI      |L1.1134|
000484  e70c              B        |L1.672|
                  |L1.1158|
000486  8869              LDRH     r1,[r5,#2]            ;284
000488  1d37              ADDS     r7,r6,#4              ;284
00048a  19c9              ADDS     r1,r1,r7              ;284
00048c  05c9              LSLS     r1,r1,#23             ;284
00048e  0dc9              LSRS     r1,r1,#23             ;284
000490  5c61              LDRB     r1,[r4,r1]            ;284
000492  5419              STRB     r1,[r3,r0]            ;284
000494  1c40              ADDS     r0,r0,#1              ;284
000496  1c76              ADDS     r6,r6,#1              ;284
000498  b2c0              UXTB     r0,r0                 ;284
00049a  b2f6              UXTB     r6,r6                 ;283
                  |L1.1180|
00049c  4296              CMP      r6,r2                 ;283
00049e  dbf2              BLT      |L1.1158|
0004a0  2100              MOVS     r1,#0                 ;287
0004a2  e006              B        |L1.1202|
                  |L1.1188|
0004a4  185c              ADDS     r4,r3,r1              ;288
0004a6  5c1a              LDRB     r2,[r3,r0]            ;288
0004a8  7864              LDRB     r4,[r4,#1]            ;288
0004aa  1912              ADDS     r2,r2,r4              ;288
0004ac  1c49              ADDS     r1,r1,#1              ;288
0004ae  541a              STRB     r2,[r3,r0]            ;288
0004b0  b2c9              UXTB     r1,r1                 ;287
                  |L1.1202|
0004b2  785a              LDRB     r2,[r3,#1]            ;287
0004b4  1c52              ADDS     r2,r2,#1              ;287
0004b6  428a              CMP      r2,r1                 ;287
0004b8  d8f4              BHI      |L1.1188|
0004ba  e6f1              B        |L1.672|
                  |L1.1212|
0004bc  4c32              LDR      r4,|L1.1416|
0004be  0708              LSLS     r0,r1,#28             ;304
0004c0  d406              BMI      |L1.1232|
0004c2  2008              MOVS     r0,#8                 ;306
0004c4  4301              ORRS     r1,r1,r0              ;306
0004c6  4311              ORRS     r1,r1,r2              ;307
0004c8  6061              STR      r1,[r4,#4]            ;308  ; g_tWork
0004ca  f7fffffe          BL       app_dome_start_current
0004ce  e005              B        |L1.1244|
                  |L1.1232|
0004d0  2008              MOVS     r0,#8                 ;311
0004d2  4381              BICS     r1,r1,r0              ;311
0004d4  4391              BICS     r1,r1,r2              ;312
0004d6  6061              STR      r1,[r4,#4]            ;313  ; g_tWork
0004d8  f7fffffe          BL       app_dome_stop_current
                  |L1.1244|
0004dc  20f8              MOVS     r0,#0xf8              ;315
0004de  466d              MOV      r5,sp                 ;315
0004e0  7028              STRB     r0,[r5,#0]            ;315
0004e2  210a              MOVS     r1,#0xa               ;316
0004e4  2001              MOVS     r0,#1                 ;315
0004e6  7069              STRB     r1,[r5,#1]            ;316
0004e8  70a8              STRB     r0,[r5,#2]            ;317
0004ea  7921              LDRB     r1,[r4,#4]            ;318  ; g_tWork
0004ec  462a              MOV      r2,r5                 ;315
0004ee  0709              LSLS     r1,r1,#28             ;318
0004f0  d500              BPL      |L1.1268|
0004f2  2000              MOVS     r0,#0                 ;319
                  |L1.1268|
0004f4  70d0              STRB     r0,[r2,#3]            ;321
0004f6  2108              MOVS     r1,#8                 ;324
0004f8  1d28              ADDS     r0,r5,#4              ;324
0004fa  f7fffffe          BL       app_dome_get_current_Name
0004fe  210c              MOVS     r1,#0xc               ;325
000500  e006              B        |L1.1296|
                  |L1.1282|
000502  19aa              ADDS     r2,r5,r6              ;327
000504  5c68              LDRB     r0,[r5,r1]            ;327
000506  7852              LDRB     r2,[r2,#1]            ;327
000508  1880              ADDS     r0,r0,r2              ;327
00050a  1c76              ADDS     r6,r6,#1              ;327
00050c  5468              STRB     r0,[r5,r1]            ;327
00050e  b2f6              UXTB     r6,r6                 ;326
                  |L1.1296|
000510  4668              MOV      r0,sp                 ;326
000512  7840              LDRB     r0,[r0,#1]            ;326
000514  1c40              ADDS     r0,r0,#1              ;326
000516  42b0              CMP      r0,r6                 ;326
000518  d8f3              BHI      |L1.1282|
00051a  4668              MOV      r0,sp                 ;330
00051c  1c49              ADDS     r1,r1,#1              ;330
                  |L1.1310|
00051e  f7fffffe          BL       app_2d4_send
                  |L1.1314|
000522  e5c6              B        |L1.178|
                  |L1.1316|
000524  4818              LDR      r0,|L1.1416|
000526  4311              ORRS     r1,r1,r2              ;336
000528  6041              STR      r1,[r0,#4]            ;338  ; g_tWork
00052a  2001              MOVS     r0,#1                 ;338
00052c  e01e              B        |L1.1388|
                  |L1.1326|
00052e  4816              LDR      r0,|L1.1416|
000530  6045              STR      r5,[r0,#4]            ;344  ; g_tWork
000532  1d98              ADDS     r0,r3,#6              ;344
000534  05c0              LSLS     r0,r0,#23             ;344
000536  0dc0              LSRS     r0,r0,#23             ;344
000538  5c22              LDRB     r2,[r4,r0]            ;344
00053a  1d58              ADDS     r0,r3,#5              ;344
00053c  05c0              LSLS     r0,r0,#23             ;344
00053e  0dc0              LSRS     r0,r0,#23             ;344
000540  5c21              LDRB     r1,[r4,r0]            ;344
000542  1d1b              ADDS     r3,r3,#4              ;344
000544  05d8              LSLS     r0,r3,#23             ;344
000546  0dc0              LSRS     r0,r0,#23             ;344
000548  5c20              LDRB     r0,[r4,r0]            ;344
00054a  f7fffffe          BL       app_dome_rgb
00054e  e5b0              B        |L1.178|
                  |L1.1360|
000550  1d1b              ADDS     r3,r3,#4
000552  05d8              LSLS     r0,r3,#23             ;357
000554  0dc0              LSRS     r0,r0,#23             ;357
000556  5c20              LDRB     r0,[r4,r0]            ;357
000558  7078              STRB     r0,[r7,#1]            ;357
00055a  e5aa              B        |L1.178|
                  |L1.1372|
00055c  2008              MOVS     r0,#8                 ;362
00055e  4305              ORRS     r5,r5,r0              ;362
000560  4909              LDR      r1,|L1.1416|
000562  1d1b              ADDS     r3,r3,#4              ;362
000564  05d8              LSLS     r0,r3,#23             ;364
000566  0dc0              LSRS     r0,r0,#23             ;364
000568  604d              STR      r5,[r1,#4]            ;364  ; g_tWork
00056a  5c20              LDRB     r0,[r4,r0]            ;364
                  |L1.1388|
00056c  f7fffffe          BL       app_dome_start
000570  e59f              B        |L1.178|
                  |L1.1394|
000572  1d1b              ADDS     r3,r3,#4
000574  05d8              LSLS     r0,r3,#23             ;368
000576  0dc0              LSRS     r0,r0,#23             ;368
000578  5c20              LDRB     r0,[r4,r0]            ;368
00057a  0901              LSRS     r1,r0,#4              ;369
00057c  d1d1              BNE      |L1.1314|
00057e  0700              LSLS     r0,r0,#28             ;370
000580  0f00              LSRS     r0,r0,#28             ;370
000582  f7fffffe          BL       Relay_set
000586  e594              B        |L1.178|
;;;380    
                          ENDP

                  |L1.1416|
                          DCD      g_tWork

                          AREA ||i.app_uart_Init||, CODE, READONLY, ALIGN=2

                  app_uart_Init PROC
;;;27     
;;;28     void app_uart_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;29     
;;;30     	memset((uint8_t *) &uart_st, 0, sizeof(Uart_ST));
000002  21c1              MOVS     r1,#0xc1
000004  0089              LSLS     r1,r1,#2
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       __aeabi_memclr
;;;31     }
00000c  bd10              POP      {r4,pc}
;;;32     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.app_uart_pro||, CODE, READONLY, ALIGN=2

                  app_uart_pro PROC
;;;380    
;;;381    void app_uart_pro(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;382    	uint8_t ucData = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;383    
;;;384    #if 1
;;;385    	while (1) {
;;;386    
;;;387    		if (comGetChar(COM1, &ucData)) {
;;;388    #if 0
;;;389    //			comSendChar(COM0, ucData);
;;;390    //			log_debug("rcv %02X", ucData);
;;;391    #endif
;;;392    
;;;393    			uart_st.rxBuf[uart_st.pWrite++] = ucData;
000008  4d2d              LDR      r5,|L3.192|
00000a  2003              MOVS     r0,#3
;;;394    			if (uart_st.pWrite >= sizeof(uart_st.rxBuf)) {
;;;395    				uart_st.pWrite = 0;
;;;396    			}
;;;397    
;;;398    			/*
;;;399    			 (0x55,0xAA)...0x00......0x00...0x00,0x00...0x00
;;;400    			 Head..........Length....cmd....Data........crc8()
;;;401    			 */
;;;402    			if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
;;;403    					% sizeof(uart_st.rxBuf) > 5) {
;;;404    				if (((uart_st.rxBuf[uart_st.pRead]) == 0x55)
;;;405    						&& ((uart_st.rxBuf[(uart_st.pRead + 1)
;;;406    								% sizeof(uart_st.rxBuf)]) == 0xAA)) {
;;;407    					len = uart_st.rxBuf[(uart_st.pRead + 2)
00000c  4e2d              LDR      r6,|L3.196|
00000e  0200              LSLS     r0,r0,#8              ;393
000010  182c              ADDS     r4,r5,r0              ;393
                  |L3.18|
000012  4669              MOV      r1,sp                 ;387
000014  2001              MOVS     r0,#1                 ;387
000016  f7fffffe          BL       comGetChar
00001a  2800              CMP      r0,#0                 ;387
00001c  d04e              BEQ      |L3.188|
00001e  4668              MOV      r0,sp                 ;393
000020  8821              LDRH     r1,[r4,#0]            ;393  ; uart_st
000022  7800              LDRB     r0,[r0,#0]            ;393
000024  5468              STRB     r0,[r5,r1]            ;393
000026  8820              LDRH     r0,[r4,#0]            ;393  ; uart_st
000028  2301              MOVS     r3,#1                 ;394
00002a  1c40              ADDS     r0,r0,#1              ;393
00002c  b280              UXTH     r0,r0                 ;393
00002e  025b              LSLS     r3,r3,#9              ;394
000030  8020              STRH     r0,[r4,#0]            ;393
000032  4298              CMP      r0,r3                 ;394
000034  d301              BCC      |L3.58|
000036  2000              MOVS     r0,#0                 ;395
000038  8020              STRH     r0,[r4,#0]            ;395
                  |L3.58|
00003a  8862              LDRH     r2,[r4,#2]            ;402  ; uart_st
00003c  b280              UXTH     r0,r0                 ;402
00003e  1a80              SUBS     r0,r0,r2              ;402
000040  05c0              LSLS     r0,r0,#23             ;402
000042  0dc0              LSRS     r0,r0,#23             ;402
000044  2805              CMP      r0,#5                 ;402
000046  d9e4              BLS      |L3.18|
000048  5ca9              LDRB     r1,[r5,r2]            ;404
00004a  2955              CMP      r1,#0x55              ;404
00004c  d105              BNE      |L3.90|
00004e  1c51              ADDS     r1,r2,#1              ;405
000050  05c9              LSLS     r1,r1,#23             ;405
000052  0dc9              LSRS     r1,r1,#23             ;405
000054  5c69              LDRB     r1,[r5,r1]            ;405
000056  29aa              CMP      r1,#0xaa              ;405
000058  d006              BEQ      |L3.104|
                  |L3.90|
00005a  1c52              ADDS     r2,r2,#1              ;405
;;;408    							% sizeof(uart_st.rxBuf)];
;;;409    					if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
;;;410    							% sizeof(uart_st.rxBuf) >= (len + 4)) {
;;;411    						if (uart_st.rxBuf[(uart_st.pRead + len + 3)
;;;412    								% sizeof(uart_st.rxBuf)]
;;;413    								!= app_CalcCRC8_cycle(
;;;414    										uart_st.rxBuf + uart_st.pRead, len + 3,
;;;415    										uart_st.pRead, sizeof(uart_st.rxBuf))) {
;;;416    							uart_st.pRead++;
;;;417    							log_err(
;;;418    									"[ERROR]   remote control check error!\r\n");
;;;419    						} else {
;;;420    							/* your code */
;;;421    							app_RC_Receiver_cmd_pro(&uart_st);
;;;422    							uart_st.pRead += len + 4;
;;;423    							uart_st.pRead = uart_st.pRead
;;;424    									% sizeof(uart_st.rxBuf);
;;;425    						}
;;;426    					}
;;;427    				} else {
;;;428    					uart_st.pRead++;
00005c  8062              STRH     r2,[r4,#2]
                  |L3.94|
;;;429    				}
;;;430    				uart_st.pRead = uart_st.pRead % sizeof(uart_st.rxBuf);
00005e  8860              LDRH     r0,[r4,#2]  ; uart_st
000060  05c0              LSLS     r0,r0,#23
000062  0dc0              LSRS     r0,r0,#23
000064  8060              STRH     r0,[r4,#2]
000066  e7d4              B        |L3.18|
                  |L3.104|
000068  1c91              ADDS     r1,r2,#2              ;407
00006a  05c9              LSLS     r1,r1,#23             ;407
00006c  0dc9              LSRS     r1,r1,#23             ;407
00006e  5c69              LDRB     r1,[r5,r1]            ;407
000070  7031              STRB     r1,[r6,#0]            ;407
000072  1d0f              ADDS     r7,r1,#4              ;409
000074  42b8              CMP      r0,r7                 ;409
000076  d3f2              BCC      |L3.94|
000078  1950              ADDS     r0,r2,r5              ;411
00007a  1cc9              ADDS     r1,r1,#3              ;411
00007c  f7fffffe          BL       app_CalcCRC8_cycle
000080  7832              LDRB     r2,[r6,#0]            ;411  ; len
000082  8861              LDRH     r1,[r4,#2]            ;411  ; uart_st
000084  1cd2              ADDS     r2,r2,#3              ;411
000086  188a              ADDS     r2,r1,r2              ;411
000088  05d2              LSLS     r2,r2,#23             ;411
00008a  0dd2              LSRS     r2,r2,#23             ;411
00008c  5caa              LDRB     r2,[r5,r2]            ;411
00008e  4290              CMP      r0,r2                 ;411
000090  d009              BEQ      |L3.166|
000092  1c49              ADDS     r1,r1,#1              ;411
000094  8061              STRH     r1,[r4,#2]            ;416
000096  21ff              MOVS     r1,#0xff              ;417
000098  a30b              ADR      r3,|L3.200|
00009a  2202              MOVS     r2,#2                 ;417
00009c  31a2              ADDS     r1,r1,#0xa2           ;417
00009e  4814              LDR      r0,|L3.240|
0000a0  f7fffffe          BL       LITE_syslog
0000a4  e7db              B        |L3.94|
                  |L3.166|
0000a6  4806              LDR      r0,|L3.192|
0000a8  f7fffffe          BL       app_RC_Receiver_cmd_pro
0000ac  7830              LDRB     r0,[r6,#0]            ;422  ; len
0000ae  8861              LDRH     r1,[r4,#2]            ;422  ; uart_st
0000b0  1d00              ADDS     r0,r0,#4              ;422
0000b2  1808              ADDS     r0,r1,r0              ;422
0000b4  05c0              LSLS     r0,r0,#23             ;423
0000b6  0dc0              LSRS     r0,r0,#23             ;423
0000b8  8060              STRH     r0,[r4,#2]            ;423
0000ba  e7d0              B        |L3.94|
                  |L3.188|
;;;431    			}
;;;432    			continue;
;;;433    		}
;;;434    		break;
;;;435    
;;;436    	}
;;;437    #else
;;;438    	while (riflag) {
;;;439    		riflag--;
;;;440    		if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE >= 4) {
;;;441    			if (((st.rxBuf[st.pRead]) == 0x55)
;;;442    					&& ((st.rxBuf[(st.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
;;;443    				len = st.rxBuf[(st.pRead + 2) % RCV_BUFSIZE];
;;;444    				if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE
;;;445    						>= (len + 4)) {
;;;446    					if (st.rxBuf[(st.pRead + len + 3) % RCV_BUFSIZE]
;;;447    							!= app_CalcCRC8_cycle(st.rxBuf + st.pRead,
;;;448    									len + 3, st.pRead, RCV_BUFSIZE)) {
;;;449    						st.pRead++;
;;;450    					} else {
;;;451    						uint8_t index = 0;
;;;452    						memset(sendBuf, 0, PAYLOAD_WIDTH);
;;;453    						switch (st.rxBuf[(st.pRead + 3) % RCV_BUFSIZE]) {
;;;454    							case BLINK_METHOD_CMD:  //闪法
;;;455    							{
;;;456    								uint8_t i = 0;
;;;457    								uint16_t index = 0;
;;;458    								index =
;;;459    								st.rxBuf[(st.pRead + 12) % RCV_BUFSIZE];
;;;460    
;;;461    								if (index
;;;462    										>= ((FMC_APROM_END - DOME_START_ADDR)
;;;463    												/ sizeof(DOME_DEFAULT_T) - 1)) {
;;;464    									break;
;;;465    								}
;;;466    								FMC_ENABLE_AP_UPDATE();
;;;467    								SYS_UnlockReg();
;;;468    								FMC_Open();
;;;469    
;;;470    								if (index == 0) {
;;;471    									u8_tmp = (FMC_APROM_END - DOME_START_ADDR)
;;;472    									/ FMC_FLASH_PAGE_SIZE;
;;;473    									for (i = 0; i < u8_tmp; i++) {
;;;474    										app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;475    									}
;;;476    								}
;;;477    #if 0
;;;478    								for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;479    									uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;480    									+ (&dome_blink.header.index
;;;481    											- &dome_blink);
;;;482    									app_eeprom_write_byte(addr, 0);
;;;483    									nop
;;;484    								}
;;;485    #endif
;;;486    #if 1
;;;487    								tmp = st.rxBuf[(st.pRead + 13) % RCV_BUFSIZE]
;;;488    								& 0x0F;  //sub mode number
;;;489    
;;;490    								uint8_t n = (tmp * sizeof(SUBDOME_T)
;;;491    										+ sizeof(DOME_HEADER_T));
;;;492    								uint8_t minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;493    								if (minSpaceBytes % 4) {
;;;494    									minSpaceBytes++;
;;;495    								}
;;;496    
;;;497    								for (i = 0; i < (n / 4); i++) {
;;;498    									uint32_t addr = index * minSpaceBytes + i * 4;
;;;499    									uint32_t dt = st.rxBuf[(st.pRead + 4 + i)
;;;500    									% RCV_BUFSIZE];
;;;501    									dt |= st.rxBuf[(st.pRead + 4 + i + 1)
;;;502    									% RCV_BUFSIZE] << 8;
;;;503    									dt |= st.rxBuf[(st.pRead + 4 + i + 2)
;;;504    									% RCV_BUFSIZE] << 16;
;;;505    									dt |= st.rxBuf[(st.pRead + 4 + i + 3)
;;;506    									% RCV_BUFSIZE] << 24;
;;;507    									app_eeprom_write_int(addr, dt);
;;;508    								}
;;;509    								for (i = 0; i < (n % 4); i++) {
;;;510    									uint32_t addr = index * minSpaceBytes + n / 4
;;;511    									+ 4;
;;;512    									uint32_t dt = 0;
;;;513    									switch (i) {
;;;514    										case 0:
;;;515    										dt = st.rxBuf[(st.pRead + 4 + n / 4)
;;;516    										% RCV_BUFSIZE];
;;;517    										break;
;;;518    										case 1:
;;;519    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;520    												+ i) % RCV_BUFSIZE] << 8;
;;;521    										break;
;;;522    										case 2:
;;;523    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;524    												+ i) % RCV_BUFSIZE] << 16;
;;;525    										break;
;;;526    										case 3:
;;;527    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;528    												+ i) % RCV_BUFSIZE] << 24;
;;;529    										break;
;;;530    									}
;;;531    									app_eeprom_write_int(addr, dt);
;;;532    								}
;;;533    
;;;534    								FMC_Close();
;;;535    								SYS_LockReg();
;;;536    								FMC_DISABLE_AP_UPDATE();
;;;537    #endif
;;;538    								u8_tmp = index & 0xFF;
;;;539    								app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;540    							}
;;;541    							break;
;;;542    							case RCV_VOL_CMD:
;;;543    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;544    							sendBuf[index++] = len;
;;;545    							sendBuf[index++] = RCV_VOL_CMD;
;;;546    							for (i = 0; i < (len - 1); i++) {
;;;547    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;548    										+ i) % RCV_BUFSIZE];
;;;549    							}
;;;550    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;551    								sendBuf[index] += sendBuf[i + 1];
;;;552    							}
;;;553    							index++;
;;;554    							app_2d4_send(sendBuf, index);
;;;555    							break;
;;;556    							case RCV_POWER_STATUS_CMD:
;;;557    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;558    							sendBuf[index++] = len;
;;;559    							sendBuf[index++] = RCV_POWER_STATUS_CMD;
;;;560    							for (i = 0; i < (len - 1); i++) {
;;;561    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;562    										+ i) % RCV_BUFSIZE];
;;;563    							}
;;;564    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;565    								sendBuf[index] += sendBuf[i + 1];
;;;566    							}
;;;567    							index++;
;;;568    							app_2d4_send(sendBuf, index);
;;;569    							break;
;;;570    #if 0
;;;571    							case RCV_X_BOX_STATUS_CMD:
;;;572    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;573    							sendBuf[index++] = len;
;;;574    							sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
;;;575    							for (i = 0; i < (len - 1); i++) {
;;;576    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;577    										+ i) % RCV_BUFSIZE];
;;;578    							}
;;;579    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;580    								sendBuf[index] += sendBuf[i + 1];
;;;581    							}
;;;582    							index++;
;;;583    							app_2d4_send(sendBuf, index);
;;;584    							break;
;;;585    #endif
;;;586    							case RCV_BT_STATUS_CMD:
;;;587    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;588    							sendBuf[index++] = len;
;;;589    							sendBuf[index++] = RCV_BT_STATUS_CMD;
;;;590    							for (i = 0; i < (len - 1); i++) {
;;;591    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;592    										+ i) % RCV_BUFSIZE];
;;;593    							}
;;;594    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;595    								sendBuf[index] += sendBuf[i + 1];
;;;596    							}
;;;597    							index++;
;;;598    							if (g_tWork.status.bits.DOME == 0) {
;;;599    								app_2d4_send(sendBuf, index);
;;;600    							}
;;;601    							break;
;;;602    							case RCV_PREV_NEXT_CMD:
;;;603    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;604    							sendBuf[index++] = len;
;;;605    							sendBuf[index++] = RCV_PREV_NEXT_CMD;
;;;606    							for (i = 0; i < (len - 1); i++) {
;;;607    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;608    										+ i) % RCV_BUFSIZE];
;;;609    							}
;;;610    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;611    								sendBuf[index] += sendBuf[i + 1];
;;;612    							}
;;;613    							index++;
;;;614    							if (g_tWork.status.bits.DOME == 0) {
;;;615    								app_2d4_send(sendBuf, index);
;;;616    							}
;;;617    							break;
;;;618    							case RCV_USB_PLAY_TIME_CMD:
;;;619    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;620    							sendBuf[index++] = len;
;;;621    							sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
;;;622    							for (i = 0; i < (len - 1); i++) {
;;;623    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;624    										+ i) % RCV_BUFSIZE];
;;;625    							}
;;;626    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;627    								sendBuf[index] += sendBuf[i + 1];
;;;628    							}
;;;629    							index++;
;;;630    							if (g_tWork.status.bits.DOME == 0) {
;;;631    								app_2d4_send(sendBuf, index);
;;;632    							}
;;;633    							break;
;;;634    							case RCV_FM_HZ_CMD:
;;;635    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;636    							sendBuf[index++] = len;
;;;637    							sendBuf[index++] = RCV_FM_HZ_CMD;
;;;638    							for (i = 0; i < (len - 1); i++) {
;;;639    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;640    										+ i) % RCV_BUFSIZE];
;;;641    							}
;;;642    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;643    								sendBuf[index] += sendBuf[i + 1];
;;;644    							}
;;;645    							index++;
;;;646    
;;;647    							if (g_tWork.status.bits.DOME == 0) {
;;;648    								app_2d4_send(sendBuf, index);
;;;649    							}
;;;650    							break;
;;;651    							case MODE_CHANGE_CMD:   //MODE
;;;652    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;653    							sendBuf[index++] = len;
;;;654    							sendBuf[index++] = MODE_CHANGE_CMD;
;;;655    							for (i = 0; i < (len - 1); i++) {
;;;656    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;657    										+ i) % RCV_BUFSIZE];
;;;658    							}
;;;659    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;660    								sendBuf[index] += sendBuf[i + 1];
;;;661    							}
;;;662    							index++;
;;;663    							app_2d4_send(sendBuf, index);
;;;664    							break;
;;;665    							case RCV_PLAY_PAUSE_STATUS_CMD:
;;;666    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;667    							sendBuf[index++] = len;
;;;668    							sendBuf[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
;;;669    							for (i = 0; i < (len - 1); i++) {
;;;670    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;671    										+ i) % RCV_BUFSIZE];
;;;672    							}
;;;673    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;674    								sendBuf[index] += sendBuf[i + 1];
;;;675    							}
;;;676    							index++;
;;;677    							if (g_tWork.status.bits.DOME == 0) {
;;;678    								app_2d4_send(sendBuf, index);
;;;679    							}
;;;680    							break;
;;;681    							/// app --start
;;;682    							case KEY_CARD_POWER_CMD:
;;;683    							if (g_tWork.status.bits.blinkEnable == 0) {
;;;684    //								g_tWork.status.bits.pause = 0;
;;;685    								g_tWork.status.bits.blinkEnable = 1;
;;;686    								g_tWork.status.bits.DEMO = 1;
;;;687    								app_dome_start_current();
;;;688    							} else {
;;;689    //								g_tWork.status.bits.pause = 1;
;;;690    								g_tWork.status.bits.blinkEnable = 0;
;;;691    								g_tWork.status.bits.DEMO = 0;
;;;692    								app_dome_stop_current();
;;;693    							}
;;;694    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;695    							sendBuf[index++] = 10;
;;;696    							sendBuf[index++] = KEY_POWER_SHORT_CMD;
;;;697    							sendBuf[index++] = g_tWork.status.bits.blinkEnable;
;;;698    							app_dome_get_current_Name(sendBuf + index, 8);
;;;699    							index += 8;
;;;700    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;701    								sendBuf[index] += sendBuf[i + 1];
;;;702    							}
;;;703    							index++;
;;;704    							app_2d4_send(sendBuf, index);
;;;705    							break;
;;;706    							case KEY_CARD_DEMO_CMD:
;;;707    //							if (g_tWork.status.bits.DEMO) {
;;;708    //								g_tWork.status.bits.DEMO = 0;
;;;709    //							} else {
;;;710    							g_tWork.status.bits.DEMO = 1;
;;;711    //							}
;;;712    							app_dome_start(0, 0);
;;;713    
;;;714    							break;
;;;715    							case APP_COLOR_ATLA_CMD:
;;;716    #if 1
;;;717    							app_dome_rgb(
;;;718    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;719    									st.rxBuf[(st.pRead + 5) % RCV_BUFSIZE],
;;;720    									st.rxBuf[(st.pRead + 6) % RCV_BUFSIZE]);
;;;721    #else
;;;722    							app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;723    #endif
;;;724    							break;
;;;725    							case APP_BRIGHT_CMD:
;;;726    							dome_running_param.bright = st.rxBuf[(st.pRead
;;;727    									+ 4) % RCV_BUFSIZE];
;;;728    							Light_bright_set(
;;;729    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE]);
;;;730    							break;
;;;731    							case APP_SPEED_CMD:
;;;732    							dome_running_param.speed = st.rxBuf[(st.pRead
;;;733    									+ 4) % RCV_BUFSIZE];
;;;734    							break;
;;;735    							case APP_FLASH_INDEX_CMD:
;;;736    							g_tWork.status.bits.DEMO = 0;
;;;737    							app_dome_start_current();
;;;738    							app_dome_start(
;;;739    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;740    									0);
;;;741    							break;
;;;742    							case APP_SWITCH_INDEX_CMD: {
;;;743    								uint8_t switchData = st.rxBuf[(st.pRead + 4)
;;;744    								% RCV_BUFSIZE];
;;;745    								if (((switchData >> 4) & 0x0F) == 0) {
;;;746    									Relay_set(switchData & 0x0F);
;;;747    								}
;;;748    							}
;;;749    							break;
;;;750    							/// app --end
;;;751    							default:
;;;752    							break;
;;;753    						}
;;;754    						st.pRead += len + 4;
;;;755    #if 1
;;;756    						st.pRead = st.pRead % RCV_BUFSIZE;
;;;757    //						break;
;;;758    						return;
;;;759    #endif
;;;760    					}
;;;761    				}
;;;762    			} else {
;;;763    				st.pRead++;
;;;764    			}
;;;765    			st.pRead = st.pRead % RCV_BUFSIZE;
;;;766    		}
;;;767    	}
;;;768    #endif
;;;769    }
0000bc  bdf8              POP      {r3-r7,pc}
                          ENDP

0000be  0000              DCW      0x0000
                  |L3.192|
                          DCD      ||.bss||
                  |L3.196|
                          DCD      ||.data||
                  |L3.200|
0000c8  5b455252          DCB      "[ERROR]   remote control check error!\r\n",0
0000cc  4f525d20
0000d0  20207265
0000d4  6d6f7465
0000d8  20636f6e
0000dc  74726f6c
0000e0  20636865
0000e4  636b2065
0000e8  72726f72
0000ec  210d0a00
                  |L3.240|
                          DCD      ||.constdata||

                          AREA ||i.app_uart_send||, CODE, READONLY, ALIGN=2

                  app_uart_send PROC
;;;32     
;;;33     void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  4604              MOV      r4,r0
000004  b082              SUB      sp,sp,#8
;;;34     	uint8_t index = 0, i = 0;
;;;35     
;;;36     	memset(uart_st.txBuf, 0, sizeof(uart_st.txBuf));
000006  21ff              MOVS     r1,#0xff
000008  481a              LDR      r0,|L4.116|
00000a  4616              MOV      r6,r2                 ;33
00000c  2500              MOVS     r5,#0                 ;34
00000e  3101              ADDS     r1,#1
000010  9000              STR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_memclr
;;;37     
;;;38     	uart_st.txBuf[index++] = 0x55;
000016  9800              LDR      r0,[sp,#0]
000018  2155              MOVS     r1,#0x55
00001a  7001              STRB     r1,[r0,#0]
;;;39     	uart_st.txBuf[index++] = 0xAA;
00001c  4815              LDR      r0,|L4.116|
00001e  21aa              MOVS     r1,#0xaa
000020  1c40              ADDS     r0,r0,#1
000022  7001              STRB     r1,[r0,#0]
;;;40     	uart_st.txBuf[index++] = len + 1;
000024  4913              LDR      r1,|L4.116|
000026  1c70              ADDS     r0,r6,#1
000028  1c89              ADDS     r1,r1,#2
00002a  7008              STRB     r0,[r1,#0]
;;;41     	uart_st.txBuf[index++] = cmd;
00002c  1c48              ADDS     r0,r1,#1
00002e  7004              STRB     r4,[r0,#0]
000030  4f11              LDR      r7,|L4.120|
000032  2404              MOVS     r4,#4
;;;42     	for (i = 0; i < len; i++) {
000034  e00a              B        |L4.76|
                  |L4.54|
;;;43     		uart_st.txBuf[index++] = *(ptr + i);
000036  9803              LDR      r0,[sp,#0xc]
000038  5d41              LDRB     r1,[r0,r5]
00003a  1938              ADDS     r0,r7,r4
00003c  30ff              ADDS     r0,r0,#0xff
00003e  30ff              ADDS     r0,r0,#0xff
000040  3002              ADDS     r0,#2
000042  1c64              ADDS     r4,r4,#1
000044  1c6d              ADDS     r5,r5,#1
000046  7001              STRB     r1,[r0,#0]
000048  b2e4              UXTB     r4,r4
00004a  b2ed              UXTB     r5,r5                 ;42
                  |L4.76|
00004c  42b5              CMP      r5,r6                 ;42
00004e  d3f2              BCC      |L4.54|
000050  1d36              ADDS     r6,r6,#4              ;42
;;;44     	}
;;;45     	uart_st.txBuf[index++] = app_CalcCRC8(uart_st.txBuf, len + 4);
000052  b2f1              UXTB     r1,r6
000054  9800              LDR      r0,[sp,#0]
000056  f7fffffe          BL       app_CalcCRC8
00005a  1939              ADDS     r1,r7,r4
00005c  31ff              ADDS     r1,r1,#0xff
00005e  31ff              ADDS     r1,r1,#0xff
000060  3102              ADDS     r1,#2
000062  7008              STRB     r0,[r1,#0]
000064  1c64              ADDS     r4,r4,#1
000066  b2e2              UXTB     r2,r4
;;;46     	comSendBuf(COM1, uart_st.txBuf, index);
000068  2001              MOVS     r0,#1
00006a  9900              LDR      r1,[sp,#0]
00006c  f7fffffe          BL       comSendBuf
;;;47     
;;;48     //	for (i = 0; i < (len + 5); i++) {
;;;49     //		comSendChar(uart_st.txBuf[i]);
;;;50     //	}
;;;51     }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
;;;52     
                          ENDP

                  |L4.116|
                          DCD      ||.bss||+0x200
                  |L4.120|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  uart_st
                          %        772

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6170705f          DCB      0x61,0x70,0x70,0x5f
000004  75617274          DCB      0x75,0x61,0x72,0x74
000008  5f70726f          DCB      0x5f,0x70,0x72,0x6f
00000c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  len
000000  00                DCB      0x00
                  u8_tmp
000001  00                DCB      0x00
                  tmp
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_uart_c_fe162fbd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REVSH|
#line 402
|__asm___10_app_uart_c_fe162fbd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
