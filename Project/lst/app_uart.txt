; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\app_uart.crf ..\App\src\app_uart.c]
                          THUMB

                          AREA ||i.app_RC_Receiver_cmd_pro||, CODE, READONLY, ALIGN=2

                  app_RC_Receiver_cmd_pro PROC
;;;52     
;;;53     static void app_RC_Receiver_cmd_pro(Uart_ST* st) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;54     
;;;55     	uint8_t index = 0;
;;;56     	uint8_t i = 0;
000004  2400              MOVS     r4,#0
000006  4605              MOV      r5,r0                 ;53
;;;57     	uint8_t buffer[PAYLOAD_WIDTH] = { 0 };
;;;58     
;;;59     	switch (st->rxBuf[(st->pRead + 3) % sizeof(st->rxBuf)]) {
000008  2003              MOVS     r0,#3
00000a  9400              STR      r4,[sp,#0]            ;57
00000c  9401              STR      r4,[sp,#4]            ;57
00000e  9402              STR      r4,[sp,#8]            ;57
000010  0200              LSLS     r0,r0,#8
000012  9403              STR      r4,[sp,#0xc]
000014  182e              ADDS     r6,r5,r0
000016  8873              LDRH     r3,[r6,#2]
000018  49fa              LDR      r1,|L1.1028|
00001a  1cd8              ADDS     r0,r3,#3
00001c  05c0              LSLS     r0,r0,#23
00001e  0dc0              LSRS     r0,r0,#23
;;;60     	case BLINK_METHOD_CMD:  //闪法
;;;61     	{
;;;62     //		break;
;;;63     		uint8_t index = st->rxBuf[(st->pRead + 12) % sizeof(st->rxBuf)];
;;;64     		uint8_t availableGroup = 0;
;;;65     		uint8_t minSpaceBytes = 0;
;;;66     		uint8_t bytes = 0;
;;;67     		if (sizeof(DOME_DEFAULT_T) % 4) {
;;;68     			minSpaceBytes = (sizeof(DOME_DEFAULT_T) / 4) * 4 + 4;
;;;69     		} else {
;;;70     			minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;71     		}
;;;72     		availableGroup = (FMC_APROM_END - DOME_START_ADDR) / minSpaceBytes;
;;;73     
;;;74     		if (index > (availableGroup - 1)) {
;;;75     			break;
;;;76     		}
;;;77     		FMC_ENABLE_AP_UPDATE();
;;;78     		SYS_UnlockReg();
;;;79     		FMC_Open();
;;;80     
;;;81     		if (index == 0) {
;;;82     			u8_tmp = (FMC_APROM_END - DOME_START_ADDR) / FMC_FLASH_PAGE_SIZE;
;;;83     			for (i = 0; i < u8_tmp; i++) {
;;;84     				app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;85     			}
;;;86     		}
;;;87     #if 0
;;;88     		for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;89     			uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;90     			+ (&dome_blink.header.index
;;;91     					- &dome_blink);
;;;92     			app_eeprom_write_byte(addr, 0);
;;;93     			nop
;;;94     		}
;;;95     #endif
;;;96     #if 1
;;;97     		tmp = st->rxBuf[(st->pRead + 13) % sizeof(st->rxBuf)] & 0x0F; //sub mode number
;;;98     
;;;99     		bytes = tmp * sizeof(SUBDOME_T) + sizeof(DOME_HEADER_T);
;;;100    
;;;101    //		if (minSpaceBytes % 4) {
;;;102    //			minSpaceBytes++;
;;;103    //		}
;;;104    
;;;105    		for (i = 0; i < (bytes / 4); i++) {
;;;106    			uint32_t addr = index * minSpaceBytes + i * 4;
;;;107    			uint32_t dt = st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;108    			dt |= st->rxBuf[(st->pRead + 4 + i + 1) % sizeof(st->rxBuf)] << 8;
;;;109    			dt |= st->rxBuf[(st->pRead + 4 + i + 2) % sizeof(st->rxBuf)] << 16;
;;;110    			dt |= st->rxBuf[(st->pRead + 4 + i + 3) % sizeof(st->rxBuf)] << 24;
;;;111    			app_eeprom_write_int(addr, dt);
;;;112    		}
;;;113    		if (bytes % 4) {
;;;114    			uint32_t addr = index * minSpaceBytes + (bytes / 4) * 4;
;;;115    			uint32_t dt = 0;
;;;116    			for (i = 0; i < (bytes % 4); i++) {
;;;117    				switch (i) {
;;;118    				case 0:
;;;119    					dt = st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4)
;;;120    							% sizeof(st->rxBuf)];
;;;121    					break;
;;;122    				case 1:
;;;123    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;124    							% sizeof(st->rxBuf)] << 8;
;;;125    					break;
;;;126    				case 2:
;;;127    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;128    							% sizeof(st->rxBuf)] << 16;
;;;129    					break;
;;;130    				}
;;;131    			}
;;;132    			app_eeprom_write_int(addr, dt);
;;;133    		}
;;;134    
;;;135    		FMC_Close();
;;;136    		SYS_LockReg();
;;;137    		FMC_DISABLE_AP_UPDATE();
;;;138    #endif
;;;139    		u8_tmp = index & 0xFF;
;;;140    		app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;141    	}
;;;142    		break;
;;;143    	case RCV_VOL_CMD:
;;;144    		buffer[index++] = LAMP2LCD_HEADER;
;;;145    		buffer[index++] = len;
000020  780f              LDRB     r7,[r1,#0]
;;;146    		buffer[index++] = RCV_VOL_CMD;
;;;147    		for (i = 0; i < (len - 1); i++) {
000022  4af9              LDR      r2,|L1.1032|
000024  5c28              LDRB     r0,[r5,r0]            ;59
000026  1e79              SUBS     r1,r7,#1
;;;148    			buffer[index++] =
;;;149    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;150    		}
;;;151    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;152    			buffer[index] += buffer[i + 1];
;;;153    		}
;;;154    		index++;
;;;155    		app_2d4_send(buffer, index);
;;;156    		break;
;;;157    	case RCV_POWER_STATUS_CMD:
;;;158    		buffer[index++] = LAMP2LCD_HEADER;
;;;159    		buffer[index++] = len;
;;;160    		buffer[index++] = RCV_POWER_STATUS_CMD;
;;;161    		for (i = 0; i < (len - 1); i++) {
;;;162    			buffer[index++] =
;;;163    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;164    		}
;;;165    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;166    			buffer[index] += buffer[i + 1];
;;;167    		}
;;;168    		index++;
;;;169    		app_2d4_send(buffer, index);
;;;170    		break;
;;;171    #if 0
;;;172    		case RCV_X_BOX_STATUS_CMD:
;;;173    		buffer[index++] = LAMP2LCD_HEADER;
;;;174    		buffer[index++] = len;
;;;175    		buffer[index++] = RCV_X_BOX_STATUS_CMD;
;;;176    		for (i = 0; i < (len - 1); i++) {
;;;177    			buffer[index++] = st->rxBuf[(st->pRead + 4
;;;178    					+ i) % sizeof(st->rxBuf)];
;;;179    		}
;;;180    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;181    			buffer[index] += buffer[i + 1];
;;;182    		}
;;;183    		index++;
;;;184    		app_2d4_send(buffer, index);
;;;185    		break;
;;;186    #endif
;;;187    	case RCV_BT_STATUS_CMD:
;;;188    		buffer[index++] = LAMP2LCD_HEADER;
;;;189    		buffer[index++] = len;
;;;190    		buffer[index++] = RCV_BT_STATUS_CMD;
;;;191    		for (i = 0; i < (len - 1); i++) {
;;;192    			buffer[index++] =
;;;193    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;194    		}
;;;195    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;196    			buffer[index] += buffer[i + 1];
;;;197    		}
;;;198    		index++;
;;;199    		if (g_tWork.status.bits.DOME == 0) {
000028  6812              LDR      r2,[r2,#0]
00002a  2841              CMP      r0,#0x41              ;59
00002c  d07e              BEQ      |L1.300|
00002e  dc20              BGT      |L1.114|
000030  2835              CMP      r0,#0x35              ;59
000032  d07c              BEQ      |L1.302|
000034  dc0f              BGT      |L1.86|
000036  2812              CMP      r0,#0x12              ;59
000038  d059              BEQ      |L1.238|
00003a  2831              CMP      r0,#0x31              ;59
00003c  d078              BEQ      |L1.304|
00003e  2833              CMP      r0,#0x33              ;59
000040  d077              BEQ      |L1.306|
000042  2834              CMP      r0,#0x34              ;59
000044  d12d              BNE      |L1.162|
;;;200    			app_2d4_send(buffer, index);
;;;201    		}
;;;202    		break;
;;;203    	case RCV_PREV_NEXT_CMD:
;;;204    		buffer[index++] = LAMP2LCD_HEADER;
;;;205    		buffer[index++] = len;
;;;206    		buffer[index++] = RCV_PREV_NEXT_CMD;
;;;207    		for (i = 0; i < (len - 1); i++) {
;;;208    			buffer[index++] =
;;;209    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;210    		}
;;;211    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;212    			buffer[index] += buffer[i + 1];
;;;213    		}
;;;214    		index++;
;;;215    		if (g_tWork.status.bits.DOME == 0) {
;;;216    			app_2d4_send(buffer, index);
;;;217    		}
;;;218    		break;
;;;219    	case RCV_USB_PLAY_TIME_CMD:
;;;220    		buffer[index++] = LAMP2LCD_HEADER;
;;;221    		buffer[index++] = len;
;;;222    		buffer[index++] = RCV_USB_PLAY_TIME_CMD;
;;;223    		for (i = 0; i < (len - 1); i++) {
;;;224    			buffer[index++] =
;;;225    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;226    		}
;;;227    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;228    			buffer[index] += buffer[i + 1];
;;;229    		}
;;;230    		index++;
;;;231    		if (g_tWork.status.bits.DOME == 0) {
;;;232    			app_2d4_send(buffer, index);
;;;233    		}
;;;234    		break;
;;;235    	case RCV_FM_HZ_CMD:
;;;236    		buffer[index++] = LAMP2LCD_HEADER;
;;;237    		buffer[index++] = len;
;;;238    		buffer[index++] = RCV_FM_HZ_CMD;
;;;239    		for (i = 0; i < (len - 1); i++) {
;;;240    			buffer[index++] =
;;;241    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;242    		}
;;;243    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;244    			buffer[index] += buffer[i + 1];
;;;245    		}
;;;246    		index++;
;;;247    
;;;248    		if (g_tWork.status.bits.DOME == 0) {
;;;249    			app_2d4_send(buffer, index);
;;;250    		}
;;;251    		break;
;;;252    	case MODE_CHANGE_CMD:   //MODE
;;;253    		buffer[index++] = LAMP2LCD_HEADER;
;;;254    		buffer[index++] = len;
;;;255    		buffer[index++] = MODE_CHANGE_CMD;
;;;256    		for (i = 0; i < (len - 1); i++) {
;;;257    			buffer[index++] =
;;;258    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;259    		}
;;;260    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;261    			buffer[index] += buffer[i + 1];
;;;262    		}
;;;263    		index++;
;;;264    		app_2d4_send(buffer, index);
;;;265    		break;
;;;266    	case RCV_PLAY_PAUSE_STATUS_CMD:
;;;267    		buffer[index++] = LAMP2LCD_HEADER;
000046  20f8              MOVS     r0,#0xf8
000048  466b              MOV      r3,sp
00004a  7018              STRB     r0,[r3,#0]
;;;268    		buffer[index++] = len;
00004c  705f              STRB     r7,[r3,#1]
;;;269    		buffer[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
00004e  2034              MOVS     r0,#0x34
000050  7098              STRB     r0,[r3,#2]
000052  2003              MOVS     r0,#3
;;;270    		for (i = 0; i < (len - 1); i++) {
000054  e20f              B        |L1.1142|
                  |L1.86|
000056  2836              CMP      r0,#0x36              ;59
000058  d06c              BEQ      |L1.308|
00005a  2837              CMP      r0,#0x37              ;59
00005c  d06b              BEQ      |L1.310|
00005e  2838              CMP      r0,#0x38              ;59
000060  d11f              BNE      |L1.162|
000062  20f8              MOVS     r0,#0xf8              ;144
000064  466a              MOV      r2,sp                 ;144
000066  7010              STRB     r0,[r2,#0]            ;144
000068  7057              STRB     r7,[r2,#1]            ;145
00006a  2038              MOVS     r0,#0x38              ;146
00006c  7090              STRB     r0,[r2,#2]            ;146
00006e  2003              MOVS     r0,#3                 ;146
000070  e0fc              B        |L1.620|
                  |L1.114|
000072  49e5              LDR      r1,|L1.1032|
;;;271    			buffer[index++] =
;;;272    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;273    		}
;;;274    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;275    			buffer[index] += buffer[i + 1];
;;;276    		}
;;;277    		index++;
;;;278    		if (g_tWork.status.bits.DOME == 0) {
;;;279    			app_2d4_send(buffer, index);
;;;280    		}
;;;281    		break;
;;;282    	case DEVICE_STA_CMD: {
;;;283    		uint8_t sta[2] = { 0 };
;;;284    		memset(sta, 0, sizeof(sta));
;;;285    		sta[0] |= g_tWork.status.bits.blinkEnable ? 0x80 : 0;
;;;286    		sta[0] |= g_tWork.status.bits.DEMO ? 0x40 : 0;
;;;287    		sta[1] |= Relay_IsOn() ? 0x01 : 0;
;;;288    		app_uart_send(DEVICE_STA_CMD, sta, sizeof(sta));
;;;289    	}
;;;290    		break;
;;;291    		/// app --start
;;;292    	case KEY_CARD_POWER_CMD:
;;;293    		if (g_tWork.status.bits.blinkEnable == 0) {
;;;294    			//								g_tWork.status.bits.pause = 0;
;;;295    			g_tWork.status.bits.blinkEnable = 1;
;;;296    			g_tWork.status.bits.DEMO = 1;
000074  2704              MOVS     r7,#4
000076  6809              LDR      r1,[r1,#0]            ;199
;;;297    			app_dome_start_current();
;;;298    		} else {
;;;299    			//								g_tWork.status.bits.pause = 1;
;;;300    			g_tWork.status.bits.blinkEnable = 0;
;;;301    			g_tWork.status.bits.DEMO = 0;
000078  43b9              BICS     r1,r1,r7
00007a  2864              CMP      r0,#0x64              ;59
00007c  d078              BEQ      |L1.368|
00007e  dc12              BGT      |L1.166|
000080  2854              CMP      r0,#0x54              ;59
000082  d076              BEQ      |L1.370|
000084  2857              CMP      r0,#0x57              ;59
000086  d075              BEQ      |L1.372|
000088  2862              CMP      r0,#0x62              ;59
00008a  d074              BEQ      |L1.374|
00008c  2863              CMP      r0,#0x63              ;59
00008e  d108              BNE      |L1.162|
000090  1d1b              ADDS     r3,r3,#4              ;59
;;;302    			app_dome_stop_current();
;;;303    		}
;;;304    		buffer[index++] = LAMP2LCD_HEADER;
;;;305    		buffer[index++] = 10;
;;;306    		buffer[index++] = KEY_POWER_SHORT_CMD;
;;;307    		buffer[index++] = g_tWork.status.bits.blinkEnable;
;;;308    		app_dome_get_current_Name(buffer + index, 8);
;;;309    		index += 8;
;;;310    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;311    			buffer[index] += buffer[i + 1];
;;;312    		}
;;;313    		index++;
;;;314    		app_2d4_send(buffer, index);
;;;315    		break;
;;;316    	case KEY_CARD_DEMO_CMD:
;;;317    		//							if (g_tWork.status.bits.DEMO) {
;;;318    		//								g_tWork.status.bits.DEMO = 0;
;;;319    		//							} else {
;;;320    		g_tWork.status.bits.DEMO = 1;
;;;321    		//							}
;;;322    		app_dome_start(0, 0);
;;;323    
;;;324    		break;
;;;325    	case APP_COLOR_ATLA_CMD:
;;;326    #if 1
;;;327    		g_tWork.status.bits.DEMO = 0;
;;;328    		app_dome_rgb(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)],
;;;329    				st->rxBuf[(st->pRead + 5) % sizeof(st->rxBuf)],
;;;330    				st->rxBuf[(st->pRead + 6) % sizeof(st->rxBuf)]);
;;;331    #else
;;;332    		app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;333    #endif
;;;334    		break;
;;;335    	case APP_BRIGHT_CMD:
;;;336    		dome_running_param.bright = st->rxBuf[(st->pRead + 4)
000092  05d8              LSLS     r0,r3,#23
000094  0dc0              LSRS     r0,r0,#23
000096  49dd              LDR      r1,|L1.1036|
000098  5c2a              LDRB     r2,[r5,r0]
00009a  700a              STRB     r2,[r1,#0]
;;;337    				% sizeof(st->rxBuf)];
;;;338    		Light_bright_set(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
00009c  5c28              LDRB     r0,[r5,r0]
00009e  f7fffffe          BL       Light_bright_set
                  |L1.162|
;;;339    		break;
;;;340    	case APP_SPEED_CMD:
;;;341    		dome_running_param.speed =
;;;342    				st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;343    		break;
;;;344    	case APP_FLASH_INDEX_CMD:
;;;345    		g_tWork.status.bits.DEMO = 0;
;;;346    		app_dome_start_current();
;;;347    		app_dome_start(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)], 0);
;;;348    		break;
;;;349    	case APP_SWITCH_INDEX_CMD: {
;;;350    		uint8_t switchData = st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;351    		if (((switchData >> 4) & 0x0F) == 0) {
;;;352    			Relay_set(switchData & 0x0F);
;;;353    		}
;;;354    	}
;;;355    		break;
;;;356    		/// app --end
;;;357    	default:
;;;358    		break;
;;;359    	}
;;;360    
;;;361    }
0000a2  b007              ADD      sp,sp,#0x1c
0000a4  bdf0              POP      {r4-r7,pc}
                  |L1.166|
0000a6  2865              CMP      r0,#0x65              ;59
0000a8  d07e              BEQ      |L1.424|
0000aa  2866              CMP      r0,#0x66              ;59
0000ac  d07d              BEQ      |L1.426|
0000ae  28f0              CMP      r0,#0xf0              ;59
0000b0  d1f7              BNE      |L1.162|
0000b2  2000              MOVS     r0,#0                 ;283
0000b4  4669              MOV      r1,sp                 ;285
0000b6  9004              STR      r0,[sp,#0x10]         ;285
0000b8  7c08              LDRB     r0,[r1,#0x10]         ;285
0000ba  0711              LSLS     r1,r2,#28             ;285
0000bc  0fc9              LSRS     r1,r1,#31             ;285
0000be  01c9              LSLS     r1,r1,#7              ;285
0000c0  4308              ORRS     r0,r0,r1              ;285
0000c2  0751              LSLS     r1,r2,#29             ;286
0000c4  0fc9              LSRS     r1,r1,#31             ;286
0000c6  0189              LSLS     r1,r1,#6              ;286
0000c8  4308              ORRS     r0,r0,r1              ;286
0000ca  4669              MOV      r1,sp                 ;286
0000cc  7408              STRB     r0,[r1,#0x10]         ;286
0000ce  f7fffffe          BL       Relay_IsOn
0000d2  2800              CMP      r0,#0                 ;287
0000d4  d000              BEQ      |L1.216|
0000d6  2001              MOVS     r0,#1                 ;287
                  |L1.216|
0000d8  4669              MOV      r1,sp                 ;287
0000da  7c49              LDRB     r1,[r1,#0x11]         ;287
0000dc  2202              MOVS     r2,#2                 ;288
0000de  4308              ORRS     r0,r0,r1              ;287
0000e0  4669              MOV      r1,sp                 ;287
0000e2  7448              STRB     r0,[r1,#0x11]         ;287
0000e4  a904              ADD      r1,sp,#0x10           ;288
0000e6  20f0              MOVS     r0,#0xf0              ;288
                  |L1.232|
0000e8  f7fffffe          BL       app_uart_send
0000ec  e7d9              B        |L1.162|
                  |L1.238|
0000ee  330c              ADDS     r3,r3,#0xc
0000f0  05d8              LSLS     r0,r3,#23             ;63
0000f2  0dc0              LSRS     r0,r0,#23             ;63
0000f4  5c2c              LDRB     r4,[r5,r0]            ;63
0000f6  2074              MOVS     r0,#0x74              ;68
0000f8  9005              STR      r0,[sp,#0x14]         ;74
0000fa  2c2b              CMP      r4,#0x2b              ;74
0000fc  dcd1              BGT      |L1.162|
0000fe  48c4              LDR      r0,|L1.1040|
000100  6801              LDR      r1,[r0,#0]            ;77
000102  2208              MOVS     r2,#8                 ;77
000104  4311              ORRS     r1,r1,r2              ;77
000106  6001              STR      r1,[r0,#0]            ;77
000108  2159              MOVS     r1,#0x59              ;77
00010a  2216              MOVS     r2,#0x16              ;77
00010c  2388              MOVS     r3,#0x88              ;77
                  |L1.270|
00010e  48c1              LDR      r0,|L1.1044|
000110  6001              STR      r1,[r0,#0]            ;77
000112  6002              STR      r2,[r0,#0]            ;77
000114  6003              STR      r3,[r0,#0]            ;77
000116  6800              LDR      r0,[r0,#0]            ;77
000118  2800              CMP      r0,#0                 ;77
00011a  d0f8              BEQ      |L1.270|
00011c  f7fffffe          BL       FMC_Open
000120  2c00              CMP      r4,#0                 ;81
000122  d113              BNE      |L1.332|
000124  48b7              LDR      r0,|L1.1028|
000126  210a              MOVS     r1,#0xa               ;82
000128  7041              STRB     r1,[r0,#1]            ;82
00012a  e005              B        |L1.312|
                  |L1.300|
00012c  e174              B        |L1.1048|
                  |L1.302|
00012e  e0fd              B        |L1.812|
                  |L1.304|
000130  e0af              B        |L1.658|
                  |L1.306|
000132  e0d1              B        |L1.728|
                  |L1.308|
000134  e11e              B        |L1.884|
                  |L1.310|
000136  e141              B        |L1.956|
                  |L1.312|
000138  2700              MOVS     r7,#0                 ;83
                  |L1.314|
00013a  0278              LSLS     r0,r7,#9              ;84
00013c  f7fffffe          BL       app_eeprom_erase
000140  48b0              LDR      r0,|L1.1028|
000142  1c7f              ADDS     r7,r7,#1              ;84
000144  7840              LDRB     r0,[r0,#1]            ;83  ; u8_tmp
000146  b2ff              UXTB     r7,r7                 ;83
000148  4287              CMP      r7,r0                 ;83
00014a  d3f6              BCC      |L1.314|
                  |L1.332|
00014c  8870              LDRH     r0,[r6,#2]            ;97
00014e  49ad              LDR      r1,|L1.1028|
000150  300d              ADDS     r0,r0,#0xd            ;97
000152  05c0              LSLS     r0,r0,#23             ;97
000154  0dc0              LSRS     r0,r0,#23             ;97
000156  5c28              LDRB     r0,[r5,r0]            ;97
000158  2700              MOVS     r7,#0                 ;105
00015a  0700              LSLS     r0,r0,#28             ;97
00015c  0f00              LSRS     r0,r0,#28             ;97
00015e  8048              STRH     r0,[r1,#2]            ;97
000160  210d              MOVS     r1,#0xd               ;99
000162  4348              MULS     r0,r1,r0              ;99
000164  300a              ADDS     r0,r0,#0xa            ;99
000166  b2c0              UXTB     r0,r0                 ;99
000168  9004              STR      r0,[sp,#0x10]         ;105
00016a  0880              LSRS     r0,r0,#2              ;105
00016c  9006              STR      r0,[sp,#0x18]         ;105
00016e  e02b              B        |L1.456|
                  |L1.368|
000170  e1da              B        |L1.1320|
                  |L1.370|
000172  e190              B        |L1.1174|
                  |L1.372|
000174  e1c1              B        |L1.1274|
                  |L1.374|
000176  e1c6              B        |L1.1286|
                  |L1.376|
000178  9805              LDR      r0,[sp,#0x14]         ;106
00017a  00b9              LSLS     r1,r7,#2              ;106
00017c  4360              MULS     r0,r4,r0              ;106
00017e  1843              ADDS     r3,r0,r1              ;106
000180  8870              LDRH     r0,[r6,#2]            ;107
000182  1d39              ADDS     r1,r7,#4              ;107
000184  1841              ADDS     r1,r0,r1              ;107
000186  05c9              LSLS     r1,r1,#23             ;107
000188  0dc9              LSRS     r1,r1,#23             ;107
00018a  5c6a              LDRB     r2,[r5,r1]            ;107
00018c  1d79              ADDS     r1,r7,#5              ;108
00018e  1841              ADDS     r1,r0,r1              ;108
000190  05c9              LSLS     r1,r1,#23             ;108
000192  0dc9              LSRS     r1,r1,#23             ;108
000194  5c69              LDRB     r1,[r5,r1]            ;108
000196  0209              LSLS     r1,r1,#8              ;108
000198  4311              ORRS     r1,r1,r2              ;108
00019a  1dba              ADDS     r2,r7,#6              ;109
00019c  1882              ADDS     r2,r0,r2              ;109
00019e  05d2              LSLS     r2,r2,#23             ;109
0001a0  0dd2              LSRS     r2,r2,#23             ;109
0001a2  5caa              LDRB     r2,[r5,r2]            ;109
0001a4  0412              LSLS     r2,r2,#16             ;109
0001a6  e001              B        |L1.428|
                  |L1.424|
0001a8  e1c5              B        |L1.1334|
                  |L1.426|
0001aa  e1d1              B        |L1.1360|
                  |L1.428|
0001ac  430a              ORRS     r2,r2,r1              ;109
0001ae  1df9              ADDS     r1,r7,#7              ;110
0001b0  1840              ADDS     r0,r0,r1              ;110
0001b2  05c0              LSLS     r0,r0,#23             ;110
0001b4  0dc0              LSRS     r0,r0,#23             ;110
0001b6  5c28              LDRB     r0,[r5,r0]            ;110
0001b8  0601              LSLS     r1,r0,#24             ;110
0001ba  4311              ORRS     r1,r1,r2              ;110
0001bc  4618              MOV      r0,r3                 ;111
0001be  f7fffffe          BL       app_eeprom_write_int
0001c2  1c7f              ADDS     r7,r7,#1              ;111
0001c4  9806              LDR      r0,[sp,#0x18]         ;105
0001c6  b2ff              UXTB     r7,r7                 ;105
                  |L1.456|
0001c8  42b8              CMP      r0,r7                 ;105
0001ca  d8d5              BHI      |L1.376|
0001cc  9804              LDR      r0,[sp,#0x10]         ;113
0001ce  0780              LSLS     r0,r0,#30             ;113
0001d0  d031              BEQ      |L1.566|
0001d2  9904              LDR      r1,[sp,#0x10]         ;114
0001d4  9805              LDR      r0,[sp,#0x14]         ;114
0001d6  088a              LSRS     r2,r1,#2              ;114
0001d8  4360              MULS     r0,r4,r0              ;114
0001da  0092              LSLS     r2,r2,#2              ;114
0001dc  1880              ADDS     r0,r0,r2              ;114
0001de  9b04              LDR      r3,[sp,#0x10]         ;116
0001e0  2100              MOVS     r1,#0                 ;115
0001e2  4684              MOV      r12,r0                ;114
0001e4  079f              LSLS     r7,r3,#30             ;116
0001e6  4608              MOV      r0,r1                 ;116
0001e8  0fbf              LSRS     r7,r7,#30             ;116
0001ea  e01f              B        |L1.556|
                  |L1.492|
0001ec  2800              CMP      r0,#0                 ;117
0001ee  d004              BEQ      |L1.506|
0001f0  2801              CMP      r0,#1                 ;117
0001f2  d009              BEQ      |L1.520|
0001f4  2802              CMP      r0,#2                 ;117
0001f6  d117              BNE      |L1.552|
0001f8  e00e              B        |L1.536|
                  |L1.506|
0001fa  8873              LDRH     r3,[r6,#2]            ;119
0001fc  1d11              ADDS     r1,r2,#4              ;119
0001fe  1859              ADDS     r1,r3,r1              ;119
000200  05c9              LSLS     r1,r1,#23             ;119
000202  0dc9              LSRS     r1,r1,#23             ;119
000204  5c69              LDRB     r1,[r5,r1]            ;119
000206  e00f              B        |L1.552|
                  |L1.520|
000208  8873              LDRH     r3,[r6,#2]            ;123
00020a  189b              ADDS     r3,r3,r2              ;123
00020c  1d5b              ADDS     r3,r3,#5              ;123
00020e  05db              LSLS     r3,r3,#23             ;123
000210  0ddb              LSRS     r3,r3,#23             ;123
000212  5ceb              LDRB     r3,[r5,r3]            ;123
000214  021b              LSLS     r3,r3,#8              ;123
000216  e006              B        |L1.550|
                  |L1.536|
000218  8873              LDRH     r3,[r6,#2]            ;127
00021a  189b              ADDS     r3,r3,r2              ;127
00021c  1d9b              ADDS     r3,r3,#6              ;127
00021e  05db              LSLS     r3,r3,#23             ;127
000220  0ddb              LSRS     r3,r3,#23             ;127
000222  5ceb              LDRB     r3,[r5,r3]            ;127
000224  041b              LSLS     r3,r3,#16             ;127
                  |L1.550|
000226  4319              ORRS     r1,r1,r3              ;123
                  |L1.552|
000228  1c40              ADDS     r0,r0,#1              ;123
00022a  b2c0              UXTB     r0,r0                 ;116
                  |L1.556|
00022c  4287              CMP      r7,r0                 ;116
00022e  d8dd              BHI      |L1.492|
000230  4660              MOV      r0,r12                ;132
000232  f7fffffe          BL       app_eeprom_write_int
                  |L1.566|
000236  f7fffffe          BL       FMC_Close
00023a  4976              LDR      r1,|L1.1044|
00023c  2000              MOVS     r0,#0                 ;135
00023e  6008              STR      r0,[r1,#0]            ;135
000240  4873              LDR      r0,|L1.1040|
000242  6801              LDR      r1,[r0,#0]            ;137
000244  2208              MOVS     r2,#8                 ;137
000246  4391              BICS     r1,r1,r2              ;137
000248  6001              STR      r1,[r0,#0]            ;137
00024a  486e              LDR      r0,|L1.1028|
00024c  2201              MOVS     r2,#1                 ;140
00024e  7044              STRB     r4,[r0,#1]            ;139
000250  1c41              ADDS     r1,r0,#1              ;140
000252  2012              MOVS     r0,#0x12              ;140
000254  e748              B        |L1.232|
                  |L1.598|
000256  8873              LDRH     r3,[r6,#2]            ;148
000258  1d27              ADDS     r7,r4,#4              ;148
00025a  19db              ADDS     r3,r3,r7              ;148
00025c  05db              LSLS     r3,r3,#23             ;148
00025e  0ddb              LSRS     r3,r3,#23             ;148
000260  5ceb              LDRB     r3,[r5,r3]            ;148
000262  5413              STRB     r3,[r2,r0]            ;148
000264  1c40              ADDS     r0,r0,#1              ;148
000266  1c64              ADDS     r4,r4,#1              ;148
000268  b2c0              UXTB     r0,r0                 ;148
00026a  b2e4              UXTB     r4,r4                 ;147
                  |L1.620|
00026c  428c              CMP      r4,r1                 ;147
00026e  dbf2              BLT      |L1.598|
000270  2100              MOVS     r1,#0                 ;151
000272  e006              B        |L1.642|
                  |L1.628|
000274  1854              ADDS     r4,r2,r1              ;152
000276  5c13              LDRB     r3,[r2,r0]            ;152
000278  7864              LDRB     r4,[r4,#1]            ;152
00027a  191b              ADDS     r3,r3,r4              ;152
00027c  1c49              ADDS     r1,r1,#1              ;152
00027e  5413              STRB     r3,[r2,r0]            ;152
000280  b2c9              UXTB     r1,r1                 ;151
                  |L1.642|
000282  7853              LDRB     r3,[r2,#1]            ;151
000284  1c5b              ADDS     r3,r3,#1              ;151
000286  428b              CMP      r3,r1                 ;151
000288  d8f4              BHI      |L1.628|
                  |L1.650|
00028a  1c40              ADDS     r0,r0,#1              ;151
00028c  b2c1              UXTB     r1,r0                 ;154
00028e  4610              MOV      r0,r2                 ;155
000290  e130              B        |L1.1268|
                  |L1.658|
000292  20f8              MOVS     r0,#0xf8              ;158
000294  466a              MOV      r2,sp                 ;158
000296  7010              STRB     r0,[r2,#0]            ;158
000298  7057              STRB     r7,[r2,#1]            ;159
00029a  2031              MOVS     r0,#0x31              ;160
00029c  7090              STRB     r0,[r2,#2]            ;160
00029e  2003              MOVS     r0,#3                 ;160
0002a0  e00a              B        |L1.696|
                  |L1.674|
0002a2  8873              LDRH     r3,[r6,#2]            ;162
0002a4  1d27              ADDS     r7,r4,#4              ;162
0002a6  19db              ADDS     r3,r3,r7              ;162
0002a8  05db              LSLS     r3,r3,#23             ;162
0002aa  0ddb              LSRS     r3,r3,#23             ;162
0002ac  5ceb              LDRB     r3,[r5,r3]            ;162
0002ae  5413              STRB     r3,[r2,r0]            ;162
0002b0  1c40              ADDS     r0,r0,#1              ;162
0002b2  1c64              ADDS     r4,r4,#1              ;162
0002b4  b2c0              UXTB     r0,r0                 ;162
0002b6  b2e4              UXTB     r4,r4                 ;161
                  |L1.696|
0002b8  428c              CMP      r4,r1                 ;161
0002ba  dbf2              BLT      |L1.674|
0002bc  2100              MOVS     r1,#0                 ;165
0002be  e006              B        |L1.718|
                  |L1.704|
0002c0  1854              ADDS     r4,r2,r1              ;166
0002c2  5c13              LDRB     r3,[r2,r0]            ;166
0002c4  7864              LDRB     r4,[r4,#1]            ;166
0002c6  191b              ADDS     r3,r3,r4              ;166
0002c8  1c49              ADDS     r1,r1,#1              ;166
0002ca  5413              STRB     r3,[r2,r0]            ;166
0002cc  b2c9              UXTB     r1,r1                 ;165
                  |L1.718|
0002ce  7853              LDRB     r3,[r2,#1]            ;165
0002d0  1c5b              ADDS     r3,r3,#1              ;165
0002d2  428b              CMP      r3,r1                 ;165
0002d4  d8f4              BHI      |L1.704|
0002d6  e7d8              B        |L1.650|
                  |L1.728|
0002d8  20f8              MOVS     r0,#0xf8              ;188
0002da  466b              MOV      r3,sp                 ;188
0002dc  7018              STRB     r0,[r3,#0]            ;188
0002de  705f              STRB     r7,[r3,#1]            ;189
0002e0  2033              MOVS     r0,#0x33              ;190
0002e2  7098              STRB     r0,[r3,#2]            ;190
0002e4  2003              MOVS     r0,#3                 ;190
0002e6  e00b              B        |L1.768|
                  |L1.744|
0002e8  8873              LDRH     r3,[r6,#2]            ;192
0002ea  1d27              ADDS     r7,r4,#4              ;192
0002ec  19db              ADDS     r3,r3,r7              ;192
0002ee  05db              LSLS     r3,r3,#23             ;192
0002f0  0ddb              LSRS     r3,r3,#23             ;192
0002f2  5cef              LDRB     r7,[r5,r3]            ;192
0002f4  466b              MOV      r3,sp                 ;192
0002f6  541f              STRB     r7,[r3,r0]            ;192
0002f8  1c40              ADDS     r0,r0,#1              ;192
0002fa  1c64              ADDS     r4,r4,#1              ;192
0002fc  b2c0              UXTB     r0,r0                 ;192
0002fe  b2e4              UXTB     r4,r4                 ;191
                  |L1.768|
000300  428c              CMP      r4,r1                 ;191
000302  dbf1              BLT      |L1.744|
000304  2100              MOVS     r1,#0                 ;195
000306  e006              B        |L1.790|
                  |L1.776|
000308  185d              ADDS     r5,r3,r1              ;196
00030a  5c1c              LDRB     r4,[r3,r0]            ;196
00030c  786d              LDRB     r5,[r5,#1]            ;196
00030e  1964              ADDS     r4,r4,r5              ;196
000310  1c49              ADDS     r1,r1,#1              ;196
000312  541c              STRB     r4,[r3,r0]            ;196
000314  b2c9              UXTB     r1,r1                 ;195
                  |L1.790|
000316  785c              LDRB     r4,[r3,#1]            ;195
000318  1c64              ADDS     r4,r4,#1              ;195
00031a  428c              CMP      r4,r1                 ;195
00031c  d8f4              BHI      |L1.776|
                  |L1.798|
00031e  1c40              ADDS     r0,r0,#1              ;195
000320  b2c1              UXTB     r1,r0                 ;198
000322  07d0              LSLS     r0,r2,#31             ;199
000324  d000              BEQ      |L1.808|
000326  e6bc              B        |L1.162|
                  |L1.808|
000328  4618              MOV      r0,r3                 ;279
00032a  e0e3              B        |L1.1268|
                  |L1.812|
00032c  20f8              MOVS     r0,#0xf8              ;204
00032e  466b              MOV      r3,sp                 ;204
000330  7018              STRB     r0,[r3,#0]            ;204
000332  705f              STRB     r7,[r3,#1]            ;205
000334  2035              MOVS     r0,#0x35              ;206
000336  7098              STRB     r0,[r3,#2]            ;206
000338  2003              MOVS     r0,#3                 ;206
00033a  e00b              B        |L1.852|
                  |L1.828|
00033c  8873              LDRH     r3,[r6,#2]            ;208
00033e  1d27              ADDS     r7,r4,#4              ;208
000340  19db              ADDS     r3,r3,r7              ;208
000342  05db              LSLS     r3,r3,#23             ;208
000344  0ddb              LSRS     r3,r3,#23             ;208
000346  5cef              LDRB     r7,[r5,r3]            ;208
000348  466b              MOV      r3,sp                 ;208
00034a  541f              STRB     r7,[r3,r0]            ;208
00034c  1c40              ADDS     r0,r0,#1              ;208
00034e  1c64              ADDS     r4,r4,#1              ;208
000350  b2c0              UXTB     r0,r0                 ;208
000352  b2e4              UXTB     r4,r4                 ;207
                  |L1.852|
000354  428c              CMP      r4,r1                 ;207
000356  dbf1              BLT      |L1.828|
000358  2100              MOVS     r1,#0                 ;211
00035a  e006              B        |L1.874|
                  |L1.860|
00035c  185d              ADDS     r5,r3,r1              ;212
00035e  5c1c              LDRB     r4,[r3,r0]            ;212
000360  786d              LDRB     r5,[r5,#1]            ;212
000362  1964              ADDS     r4,r4,r5              ;212
000364  1c49              ADDS     r1,r1,#1              ;212
000366  541c              STRB     r4,[r3,r0]            ;212
000368  b2c9              UXTB     r1,r1                 ;211
                  |L1.874|
00036a  785c              LDRB     r4,[r3,#1]            ;211
00036c  1c64              ADDS     r4,r4,#1              ;211
00036e  428c              CMP      r4,r1                 ;211
000370  d8f4              BHI      |L1.860|
000372  e7d4              B        |L1.798|
                  |L1.884|
000374  20f8              MOVS     r0,#0xf8              ;220
000376  466b              MOV      r3,sp                 ;220
000378  7018              STRB     r0,[r3,#0]            ;220
00037a  705f              STRB     r7,[r3,#1]            ;221
00037c  2036              MOVS     r0,#0x36              ;222
00037e  7098              STRB     r0,[r3,#2]            ;222
000380  2003              MOVS     r0,#3                 ;222
000382  e00b              B        |L1.924|
                  |L1.900|
000384  8873              LDRH     r3,[r6,#2]            ;224
000386  1d27              ADDS     r7,r4,#4              ;224
000388  19db              ADDS     r3,r3,r7              ;224
00038a  05db              LSLS     r3,r3,#23             ;224
00038c  0ddb              LSRS     r3,r3,#23             ;224
00038e  5cef              LDRB     r7,[r5,r3]            ;224
000390  466b              MOV      r3,sp                 ;224
000392  541f              STRB     r7,[r3,r0]            ;224
000394  1c40              ADDS     r0,r0,#1              ;224
000396  1c64              ADDS     r4,r4,#1              ;224
000398  b2c0              UXTB     r0,r0                 ;224
00039a  b2e4              UXTB     r4,r4                 ;223
                  |L1.924|
00039c  428c              CMP      r4,r1                 ;223
00039e  dbf1              BLT      |L1.900|
0003a0  2100              MOVS     r1,#0                 ;227
0003a2  e006              B        |L1.946|
                  |L1.932|
0003a4  185d              ADDS     r5,r3,r1              ;228
0003a6  5c1c              LDRB     r4,[r3,r0]            ;228
0003a8  786d              LDRB     r5,[r5,#1]            ;228
0003aa  1964              ADDS     r4,r4,r5              ;228
0003ac  1c49              ADDS     r1,r1,#1              ;228
0003ae  541c              STRB     r4,[r3,r0]            ;228
0003b0  b2c9              UXTB     r1,r1                 ;227
                  |L1.946|
0003b2  785c              LDRB     r4,[r3,#1]            ;227
0003b4  1c64              ADDS     r4,r4,#1              ;227
0003b6  428c              CMP      r4,r1                 ;227
0003b8  d8f4              BHI      |L1.932|
0003ba  e7b0              B        |L1.798|
                  |L1.956|
0003bc  20f8              MOVS     r0,#0xf8              ;236
0003be  466b              MOV      r3,sp                 ;236
0003c0  7018              STRB     r0,[r3,#0]            ;236
0003c2  705f              STRB     r7,[r3,#1]            ;237
0003c4  2037              MOVS     r0,#0x37              ;238
0003c6  7098              STRB     r0,[r3,#2]            ;238
0003c8  2003              MOVS     r0,#3                 ;238
0003ca  e00b              B        |L1.996|
                  |L1.972|
0003cc  8873              LDRH     r3,[r6,#2]            ;240
0003ce  1d27              ADDS     r7,r4,#4              ;240
0003d0  19db              ADDS     r3,r3,r7              ;240
0003d2  05db              LSLS     r3,r3,#23             ;240
0003d4  0ddb              LSRS     r3,r3,#23             ;240
0003d6  5cef              LDRB     r7,[r5,r3]            ;240
0003d8  466b              MOV      r3,sp                 ;240
0003da  541f              STRB     r7,[r3,r0]            ;240
0003dc  1c40              ADDS     r0,r0,#1              ;240
0003de  1c64              ADDS     r4,r4,#1              ;240
0003e0  b2c0              UXTB     r0,r0                 ;240
0003e2  b2e4              UXTB     r4,r4                 ;239
                  |L1.996|
0003e4  428c              CMP      r4,r1                 ;239
0003e6  dbf1              BLT      |L1.972|
0003e8  2100              MOVS     r1,#0                 ;243
0003ea  e006              B        |L1.1018|
                  |L1.1004|
0003ec  185d              ADDS     r5,r3,r1              ;244
0003ee  5c1c              LDRB     r4,[r3,r0]            ;244
0003f0  786d              LDRB     r5,[r5,#1]            ;244
0003f2  1964              ADDS     r4,r4,r5              ;244
0003f4  1c49              ADDS     r1,r1,#1              ;244
0003f6  541c              STRB     r4,[r3,r0]            ;244
0003f8  b2c9              UXTB     r1,r1                 ;243
                  |L1.1018|
0003fa  785c              LDRB     r4,[r3,#1]            ;243
0003fc  1c64              ADDS     r4,r4,#1              ;243
0003fe  428c              CMP      r4,r1                 ;243
000400  d8f4              BHI      |L1.1004|
000402  e78c              B        |L1.798|
                  |L1.1028|
                          DCD      ||.data||
                  |L1.1032|
                          DCD      g_tWork
                  |L1.1036|
                          DCD      dome_running_param
                  |L1.1040|
                          DCD      0x5000c000
                  |L1.1044|
                          DCD      0x50000100
                  |L1.1048|
000418  20f8              MOVS     r0,#0xf8              ;253
00041a  466a              MOV      r2,sp                 ;253
00041c  7010              STRB     r0,[r2,#0]            ;253
00041e  7057              STRB     r7,[r2,#1]            ;254
000420  2041              MOVS     r0,#0x41              ;255
000422  7090              STRB     r0,[r2,#2]            ;255
000424  2003              MOVS     r0,#3                 ;255
000426  e00a              B        |L1.1086|
                  |L1.1064|
000428  8873              LDRH     r3,[r6,#2]            ;257
00042a  1d27              ADDS     r7,r4,#4              ;257
00042c  19db              ADDS     r3,r3,r7              ;257
00042e  05db              LSLS     r3,r3,#23             ;257
000430  0ddb              LSRS     r3,r3,#23             ;257
000432  5ceb              LDRB     r3,[r5,r3]            ;257
000434  5413              STRB     r3,[r2,r0]            ;257
000436  1c40              ADDS     r0,r0,#1              ;257
000438  1c64              ADDS     r4,r4,#1              ;257
00043a  b2c0              UXTB     r0,r0                 ;257
00043c  b2e4              UXTB     r4,r4                 ;256
                  |L1.1086|
00043e  428c              CMP      r4,r1                 ;256
000440  dbf2              BLT      |L1.1064|
000442  2100              MOVS     r1,#0                 ;260
000444  e006              B        |L1.1108|
                  |L1.1094|
000446  1854              ADDS     r4,r2,r1              ;261
000448  5c13              LDRB     r3,[r2,r0]            ;261
00044a  7864              LDRB     r4,[r4,#1]            ;261
00044c  191b              ADDS     r3,r3,r4              ;261
00044e  1c49              ADDS     r1,r1,#1              ;261
000450  5413              STRB     r3,[r2,r0]            ;261
000452  b2c9              UXTB     r1,r1                 ;260
                  |L1.1108|
000454  7853              LDRB     r3,[r2,#1]            ;260
000456  1c5b              ADDS     r3,r3,#1              ;260
000458  428b              CMP      r3,r1                 ;260
00045a  d8f4              BHI      |L1.1094|
00045c  e715              B        |L1.650|
                  |L1.1118|
00045e  8873              LDRH     r3,[r6,#2]            ;271
000460  1d27              ADDS     r7,r4,#4              ;271
000462  19db              ADDS     r3,r3,r7              ;271
000464  05db              LSLS     r3,r3,#23             ;271
000466  0ddb              LSRS     r3,r3,#23             ;271
000468  5cef              LDRB     r7,[r5,r3]            ;271
00046a  466b              MOV      r3,sp                 ;271
00046c  541f              STRB     r7,[r3,r0]            ;271
00046e  1c40              ADDS     r0,r0,#1              ;271
000470  1c64              ADDS     r4,r4,#1              ;271
000472  b2c0              UXTB     r0,r0                 ;271
000474  b2e4              UXTB     r4,r4                 ;270
                  |L1.1142|
000476  428c              CMP      r4,r1                 ;270
000478  dbf1              BLT      |L1.1118|
00047a  2100              MOVS     r1,#0                 ;274
00047c  e006              B        |L1.1164|
                  |L1.1150|
00047e  185d              ADDS     r5,r3,r1              ;275
000480  5c1c              LDRB     r4,[r3,r0]            ;275
000482  786d              LDRB     r5,[r5,#1]            ;275
000484  1964              ADDS     r4,r4,r5              ;275
000486  1c49              ADDS     r1,r1,#1              ;275
000488  541c              STRB     r4,[r3,r0]            ;275
00048a  b2c9              UXTB     r1,r1                 ;274
                  |L1.1164|
00048c  785c              LDRB     r4,[r3,#1]            ;274
00048e  1c64              ADDS     r4,r4,#1              ;274
000490  428c              CMP      r4,r1                 ;274
000492  d8f4              BHI      |L1.1150|
000494  e743              B        |L1.798|
                  |L1.1174|
000496  4d34              LDR      r5,|L1.1384|
000498  0710              LSLS     r0,r2,#28             ;293
00049a  d406              BMI      |L1.1194|
00049c  2008              MOVS     r0,#8                 ;295
00049e  4302              ORRS     r2,r2,r0              ;295
0004a0  433a              ORRS     r2,r2,r7              ;296
0004a2  602a              STR      r2,[r5,#0]            ;297  ; g_tWork
0004a4  f7fffffe          BL       app_dome_start_current
0004a8  e005              B        |L1.1206|
                  |L1.1194|
0004aa  2008              MOVS     r0,#8                 ;300
0004ac  4382              BICS     r2,r2,r0              ;300
0004ae  43ba              BICS     r2,r2,r7              ;301
0004b0  602a              STR      r2,[r5,#0]            ;302  ; g_tWork
0004b2  f7fffffe          BL       app_dome_stop_current
                  |L1.1206|
0004b6  21f8              MOVS     r1,#0xf8              ;304
0004b8  466e              MOV      r6,sp                 ;304
0004ba  7031              STRB     r1,[r6,#0]            ;304
0004bc  220a              MOVS     r2,#0xa               ;305
0004be  2101              MOVS     r1,#1                 ;304
0004c0  7072              STRB     r2,[r6,#1]            ;305
0004c2  70b1              STRB     r1,[r6,#2]            ;306
0004c4  7829              LDRB     r1,[r5,#0]            ;307  ; g_tWork
0004c6  a801              ADD      r0,sp,#4              ;308
0004c8  0709              LSLS     r1,r1,#28             ;307
0004ca  0fc9              LSRS     r1,r1,#31             ;307
0004cc  70f1              STRB     r1,[r6,#3]            ;307
0004ce  2108              MOVS     r1,#8                 ;308
0004d0  f7fffffe          BL       app_dome_get_current_Name
0004d4  210c              MOVS     r1,#0xc               ;309
0004d6  e006              B        |L1.1254|
                  |L1.1240|
0004d8  1932              ADDS     r2,r6,r4              ;311
0004da  5c70              LDRB     r0,[r6,r1]            ;311
0004dc  7852              LDRB     r2,[r2,#1]            ;311
0004de  1880              ADDS     r0,r0,r2              ;311
0004e0  1c64              ADDS     r4,r4,#1              ;311
0004e2  5470              STRB     r0,[r6,r1]            ;311
0004e4  b2e4              UXTB     r4,r4                 ;310
                  |L1.1254|
0004e6  4668              MOV      r0,sp                 ;310
0004e8  7840              LDRB     r0,[r0,#1]            ;310
0004ea  1c40              ADDS     r0,r0,#1              ;310
0004ec  42a0              CMP      r0,r4                 ;310
0004ee  d8f3              BHI      |L1.1240|
0004f0  4668              MOV      r0,sp                 ;314
0004f2  1c49              ADDS     r1,r1,#1              ;314
                  |L1.1268|
0004f4  f7fffffe          BL       app_2d4_send
                  |L1.1272|
0004f8  e5d3              B        |L1.162|
                  |L1.1274|
0004fa  481b              LDR      r0,|L1.1384|
0004fc  433a              ORRS     r2,r2,r7              ;320
0004fe  2100              MOVS     r1,#0                 ;322
000500  6002              STR      r2,[r0,#0]            ;322  ; g_tWork
000502  4608              MOV      r0,r1                 ;322
000504  e021              B        |L1.1354|
                  |L1.1286|
000506  4818              LDR      r0,|L1.1384|
000508  6001              STR      r1,[r0,#0]            ;328  ; g_tWork
00050a  1d98              ADDS     r0,r3,#6              ;328
00050c  05c0              LSLS     r0,r0,#23             ;328
00050e  0dc0              LSRS     r0,r0,#23             ;328
000510  5c2a              LDRB     r2,[r5,r0]            ;328
000512  1d58              ADDS     r0,r3,#5              ;328
000514  05c0              LSLS     r0,r0,#23             ;328
000516  0dc0              LSRS     r0,r0,#23             ;328
000518  5c29              LDRB     r1,[r5,r0]            ;328
00051a  1d1b              ADDS     r3,r3,#4              ;328
00051c  05d8              LSLS     r0,r3,#23             ;328
00051e  0dc0              LSRS     r0,r0,#23             ;328
000520  5c28              LDRB     r0,[r5,r0]            ;328
000522  f7fffffe          BL       app_dome_rgb
000526  e5bc              B        |L1.162|
                  |L1.1320|
000528  1d1b              ADDS     r3,r3,#4
00052a  05d8              LSLS     r0,r3,#23             ;341
00052c  0dc0              LSRS     r0,r0,#23             ;341
00052e  5c29              LDRB     r1,[r5,r0]            ;341
000530  480e              LDR      r0,|L1.1388|
000532  7041              STRB     r1,[r0,#1]            ;341
000534  e5b5              B        |L1.162|
                  |L1.1334|
000536  480c              LDR      r0,|L1.1384|
000538  6001              STR      r1,[r0,#0]            ;346  ; g_tWork
00053a  f7fffffe          BL       app_dome_start_current
00053e  8870              LDRH     r0,[r6,#2]            ;347
000540  2100              MOVS     r1,#0                 ;347
000542  1d00              ADDS     r0,r0,#4              ;347
000544  05c0              LSLS     r0,r0,#23             ;347
000546  0dc0              LSRS     r0,r0,#23             ;347
000548  5c28              LDRB     r0,[r5,r0]            ;347
                  |L1.1354|
00054a  f7fffffe          BL       app_dome_start
00054e  e5a8              B        |L1.162|
                  |L1.1360|
000550  1d1b              ADDS     r3,r3,#4
000552  05d8              LSLS     r0,r3,#23             ;350
000554  0dc0              LSRS     r0,r0,#23             ;350
000556  5c28              LDRB     r0,[r5,r0]            ;350
000558  0901              LSRS     r1,r0,#4              ;351
00055a  d1cd              BNE      |L1.1272|
00055c  0700              LSLS     r0,r0,#28             ;352
00055e  0f00              LSRS     r0,r0,#28             ;352
000560  f7fffffe          BL       Relay_set
000564  e59d              B        |L1.162|
;;;362    
                          ENDP

000566  0000              DCW      0x0000
                  |L1.1384|
                          DCD      g_tWork
                  |L1.1388|
                          DCD      dome_running_param

                          AREA ||i.app_uart_Init||, CODE, READONLY, ALIGN=2

                  app_uart_Init PROC
;;;27     
;;;28     void app_uart_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;29     
;;;30     	memset((uint8_t *) &uart_st, 0, sizeof(Uart_ST));
000002  21c1              MOVS     r1,#0xc1
000004  0089              LSLS     r1,r1,#2
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       __aeabi_memclr
;;;31     }
00000c  bd10              POP      {r4,pc}
;;;32     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.app_uart_pro||, CODE, READONLY, ALIGN=2

                  app_uart_pro PROC
;;;362    
;;;363    void app_uart_pro(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;364    	uint8_t ucData = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;365    
;;;366    #if 1
;;;367    	while (1) {
;;;368    
;;;369    		if (comGetChar(COM1, &ucData)) {
;;;370    #if 0
;;;371    //			comSendChar(COM0, ucData);
;;;372    //			log_debug("rcv %02X", ucData);
;;;373    #endif
;;;374    
;;;375    			uart_st.rxBuf[uart_st.pWrite++] = ucData;
000008  4f2a              LDR      r7,|L3.180|
00000a  2003              MOVS     r0,#3
00000c  0200              LSLS     r0,r0,#8
00000e  183c              ADDS     r4,r7,r0
                  |L3.16|
000010  4669              MOV      r1,sp                 ;369
000012  2001              MOVS     r0,#1                 ;369
000014  f7fffffe          BL       comGetChar
000018  2800              CMP      r0,#0                 ;369
00001a  d04a              BEQ      |L3.178|
00001c  4668              MOV      r0,sp
00001e  8821              LDRH     r1,[r4,#0]  ; uart_st
000020  7800              LDRB     r0,[r0,#0]
000022  5478              STRB     r0,[r7,r1]
000024  8820              LDRH     r0,[r4,#0]  ; uart_st
;;;376    			if (uart_st.pWrite >= sizeof(uart_st.rxBuf)) {
000026  2301              MOVS     r3,#1
000028  1c40              ADDS     r0,r0,#1              ;375
00002a  b280              UXTH     r0,r0                 ;375
00002c  025b              LSLS     r3,r3,#9
00002e  8020              STRH     r0,[r4,#0]            ;375
000030  4298              CMP      r0,r3
000032  d301              BCC      |L3.56|
;;;377    				uart_st.pWrite = 0;
000034  2000              MOVS     r0,#0
000036  8020              STRH     r0,[r4,#0]
                  |L3.56|
;;;378    			}
;;;379    
;;;380    			/*
;;;381    			 (0x55,0xAA)...0x00......0x00...0x00,0x00...0x00
;;;382    			 Head..........Length....cmd....Data........crc8()
;;;383    			 */
;;;384    			if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
000038  8862              LDRH     r2,[r4,#2]  ; uart_st
00003a  b280              UXTH     r0,r0
00003c  1a80              SUBS     r0,r0,r2
00003e  05c0              LSLS     r0,r0,#23
000040  0dc0              LSRS     r0,r0,#23
000042  2805              CMP      r0,#5
000044  d9e4              BLS      |L3.16|
;;;385    					% sizeof(uart_st.rxBuf) > 5) {
;;;386    				if (((uart_st.rxBuf[uart_st.pRead]) == 0x55)
000046  5cb9              LDRB     r1,[r7,r2]
000048  2955              CMP      r1,#0x55
00004a  d105              BNE      |L3.88|
;;;387    						&& ((uart_st.rxBuf[(uart_st.pRead + 1)
00004c  1c51              ADDS     r1,r2,#1
00004e  05c9              LSLS     r1,r1,#23
000050  0dc9              LSRS     r1,r1,#23
000052  5c79              LDRB     r1,[r7,r1]
000054  29aa              CMP      r1,#0xaa
000056  d006              BEQ      |L3.102|
                  |L3.88|
000058  1c52              ADDS     r2,r2,#1
;;;388    								% sizeof(uart_st.rxBuf)]) == 0xAA)) {
;;;389    					uint8_t len = uart_st.rxBuf[(uart_st.pRead + 2)
;;;390    							% sizeof(uart_st.rxBuf)];
;;;391    					if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
;;;392    							% sizeof(uart_st.rxBuf) >= (len + 4)) {
;;;393    						if (uart_st.rxBuf[(uart_st.pRead + len + 3)
;;;394    								% sizeof(uart_st.rxBuf)]
;;;395    								!= app_CalcCRC8_cycle(
;;;396    										uart_st.rxBuf + uart_st.pRead, len + 3,
;;;397    										uart_st.pRead, sizeof(uart_st.rxBuf))) {
;;;398    							uart_st.pRead++;
;;;399    							log_err(
;;;400    									"[ERROR]   remote control check error!\r\n");
;;;401    						} else {
;;;402    							/* your code */
;;;403    							app_RC_Receiver_cmd_pro(&uart_st);
;;;404    							uart_st.pRead += len + 4;
;;;405    							uart_st.pRead = uart_st.pRead
;;;406    									% sizeof(uart_st.rxBuf);
;;;407    						}
;;;408    					}
;;;409    				} else {
;;;410    					uart_st.pRead++;
00005a  8062              STRH     r2,[r4,#2]
                  |L3.92|
;;;411    				}
;;;412    				uart_st.pRead = uart_st.pRead % sizeof(uart_st.rxBuf);
00005c  8860              LDRH     r0,[r4,#2]  ; uart_st
00005e  05c0              LSLS     r0,r0,#23
000060  0dc0              LSRS     r0,r0,#23
000062  8060              STRH     r0,[r4,#2]
000064  e7d4              B        |L3.16|
                  |L3.102|
000066  1c91              ADDS     r1,r2,#2              ;389
000068  05c9              LSLS     r1,r1,#23             ;389
00006a  0dc9              LSRS     r1,r1,#23             ;389
00006c  5c7d              LDRB     r5,[r7,r1]            ;389
00006e  1d2e              ADDS     r6,r5,#4              ;391
000070  42b0              CMP      r0,r6                 ;391
000072  d3f3              BCC      |L3.92|
000074  19d0              ADDS     r0,r2,r7              ;393
000076  1ce9              ADDS     r1,r5,#3              ;393
000078  f7fffffe          BL       app_CalcCRC8_cycle
00007c  8861              LDRH     r1,[r4,#2]            ;393  ; uart_st
00007e  1ced              ADDS     r5,r5,#3              ;393
000080  194a              ADDS     r2,r1,r5              ;393
000082  05d2              LSLS     r2,r2,#23             ;393
000084  0dd2              LSRS     r2,r2,#23             ;393
000086  5cba              LDRB     r2,[r7,r2]            ;393
000088  4290              CMP      r0,r2                 ;393
00008a  d009              BEQ      |L3.160|
00008c  1c49              ADDS     r1,r1,#1              ;393
00008e  8061              STRH     r1,[r4,#2]            ;398
000090  21ff              MOVS     r1,#0xff              ;399
000092  a309              ADR      r3,|L3.184|
000094  2202              MOVS     r2,#2                 ;399
000096  3190              ADDS     r1,r1,#0x90           ;399
000098  4811              LDR      r0,|L3.224|
00009a  f7fffffe          BL       LITE_syslog
00009e  e7dd              B        |L3.92|
                  |L3.160|
0000a0  4804              LDR      r0,|L3.180|
0000a2  f7fffffe          BL       app_RC_Receiver_cmd_pro
0000a6  8860              LDRH     r0,[r4,#2]            ;404  ; uart_st
0000a8  1980              ADDS     r0,r0,r6              ;404
0000aa  05c0              LSLS     r0,r0,#23             ;405
0000ac  0dc0              LSRS     r0,r0,#23             ;405
0000ae  8060              STRH     r0,[r4,#2]            ;405
0000b0  e7d4              B        |L3.92|
                  |L3.178|
;;;413    			}
;;;414    			continue;
;;;415    		}
;;;416    		break;
;;;417    
;;;418    	}
;;;419    #else
;;;420    	while (riflag) {
;;;421    		riflag--;
;;;422    		if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE >= 4) {
;;;423    			if (((st.rxBuf[st.pRead]) == 0x55)
;;;424    					&& ((st.rxBuf[(st.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
;;;425    				len = st.rxBuf[(st.pRead + 2) % RCV_BUFSIZE];
;;;426    				if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE
;;;427    						>= (len + 4)) {
;;;428    					if (st.rxBuf[(st.pRead + len + 3) % RCV_BUFSIZE]
;;;429    							!= app_CalcCRC8_cycle(st.rxBuf + st.pRead,
;;;430    									len + 3, st.pRead, RCV_BUFSIZE)) {
;;;431    						st.pRead++;
;;;432    					} else {
;;;433    						uint8_t index = 0;
;;;434    						memset(sendBuf, 0, PAYLOAD_WIDTH);
;;;435    						switch (st.rxBuf[(st.pRead + 3) % RCV_BUFSIZE]) {
;;;436    							case BLINK_METHOD_CMD:  //闪法
;;;437    							{
;;;438    								uint8_t i = 0;
;;;439    								uint16_t index = 0;
;;;440    								index =
;;;441    								st.rxBuf[(st.pRead + 12) % RCV_BUFSIZE];
;;;442    
;;;443    								if (index
;;;444    										>= ((FMC_APROM_END - DOME_START_ADDR)
;;;445    												/ sizeof(DOME_DEFAULT_T) - 1)) {
;;;446    									break;
;;;447    								}
;;;448    								FMC_ENABLE_AP_UPDATE();
;;;449    								SYS_UnlockReg();
;;;450    								FMC_Open();
;;;451    
;;;452    								if (index == 0) {
;;;453    									u8_tmp = (FMC_APROM_END - DOME_START_ADDR)
;;;454    									/ FMC_FLASH_PAGE_SIZE;
;;;455    									for (i = 0; i < u8_tmp; i++) {
;;;456    										app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;457    									}
;;;458    								}
;;;459    #if 0
;;;460    								for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;461    									uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;462    									+ (&dome_blink.header.index
;;;463    											- &dome_blink);
;;;464    									app_eeprom_write_byte(addr, 0);
;;;465    									nop
;;;466    								}
;;;467    #endif
;;;468    #if 1
;;;469    								tmp = st.rxBuf[(st.pRead + 13) % RCV_BUFSIZE]
;;;470    								& 0x0F;  //sub mode number
;;;471    
;;;472    								uint8_t n = (tmp * sizeof(SUBDOME_T)
;;;473    										+ sizeof(DOME_HEADER_T));
;;;474    								uint8_t minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;475    								if (minSpaceBytes % 4) {
;;;476    									minSpaceBytes++;
;;;477    								}
;;;478    
;;;479    								for (i = 0; i < (n / 4); i++) {
;;;480    									uint32_t addr = index * minSpaceBytes + i * 4;
;;;481    									uint32_t dt = st.rxBuf[(st.pRead + 4 + i)
;;;482    									% RCV_BUFSIZE];
;;;483    									dt |= st.rxBuf[(st.pRead + 4 + i + 1)
;;;484    									% RCV_BUFSIZE] << 8;
;;;485    									dt |= st.rxBuf[(st.pRead + 4 + i + 2)
;;;486    									% RCV_BUFSIZE] << 16;
;;;487    									dt |= st.rxBuf[(st.pRead + 4 + i + 3)
;;;488    									% RCV_BUFSIZE] << 24;
;;;489    									app_eeprom_write_int(addr, dt);
;;;490    								}
;;;491    								for (i = 0; i < (n % 4); i++) {
;;;492    									uint32_t addr = index * minSpaceBytes + n / 4
;;;493    									+ 4;
;;;494    									uint32_t dt = 0;
;;;495    									switch (i) {
;;;496    										case 0:
;;;497    										dt = st.rxBuf[(st.pRead + 4 + n / 4)
;;;498    										% RCV_BUFSIZE];
;;;499    										break;
;;;500    										case 1:
;;;501    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;502    												+ i) % RCV_BUFSIZE] << 8;
;;;503    										break;
;;;504    										case 2:
;;;505    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;506    												+ i) % RCV_BUFSIZE] << 16;
;;;507    										break;
;;;508    										case 3:
;;;509    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;510    												+ i) % RCV_BUFSIZE] << 24;
;;;511    										break;
;;;512    									}
;;;513    									app_eeprom_write_int(addr, dt);
;;;514    								}
;;;515    
;;;516    								FMC_Close();
;;;517    								SYS_LockReg();
;;;518    								FMC_DISABLE_AP_UPDATE();
;;;519    #endif
;;;520    								u8_tmp = index & 0xFF;
;;;521    								app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;522    							}
;;;523    							break;
;;;524    							case RCV_VOL_CMD:
;;;525    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;526    							sendBuf[index++] = len;
;;;527    							sendBuf[index++] = RCV_VOL_CMD;
;;;528    							for (i = 0; i < (len - 1); i++) {
;;;529    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;530    										+ i) % RCV_BUFSIZE];
;;;531    							}
;;;532    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;533    								sendBuf[index] += sendBuf[i + 1];
;;;534    							}
;;;535    							index++;
;;;536    							app_2d4_send(sendBuf, index);
;;;537    							break;
;;;538    							case RCV_POWER_STATUS_CMD:
;;;539    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;540    							sendBuf[index++] = len;
;;;541    							sendBuf[index++] = RCV_POWER_STATUS_CMD;
;;;542    							for (i = 0; i < (len - 1); i++) {
;;;543    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;544    										+ i) % RCV_BUFSIZE];
;;;545    							}
;;;546    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;547    								sendBuf[index] += sendBuf[i + 1];
;;;548    							}
;;;549    							index++;
;;;550    							app_2d4_send(sendBuf, index);
;;;551    							break;
;;;552    #if 0
;;;553    							case RCV_X_BOX_STATUS_CMD:
;;;554    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;555    							sendBuf[index++] = len;
;;;556    							sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
;;;557    							for (i = 0; i < (len - 1); i++) {
;;;558    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;559    										+ i) % RCV_BUFSIZE];
;;;560    							}
;;;561    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;562    								sendBuf[index] += sendBuf[i + 1];
;;;563    							}
;;;564    							index++;
;;;565    							app_2d4_send(sendBuf, index);
;;;566    							break;
;;;567    #endif
;;;568    							case RCV_BT_STATUS_CMD:
;;;569    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;570    							sendBuf[index++] = len;
;;;571    							sendBuf[index++] = RCV_BT_STATUS_CMD;
;;;572    							for (i = 0; i < (len - 1); i++) {
;;;573    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;574    										+ i) % RCV_BUFSIZE];
;;;575    							}
;;;576    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;577    								sendBuf[index] += sendBuf[i + 1];
;;;578    							}
;;;579    							index++;
;;;580    							if (g_tWork.status.bits.DOME == 0) {
;;;581    								app_2d4_send(sendBuf, index);
;;;582    							}
;;;583    							break;
;;;584    							case RCV_PREV_NEXT_CMD:
;;;585    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;586    							sendBuf[index++] = len;
;;;587    							sendBuf[index++] = RCV_PREV_NEXT_CMD;
;;;588    							for (i = 0; i < (len - 1); i++) {
;;;589    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;590    										+ i) % RCV_BUFSIZE];
;;;591    							}
;;;592    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;593    								sendBuf[index] += sendBuf[i + 1];
;;;594    							}
;;;595    							index++;
;;;596    							if (g_tWork.status.bits.DOME == 0) {
;;;597    								app_2d4_send(sendBuf, index);
;;;598    							}
;;;599    							break;
;;;600    							case RCV_USB_PLAY_TIME_CMD:
;;;601    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;602    							sendBuf[index++] = len;
;;;603    							sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
;;;604    							for (i = 0; i < (len - 1); i++) {
;;;605    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;606    										+ i) % RCV_BUFSIZE];
;;;607    							}
;;;608    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;609    								sendBuf[index] += sendBuf[i + 1];
;;;610    							}
;;;611    							index++;
;;;612    							if (g_tWork.status.bits.DOME == 0) {
;;;613    								app_2d4_send(sendBuf, index);
;;;614    							}
;;;615    							break;
;;;616    							case RCV_FM_HZ_CMD:
;;;617    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;618    							sendBuf[index++] = len;
;;;619    							sendBuf[index++] = RCV_FM_HZ_CMD;
;;;620    							for (i = 0; i < (len - 1); i++) {
;;;621    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;622    										+ i) % RCV_BUFSIZE];
;;;623    							}
;;;624    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;625    								sendBuf[index] += sendBuf[i + 1];
;;;626    							}
;;;627    							index++;
;;;628    
;;;629    							if (g_tWork.status.bits.DOME == 0) {
;;;630    								app_2d4_send(sendBuf, index);
;;;631    							}
;;;632    							break;
;;;633    							case MODE_CHANGE_CMD:   //MODE
;;;634    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;635    							sendBuf[index++] = len;
;;;636    							sendBuf[index++] = MODE_CHANGE_CMD;
;;;637    							for (i = 0; i < (len - 1); i++) {
;;;638    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;639    										+ i) % RCV_BUFSIZE];
;;;640    							}
;;;641    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;642    								sendBuf[index] += sendBuf[i + 1];
;;;643    							}
;;;644    							index++;
;;;645    							app_2d4_send(sendBuf, index);
;;;646    							break;
;;;647    							case RCV_PLAY_PAUSE_STATUS_CMD:
;;;648    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;649    							sendBuf[index++] = len;
;;;650    							sendBuf[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
;;;651    							for (i = 0; i < (len - 1); i++) {
;;;652    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;653    										+ i) % RCV_BUFSIZE];
;;;654    							}
;;;655    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;656    								sendBuf[index] += sendBuf[i + 1];
;;;657    							}
;;;658    							index++;
;;;659    							if (g_tWork.status.bits.DOME == 0) {
;;;660    								app_2d4_send(sendBuf, index);
;;;661    							}
;;;662    							break;
;;;663    							/// app --start
;;;664    							case KEY_CARD_POWER_CMD:
;;;665    							if (g_tWork.status.bits.blinkEnable == 0) {
;;;666    //								g_tWork.status.bits.pause = 0;
;;;667    								g_tWork.status.bits.blinkEnable = 1;
;;;668    								g_tWork.status.bits.DEMO = 1;
;;;669    								app_dome_start_current();
;;;670    							} else {
;;;671    //								g_tWork.status.bits.pause = 1;
;;;672    								g_tWork.status.bits.blinkEnable = 0;
;;;673    								g_tWork.status.bits.DEMO = 0;
;;;674    								app_dome_stop_current();
;;;675    							}
;;;676    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;677    							sendBuf[index++] = 10;
;;;678    							sendBuf[index++] = KEY_POWER_SHORT_CMD;
;;;679    							sendBuf[index++] = g_tWork.status.bits.blinkEnable;
;;;680    							app_dome_get_current_Name(sendBuf + index, 8);
;;;681    							index += 8;
;;;682    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;683    								sendBuf[index] += sendBuf[i + 1];
;;;684    							}
;;;685    							index++;
;;;686    							app_2d4_send(sendBuf, index);
;;;687    							break;
;;;688    							case KEY_CARD_DEMO_CMD:
;;;689    //							if (g_tWork.status.bits.DEMO) {
;;;690    //								g_tWork.status.bits.DEMO = 0;
;;;691    //							} else {
;;;692    							g_tWork.status.bits.DEMO = 1;
;;;693    //							}
;;;694    							app_dome_start(0, 0);
;;;695    
;;;696    							break;
;;;697    							case APP_COLOR_ATLA_CMD:
;;;698    #if 1
;;;699    							app_dome_rgb(
;;;700    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;701    									st.rxBuf[(st.pRead + 5) % RCV_BUFSIZE],
;;;702    									st.rxBuf[(st.pRead + 6) % RCV_BUFSIZE]);
;;;703    #else
;;;704    							app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;705    #endif
;;;706    							break;
;;;707    							case APP_BRIGHT_CMD:
;;;708    							dome_running_param.bright = st.rxBuf[(st.pRead
;;;709    									+ 4) % RCV_BUFSIZE];
;;;710    							Light_bright_set(
;;;711    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE]);
;;;712    							break;
;;;713    							case APP_SPEED_CMD:
;;;714    							dome_running_param.speed = st.rxBuf[(st.pRead
;;;715    									+ 4) % RCV_BUFSIZE];
;;;716    							break;
;;;717    							case APP_FLASH_INDEX_CMD:
;;;718    							g_tWork.status.bits.DEMO = 0;
;;;719    							app_dome_start_current();
;;;720    							app_dome_start(
;;;721    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;722    									0);
;;;723    							break;
;;;724    							case APP_SWITCH_INDEX_CMD: {
;;;725    								uint8_t switchData = st.rxBuf[(st.pRead + 4)
;;;726    								% RCV_BUFSIZE];
;;;727    								if (((switchData >> 4) & 0x0F) == 0) {
;;;728    									Relay_set(switchData & 0x0F);
;;;729    								}
;;;730    							}
;;;731    							break;
;;;732    							/// app --end
;;;733    							default:
;;;734    							break;
;;;735    						}
;;;736    						st.pRead += len + 4;
;;;737    #if 1
;;;738    						st.pRead = st.pRead % RCV_BUFSIZE;
;;;739    //						break;
;;;740    						return;
;;;741    #endif
;;;742    					}
;;;743    				}
;;;744    			} else {
;;;745    				st.pRead++;
;;;746    			}
;;;747    			st.pRead = st.pRead % RCV_BUFSIZE;
;;;748    		}
;;;749    	}
;;;750    #endif
;;;751    }
0000b2  bdf8              POP      {r3-r7,pc}
                          ENDP

                  |L3.180|
                          DCD      ||.bss||
                  |L3.184|
0000b8  5b455252          DCB      "[ERROR]   remote control check error!\r\n",0
0000bc  4f525d20
0000c0  20207265
0000c4  6d6f7465
0000c8  20636f6e
0000cc  74726f6c
0000d0  20636865
0000d4  636b2065
0000d8  72726f72
0000dc  210d0a00
                  |L3.224|
                          DCD      ||.constdata||

                          AREA ||i.app_uart_send||, CODE, READONLY, ALIGN=2

                  app_uart_send PROC
;;;32     
;;;33     void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  4604              MOV      r4,r0
000004  b082              SUB      sp,sp,#8
;;;34     	uint8_t index = 0, i = 0;
;;;35     
;;;36     	memset(uart_st.txBuf, 0, sizeof(uart_st.txBuf));
000006  21ff              MOVS     r1,#0xff
000008  481a              LDR      r0,|L4.116|
00000a  4616              MOV      r6,r2                 ;33
00000c  2500              MOVS     r5,#0                 ;34
00000e  3101              ADDS     r1,#1
000010  9000              STR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_memclr
;;;37     
;;;38     	uart_st.txBuf[index++] = 0x55;
000016  9800              LDR      r0,[sp,#0]
000018  2155              MOVS     r1,#0x55
00001a  7001              STRB     r1,[r0,#0]
;;;39     	uart_st.txBuf[index++] = 0xAA;
00001c  4815              LDR      r0,|L4.116|
00001e  21aa              MOVS     r1,#0xaa
000020  1c40              ADDS     r0,r0,#1
000022  7001              STRB     r1,[r0,#0]
;;;40     	uart_st.txBuf[index++] = len + 1;
000024  4913              LDR      r1,|L4.116|
000026  1c70              ADDS     r0,r6,#1
000028  1c89              ADDS     r1,r1,#2
00002a  7008              STRB     r0,[r1,#0]
;;;41     	uart_st.txBuf[index++] = cmd;
00002c  1c48              ADDS     r0,r1,#1
00002e  7004              STRB     r4,[r0,#0]
000030  4f11              LDR      r7,|L4.120|
000032  2404              MOVS     r4,#4
;;;42     	for (i = 0; i < len; i++) {
000034  e00a              B        |L4.76|
                  |L4.54|
;;;43     		uart_st.txBuf[index++] = *(ptr + i);
000036  9803              LDR      r0,[sp,#0xc]
000038  5d41              LDRB     r1,[r0,r5]
00003a  1938              ADDS     r0,r7,r4
00003c  30ff              ADDS     r0,r0,#0xff
00003e  30ff              ADDS     r0,r0,#0xff
000040  3002              ADDS     r0,#2
000042  1c64              ADDS     r4,r4,#1
000044  1c6d              ADDS     r5,r5,#1
000046  7001              STRB     r1,[r0,#0]
000048  b2e4              UXTB     r4,r4
00004a  b2ed              UXTB     r5,r5                 ;42
                  |L4.76|
00004c  42b5              CMP      r5,r6                 ;42
00004e  d3f2              BCC      |L4.54|
000050  1d36              ADDS     r6,r6,#4              ;42
;;;44     	}
;;;45     	uart_st.txBuf[index++] = app_CalcCRC8(uart_st.txBuf, len + 4);
000052  b2f1              UXTB     r1,r6
000054  9800              LDR      r0,[sp,#0]
000056  f7fffffe          BL       app_CalcCRC8
00005a  1939              ADDS     r1,r7,r4
00005c  31ff              ADDS     r1,r1,#0xff
00005e  31ff              ADDS     r1,r1,#0xff
000060  3102              ADDS     r1,#2
000062  7008              STRB     r0,[r1,#0]
000064  1c64              ADDS     r4,r4,#1
000066  b2e2              UXTB     r2,r4
;;;46     	comSendBuf(COM1, uart_st.txBuf, index);
000068  2001              MOVS     r0,#1
00006a  9900              LDR      r1,[sp,#0]
00006c  f7fffffe          BL       comSendBuf
;;;47     
;;;48     //	for (i = 0; i < (len + 5); i++) {
;;;49     //		comSendChar(uart_st.txBuf[i]);
;;;50     //	}
;;;51     }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
;;;52     
                          ENDP

                  |L4.116|
                          DCD      ||.bss||+0x200
                  |L4.120|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  uart_st
                          %        772

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6170705f          DCB      0x61,0x70,0x70,0x5f
000004  75617274          DCB      0x75,0x61,0x72,0x74
000008  5f70726f          DCB      0x5f,0x70,0x72,0x6f
00000c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  len
000000  00                DCB      0x00
                  u8_tmp
000001  00                DCB      0x00
                  tmp
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_uart_c_fe162fbd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REVSH|
#line 402
|__asm___10_app_uart_c_fe162fbd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
