; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\app_uart.crf ..\App\src\app_uart.c]
                          THUMB

                          AREA ||i.app_RC_Receiver_cmd_pro||, CODE, READONLY, ALIGN=2

                  app_RC_Receiver_cmd_pro PROC
;;;52     
;;;53     static void app_RC_Receiver_cmd_pro(Uart_ST* st) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b085              SUB      sp,sp,#0x14
;;;54     
;;;55     	uint8_t index = 0;
;;;56     	uint8_t i = 0;
000004  2400              MOVS     r4,#0
000006  4605              MOV      r5,r0                 ;53
;;;57     	uint8_t buffer[PAYLOAD_WIDTH] = { 0 };
;;;58     
;;;59     	switch (st->rxBuf[(st->pRead + 3) % sizeof(st->rxBuf)]) {
000008  2003              MOVS     r0,#3
00000a  9400              STR      r4,[sp,#0]            ;57
00000c  9401              STR      r4,[sp,#4]            ;57
00000e  9402              STR      r4,[sp,#8]            ;57
000010  0200              LSLS     r0,r0,#8
000012  9403              STR      r4,[sp,#0xc]
000014  182e              ADDS     r6,r5,r0
000016  8873              LDRH     r3,[r6,#2]
;;;60     	case BLINK_METHOD_CMD:  //闪法
;;;61     	{
;;;62     		break;
;;;63     		uint16_t index = 0;
;;;64     		index = st->rxBuf[(st->pRead + 12) % sizeof(st->rxBuf)];
;;;65     		if (index
;;;66     				>= ((FMC_APROM_END - DOME_START_ADDR) / sizeof(DOME_DEFAULT_T)
;;;67     						- 1)) {
;;;68     			break;
;;;69     		}
;;;70     		FMC_ENABLE_AP_UPDATE();
;;;71     		SYS_UnlockReg();
;;;72     		FMC_Open();
;;;73     
;;;74     		if (index == 0) {
;;;75     			u8_tmp = (FMC_APROM_END - DOME_START_ADDR) / FMC_FLASH_PAGE_SIZE;
;;;76     			for (i = 0; i < u8_tmp; i++) {
;;;77     				app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;78     			}
;;;79     		}
;;;80     #if 0
;;;81     		for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;82     			uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;83     			+ (&dome_blink.header.index
;;;84     					- &dome_blink);
;;;85     			app_eeprom_write_byte(addr, 0);
;;;86     			nop
;;;87     		}
;;;88     #endif
;;;89     #if 1
;;;90     		tmp = st->rxBuf[(st->pRead + 13) % sizeof(st->rxBuf)] & 0x0F; //sub mode number
;;;91     
;;;92     		uint8_t n = (tmp * sizeof(SUBDOME_T) + sizeof(DOME_HEADER_T));
;;;93     		uint8_t minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;94     		if (minSpaceBytes % 4) {
;;;95     			minSpaceBytes++;
;;;96     		}
;;;97     
;;;98     		for (i = 0; i < (n / 4); i++) {
;;;99     			uint32_t addr = index * minSpaceBytes + i * 4;
;;;100    			uint32_t dt = st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;101    			dt |= st->rxBuf[(st->pRead + 4 + i + 1) % sizeof(st->rxBuf)] << 8;
;;;102    			dt |= st->rxBuf[(st->pRead + 4 + i + 2) % sizeof(st->rxBuf)] << 16;
;;;103    			dt |= st->rxBuf[(st->pRead + 4 + i + 3) % sizeof(st->rxBuf)] << 24;
;;;104    			app_eeprom_write_int(addr, dt);
;;;105    		}
;;;106    		for (i = 0; i < (n % 4); i++) {
;;;107    			uint32_t addr = index * minSpaceBytes + n / 4 + 4;
;;;108    			uint32_t dt = 0;
;;;109    			switch (i) {
;;;110    			case 0:
;;;111    				dt = st->rxBuf[(st->pRead + 4 + n / 4) % sizeof(st->rxBuf)];
;;;112    				break;
;;;113    			case 1:
;;;114    				dt |= st->rxBuf[(st->pRead + 4 + n / 4 + i) % sizeof(st->rxBuf)]
;;;115    						<< 8;
;;;116    				break;
;;;117    			case 2:
;;;118    				dt |= st->rxBuf[(st->pRead + 4 + n / 4 + i) % sizeof(st->rxBuf)]
;;;119    						<< 16;
;;;120    				break;
;;;121    			case 3:
;;;122    				dt |= st->rxBuf[(st->pRead + 4 + n / 4 + i) % sizeof(st->rxBuf)]
;;;123    						<< 24;
;;;124    				break;
;;;125    			}
;;;126    			app_eeprom_write_int(addr, dt);
;;;127    		}
;;;128    
;;;129    		FMC_Close();
;;;130    		SYS_LockReg();
;;;131    		FMC_DISABLE_AP_UPDATE();
;;;132    #endif
;;;133    		u8_tmp = index & 0xFF;
;;;134    		app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;135    	}
;;;136    		break;
;;;137    	case RCV_VOL_CMD:
;;;138    		buffer[index++] = LAMP2LCD_HEADER;
;;;139    		buffer[index++] = len;
000018  49e9              LDR      r1,|L1.960|
00001a  1cd8              ADDS     r0,r3,#3              ;59
00001c  05c0              LSLS     r0,r0,#23             ;59
00001e  0dc0              LSRS     r0,r0,#23             ;59
000020  780f              LDRB     r7,[r1,#0]
;;;140    		buffer[index++] = RCV_VOL_CMD;
;;;141    		for (i = 0; i < (len - 1); i++) {
;;;142    			buffer[index++] =
;;;143    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;144    		}
;;;145    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;146    			buffer[index] += buffer[i + 1];
;;;147    		}
;;;148    		index++;
;;;149    		app_2d4_send(buffer, index);
;;;150    		break;
;;;151    	case RCV_POWER_STATUS_CMD:
;;;152    		buffer[index++] = LAMP2LCD_HEADER;
;;;153    		buffer[index++] = len;
;;;154    		buffer[index++] = RCV_POWER_STATUS_CMD;
;;;155    		for (i = 0; i < (len - 1); i++) {
;;;156    			buffer[index++] =
;;;157    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;158    		}
;;;159    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;160    			buffer[index] += buffer[i + 1];
;;;161    		}
;;;162    		index++;
;;;163    		app_2d4_send(buffer, index);
;;;164    		break;
;;;165    #if 0
;;;166    		case RCV_X_BOX_STATUS_CMD:
;;;167    		buffer[index++] = LAMP2LCD_HEADER;
;;;168    		buffer[index++] = len;
;;;169    		buffer[index++] = RCV_X_BOX_STATUS_CMD;
;;;170    		for (i = 0; i < (len - 1); i++) {
;;;171    			buffer[index++] = st->rxBuf[(st->pRead + 4
;;;172    					+ i) % sizeof(st->rxBuf)];
;;;173    		}
;;;174    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;175    			buffer[index] += buffer[i + 1];
;;;176    		}
;;;177    		index++;
;;;178    		app_2d4_send(buffer, index);
;;;179    		break;
;;;180    #endif
;;;181    	case RCV_BT_STATUS_CMD:
;;;182    		buffer[index++] = LAMP2LCD_HEADER;
;;;183    		buffer[index++] = len;
;;;184    		buffer[index++] = RCV_BT_STATUS_CMD;
;;;185    		for (i = 0; i < (len - 1); i++) {
;;;186    			buffer[index++] =
;;;187    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;188    		}
;;;189    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;190    			buffer[index] += buffer[i + 1];
;;;191    		}
;;;192    		index++;
;;;193    		if (g_tWork.status.bits.DOME == 0) {
000022  4ae8              LDR      r2,|L1.964|
000024  5c28              LDRB     r0,[r5,r0]            ;59
000026  1e79              SUBS     r1,r7,#1              ;141
000028  6812              LDR      r2,[r2,#0]
00002a  2841              CMP      r0,#0x41              ;59
00002c  d06f              BEQ      |L1.270|
00002e  dc20              BGT      |L1.114|
000030  2835              CMP      r0,#0x35              ;59
000032  d06d              BEQ      |L1.272|
000034  dc0f              BGT      |L1.86|
000036  2812              CMP      r0,#0x12              ;59
000038  d038              BEQ      |L1.172|
00003a  2831              CMP      r0,#0x31              ;59
00003c  d06b              BEQ      |L1.278|
00003e  2833              CMP      r0,#0x33              ;59
000040  d068              BEQ      |L1.276|
000042  2834              CMP      r0,#0x34              ;59
000044  d132              BNE      |L1.172|
;;;194    			app_2d4_send(buffer, index);
;;;195    		}
;;;196    		break;
;;;197    	case RCV_PREV_NEXT_CMD:
;;;198    		buffer[index++] = LAMP2LCD_HEADER;
;;;199    		buffer[index++] = len;
;;;200    		buffer[index++] = RCV_PREV_NEXT_CMD;
;;;201    		for (i = 0; i < (len - 1); i++) {
;;;202    			buffer[index++] =
;;;203    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;204    		}
;;;205    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;206    			buffer[index] += buffer[i + 1];
;;;207    		}
;;;208    		index++;
;;;209    		if (g_tWork.status.bits.DOME == 0) {
;;;210    			app_2d4_send(buffer, index);
;;;211    		}
;;;212    		break;
;;;213    	case RCV_USB_PLAY_TIME_CMD:
;;;214    		buffer[index++] = LAMP2LCD_HEADER;
;;;215    		buffer[index++] = len;
;;;216    		buffer[index++] = RCV_USB_PLAY_TIME_CMD;
;;;217    		for (i = 0; i < (len - 1); i++) {
;;;218    			buffer[index++] =
;;;219    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;220    		}
;;;221    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;222    			buffer[index] += buffer[i + 1];
;;;223    		}
;;;224    		index++;
;;;225    		if (g_tWork.status.bits.DOME == 0) {
;;;226    			app_2d4_send(buffer, index);
;;;227    		}
;;;228    		break;
;;;229    	case RCV_FM_HZ_CMD:
;;;230    		buffer[index++] = LAMP2LCD_HEADER;
;;;231    		buffer[index++] = len;
;;;232    		buffer[index++] = RCV_FM_HZ_CMD;
;;;233    		for (i = 0; i < (len - 1); i++) {
;;;234    			buffer[index++] =
;;;235    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;236    		}
;;;237    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;238    			buffer[index] += buffer[i + 1];
;;;239    		}
;;;240    		index++;
;;;241    
;;;242    		if (g_tWork.status.bits.DOME == 0) {
;;;243    			app_2d4_send(buffer, index);
;;;244    		}
;;;245    		break;
;;;246    	case MODE_CHANGE_CMD:   //MODE
;;;247    		buffer[index++] = LAMP2LCD_HEADER;
;;;248    		buffer[index++] = len;
;;;249    		buffer[index++] = MODE_CHANGE_CMD;
;;;250    		for (i = 0; i < (len - 1); i++) {
;;;251    			buffer[index++] =
;;;252    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;253    		}
;;;254    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;255    			buffer[index] += buffer[i + 1];
;;;256    		}
;;;257    		index++;
;;;258    		app_2d4_send(buffer, index);
;;;259    		break;
;;;260    	case RCV_PLAY_PAUSE_STATUS_CMD:
;;;261    		buffer[index++] = LAMP2LCD_HEADER;
000046  20f8              MOVS     r0,#0xf8
000048  466b              MOV      r3,sp
00004a  7018              STRB     r0,[r3,#0]
;;;262    		buffer[index++] = len;
00004c  705f              STRB     r7,[r3,#1]
;;;263    		buffer[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
00004e  2034              MOVS     r0,#0x34
000050  7098              STRB     r0,[r3,#2]
000052  2003              MOVS     r0,#3
;;;264    		for (i = 0; i < (len - 1); i++) {
000054  e14d              B        |L1.754|
                  |L1.86|
000056  2836              CMP      r0,#0x36              ;59
000058  d074              BEQ      |L1.324|
00005a  2837              CMP      r0,#0x37              ;59
00005c  d073              BEQ      |L1.326|
00005e  2838              CMP      r0,#0x38              ;59
000060  d124              BNE      |L1.172|
000062  20f8              MOVS     r0,#0xf8              ;138
000064  466a              MOV      r2,sp                 ;138
000066  7010              STRB     r0,[r2,#0]            ;138
000068  7057              STRB     r7,[r2,#1]            ;139
00006a  2038              MOVS     r0,#0x38              ;140
00006c  7090              STRB     r0,[r2,#2]            ;140
00006e  2003              MOVS     r0,#3                 ;140
000070  e03a              B        |L1.232|
                  |L1.114|
000072  49d4              LDR      r1,|L1.964|
;;;265    			buffer[index++] =
;;;266    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;267    		}
;;;268    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;269    			buffer[index] += buffer[i + 1];
;;;270    		}
;;;271    		index++;
;;;272    		if (g_tWork.status.bits.DOME == 0) {
;;;273    			app_2d4_send(buffer, index);
;;;274    		}
;;;275    		break;
;;;276    		/// app --start
;;;277    	case KEY_CARD_POWER_CMD:
;;;278    		if (g_tWork.status.bits.blinkEnable == 0) {
;;;279    			//								g_tWork.status.bits.pause = 0;
;;;280    			g_tWork.status.bits.blinkEnable = 1;
;;;281    			g_tWork.status.bits.DEMO = 1;
000074  2704              MOVS     r7,#4
000076  6809              LDR      r1,[r1,#0]            ;193
;;;282    			app_dome_start_current();
;;;283    		} else {
;;;284    			//								g_tWork.status.bits.pause = 1;
;;;285    			g_tWork.status.bits.blinkEnable = 0;
;;;286    			g_tWork.status.bits.DEMO = 0;
000078  43b9              BICS     r1,r1,r7
00007a  2863              CMP      r0,#0x63              ;59
00007c  d070              BEQ      |L1.352|
00007e  dc17              BGT      |L1.176|
000080  2854              CMP      r0,#0x54              ;59
000082  d06e              BEQ      |L1.354|
000084  2857              CMP      r0,#0x57              ;59
000086  d06d              BEQ      |L1.356|
000088  2862              CMP      r0,#0x62              ;59
00008a  d10f              BNE      |L1.172|
;;;287    			app_dome_stop_current();
;;;288    		}
;;;289    		buffer[index++] = LAMP2LCD_HEADER;
;;;290    		buffer[index++] = 10;
;;;291    		buffer[index++] = KEY_POWER_SHORT_CMD;
;;;292    		buffer[index++] = g_tWork.status.bits.blinkEnable;
;;;293    		app_dome_get_current_Name(buffer + index, 8);
;;;294    		index += 8;
;;;295    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;296    			buffer[index] += buffer[i + 1];
;;;297    		}
;;;298    		index++;
;;;299    		app_2d4_send(buffer, index);
;;;300    		break;
;;;301    	case KEY_CARD_DEMO_CMD:
;;;302    		//							if (g_tWork.status.bits.DEMO) {
;;;303    		//								g_tWork.status.bits.DEMO = 0;
;;;304    		//							} else {
;;;305    		g_tWork.status.bits.DEMO = 1;
;;;306    		//							}
;;;307    		app_dome_start(0, 0);
;;;308    
;;;309    		break;
;;;310    	case APP_COLOR_ATLA_CMD:
;;;311    #if 1
;;;312    		g_tWork.status.bits.DEMO = 0;
00008c  48cd              LDR      r0,|L1.964|
;;;313    		app_dome_rgb(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)],
00008e  6001              STR      r1,[r0,#0]  ; g_tWork
000090  1d98              ADDS     r0,r3,#6
000092  05c0              LSLS     r0,r0,#23
000094  0dc0              LSRS     r0,r0,#23
000096  5c2a              LDRB     r2,[r5,r0]
000098  1d58              ADDS     r0,r3,#5
00009a  05c0              LSLS     r0,r0,#23
00009c  0dc0              LSRS     r0,r0,#23
00009e  5c29              LDRB     r1,[r5,r0]
0000a0  1d1b              ADDS     r3,r3,#4
0000a2  05d8              LSLS     r0,r3,#23
0000a4  0dc0              LSRS     r0,r0,#23
0000a6  5c28              LDRB     r0,[r5,r0]
0000a8  f7fffffe          BL       app_dome_rgb
                  |L1.172|
;;;314    				st->rxBuf[(st->pRead + 5) % sizeof(st->rxBuf)],
;;;315    				st->rxBuf[(st->pRead + 6) % sizeof(st->rxBuf)]);
;;;316    #else
;;;317    		app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;318    #endif
;;;319    		break;
;;;320    	case APP_BRIGHT_CMD:
;;;321    		dome_running_param.bright = st->rxBuf[(st->pRead + 4)
;;;322    				% sizeof(st->rxBuf)];
;;;323    		Light_bright_set(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
;;;324    		break;
;;;325    	case APP_SPEED_CMD:
;;;326    		dome_running_param.speed =
;;;327    				st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;328    		break;
;;;329    	case APP_FLASH_INDEX_CMD:
;;;330    		g_tWork.status.bits.DEMO = 0;
;;;331    		app_dome_start_current();
;;;332    		app_dome_start(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)], 0);
;;;333    		break;
;;;334    	case APP_SWITCH_INDEX_CMD: {
;;;335    		uint8_t switchData = st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;336    		if (((switchData >> 4) & 0x0F) == 0) {
;;;337    			Relay_set(switchData & 0x0F);
;;;338    		}
;;;339    	}
;;;340    		break;
;;;341    		/// app --end
;;;342    	default:
;;;343    		break;
;;;344    	}
;;;345    
;;;346    }
0000ac  b005              ADD      sp,sp,#0x14
0000ae  bdf0              POP      {r4-r7,pc}
                  |L1.176|
0000b0  2864              CMP      r0,#0x64              ;59
0000b2  d070              BEQ      |L1.406|
0000b4  2865              CMP      r0,#0x65              ;59
0000b6  d06f              BEQ      |L1.408|
0000b8  2866              CMP      r0,#0x66              ;59
0000ba  d1f7              BNE      |L1.172|
0000bc  1d1b              ADDS     r3,r3,#4              ;59
0000be  05d8              LSLS     r0,r3,#23             ;335
0000c0  0dc0              LSRS     r0,r0,#23             ;335
0000c2  5c28              LDRB     r0,[r5,r0]            ;335
0000c4  0901              LSRS     r1,r0,#4              ;336
0000c6  d1f1              BNE      |L1.172|
0000c8  0700              LSLS     r0,r0,#28             ;337
0000ca  0f00              LSRS     r0,r0,#28             ;337
0000cc  f7fffffe          BL       Relay_set
                  |L1.208|
0000d0  e7ec              B        |L1.172|
                  |L1.210|
0000d2  8873              LDRH     r3,[r6,#2]            ;142
0000d4  1d27              ADDS     r7,r4,#4              ;142
0000d6  19db              ADDS     r3,r3,r7              ;142
0000d8  05db              LSLS     r3,r3,#23             ;142
0000da  0ddb              LSRS     r3,r3,#23             ;142
0000dc  5ceb              LDRB     r3,[r5,r3]            ;142
0000de  5413              STRB     r3,[r2,r0]            ;142
0000e0  1c40              ADDS     r0,r0,#1              ;142
0000e2  1c64              ADDS     r4,r4,#1              ;142
0000e4  b2c0              UXTB     r0,r0                 ;142
0000e6  b2e4              UXTB     r4,r4                 ;141
                  |L1.232|
0000e8  428c              CMP      r4,r1                 ;141
0000ea  dbf2              BLT      |L1.210|
0000ec  2100              MOVS     r1,#0                 ;145
0000ee  e006              B        |L1.254|
                  |L1.240|
0000f0  1854              ADDS     r4,r2,r1              ;146
0000f2  5c13              LDRB     r3,[r2,r0]            ;146
0000f4  7864              LDRB     r4,[r4,#1]            ;146
0000f6  191b              ADDS     r3,r3,r4              ;146
0000f8  1c49              ADDS     r1,r1,#1              ;146
0000fa  5413              STRB     r3,[r2,r0]            ;146
0000fc  b2c9              UXTB     r1,r1                 ;145
                  |L1.254|
0000fe  7853              LDRB     r3,[r2,#1]            ;145
000100  1c5b              ADDS     r3,r3,#1              ;145
000102  428b              CMP      r3,r1                 ;145
000104  d8f4              BHI      |L1.240|
                  |L1.262|
000106  1c40              ADDS     r0,r0,#1              ;145
000108  b2c1              UXTB     r1,r0                 ;148
00010a  4610              MOV      r0,r2                 ;149
00010c  e130              B        |L1.880|
                  |L1.270|
00010e  e0c1              B        |L1.660|
                  |L1.272|
000110  e054              B        |L1.444|
000112  e000              B        |L1.278|
                  |L1.276|
000114  e027              B        |L1.358|
                  |L1.278|
000116  20f8              MOVS     r0,#0xf8              ;152
000118  466a              MOV      r2,sp                 ;152
00011a  7010              STRB     r0,[r2,#0]            ;152
00011c  7057              STRB     r7,[r2,#1]            ;153
00011e  2031              MOVS     r0,#0x31              ;154
000120  7090              STRB     r0,[r2,#2]            ;154
000122  2003              MOVS     r0,#3                 ;154
000124  e00a              B        |L1.316|
                  |L1.294|
000126  8873              LDRH     r3,[r6,#2]            ;156
000128  1d27              ADDS     r7,r4,#4              ;156
00012a  19db              ADDS     r3,r3,r7              ;156
00012c  05db              LSLS     r3,r3,#23             ;156
00012e  0ddb              LSRS     r3,r3,#23             ;156
000130  5ceb              LDRB     r3,[r5,r3]            ;156
000132  5413              STRB     r3,[r2,r0]            ;156
000134  1c40              ADDS     r0,r0,#1              ;156
000136  1c64              ADDS     r4,r4,#1              ;156
000138  b2c0              UXTB     r0,r0                 ;156
00013a  b2e4              UXTB     r4,r4                 ;155
                  |L1.316|
00013c  428c              CMP      r4,r1                 ;155
00013e  dbf2              BLT      |L1.294|
000140  2100              MOVS     r1,#0                 ;159
000142  e008              B        |L1.342|
                  |L1.324|
000144  e05e              B        |L1.516|
                  |L1.326|
000146  e081              B        |L1.588|
                  |L1.328|
000148  1854              ADDS     r4,r2,r1              ;160
00014a  5c13              LDRB     r3,[r2,r0]            ;160
00014c  7864              LDRB     r4,[r4,#1]            ;160
00014e  191b              ADDS     r3,r3,r4              ;160
000150  1c49              ADDS     r1,r1,#1              ;160
000152  5413              STRB     r3,[r2,r0]            ;160
000154  b2c9              UXTB     r1,r1                 ;159
                  |L1.342|
000156  7853              LDRB     r3,[r2,#1]            ;159
000158  1c5b              ADDS     r3,r3,#1              ;159
00015a  428b              CMP      r3,r1                 ;159
00015c  d8f4              BHI      |L1.328|
00015e  e7d2              B        |L1.262|
                  |L1.352|
000160  e10f              B        |L1.898|
                  |L1.354|
000162  e0d6              B        |L1.786|
                  |L1.356|
000164  e107              B        |L1.886|
                  |L1.358|
000166  20f8              MOVS     r0,#0xf8              ;182
000168  466b              MOV      r3,sp                 ;182
00016a  7018              STRB     r0,[r3,#0]            ;182
00016c  705f              STRB     r7,[r3,#1]            ;183
00016e  2033              MOVS     r0,#0x33              ;184
000170  7098              STRB     r0,[r3,#2]            ;184
000172  2003              MOVS     r0,#3                 ;184
000174  e00b              B        |L1.398|
                  |L1.374|
000176  8873              LDRH     r3,[r6,#2]            ;186
000178  1d27              ADDS     r7,r4,#4              ;186
00017a  19db              ADDS     r3,r3,r7              ;186
00017c  05db              LSLS     r3,r3,#23             ;186
00017e  0ddb              LSRS     r3,r3,#23             ;186
000180  5cef              LDRB     r7,[r5,r3]            ;186
000182  466b              MOV      r3,sp                 ;186
000184  541f              STRB     r7,[r3,r0]            ;186
000186  1c40              ADDS     r0,r0,#1              ;186
000188  1c64              ADDS     r4,r4,#1              ;186
00018a  b2c0              UXTB     r0,r0                 ;186
00018c  b2e4              UXTB     r4,r4                 ;185
                  |L1.398|
00018e  428c              CMP      r4,r1                 ;185
000190  dbf1              BLT      |L1.374|
000192  2100              MOVS     r1,#0                 ;189
000194  e008              B        |L1.424|
                  |L1.406|
000196  e0fe              B        |L1.918|
                  |L1.408|
000198  e104              B        |L1.932|
                  |L1.410|
00019a  185d              ADDS     r5,r3,r1              ;190
00019c  5c1c              LDRB     r4,[r3,r0]            ;190
00019e  786d              LDRB     r5,[r5,#1]            ;190
0001a0  1964              ADDS     r4,r4,r5              ;190
0001a2  1c49              ADDS     r1,r1,#1              ;190
0001a4  541c              STRB     r4,[r3,r0]            ;190
0001a6  b2c9              UXTB     r1,r1                 ;189
                  |L1.424|
0001a8  785c              LDRB     r4,[r3,#1]            ;189
0001aa  1c64              ADDS     r4,r4,#1              ;189
0001ac  428c              CMP      r4,r1                 ;189
0001ae  d8f4              BHI      |L1.410|
                  |L1.432|
0001b0  1c40              ADDS     r0,r0,#1              ;189
0001b2  b2c1              UXTB     r1,r0                 ;192
0001b4  07d0              LSLS     r0,r2,#31             ;193
0001b6  d18b              BNE      |L1.208|
0001b8  4618              MOV      r0,r3                 ;273
0001ba  e0d9              B        |L1.880|
                  |L1.444|
0001bc  20f8              MOVS     r0,#0xf8              ;198
0001be  466b              MOV      r3,sp                 ;198
0001c0  7018              STRB     r0,[r3,#0]            ;198
0001c2  705f              STRB     r7,[r3,#1]            ;199
0001c4  2035              MOVS     r0,#0x35              ;200
0001c6  7098              STRB     r0,[r3,#2]            ;200
0001c8  2003              MOVS     r0,#3                 ;200
0001ca  e00b              B        |L1.484|
                  |L1.460|
0001cc  8873              LDRH     r3,[r6,#2]            ;202
0001ce  1d27              ADDS     r7,r4,#4              ;202
0001d0  19db              ADDS     r3,r3,r7              ;202
0001d2  05db              LSLS     r3,r3,#23             ;202
0001d4  0ddb              LSRS     r3,r3,#23             ;202
0001d6  5cef              LDRB     r7,[r5,r3]            ;202
0001d8  466b              MOV      r3,sp                 ;202
0001da  541f              STRB     r7,[r3,r0]            ;202
0001dc  1c40              ADDS     r0,r0,#1              ;202
0001de  1c64              ADDS     r4,r4,#1              ;202
0001e0  b2c0              UXTB     r0,r0                 ;202
0001e2  b2e4              UXTB     r4,r4                 ;201
                  |L1.484|
0001e4  428c              CMP      r4,r1                 ;201
0001e6  dbf1              BLT      |L1.460|
0001e8  2100              MOVS     r1,#0                 ;205
0001ea  e006              B        |L1.506|
                  |L1.492|
0001ec  185d              ADDS     r5,r3,r1              ;206
0001ee  5c1c              LDRB     r4,[r3,r0]            ;206
0001f0  786d              LDRB     r5,[r5,#1]            ;206
0001f2  1964              ADDS     r4,r4,r5              ;206
0001f4  1c49              ADDS     r1,r1,#1              ;206
0001f6  541c              STRB     r4,[r3,r0]            ;206
0001f8  b2c9              UXTB     r1,r1                 ;205
                  |L1.506|
0001fa  785c              LDRB     r4,[r3,#1]            ;205
0001fc  1c64              ADDS     r4,r4,#1              ;205
0001fe  428c              CMP      r4,r1                 ;205
000200  d8f4              BHI      |L1.492|
000202  e7d5              B        |L1.432|
                  |L1.516|
000204  20f8              MOVS     r0,#0xf8              ;214
000206  466b              MOV      r3,sp                 ;214
000208  7018              STRB     r0,[r3,#0]            ;214
00020a  705f              STRB     r7,[r3,#1]            ;215
00020c  2036              MOVS     r0,#0x36              ;216
00020e  7098              STRB     r0,[r3,#2]            ;216
000210  2003              MOVS     r0,#3                 ;216
000212  e00b              B        |L1.556|
                  |L1.532|
000214  8873              LDRH     r3,[r6,#2]            ;218
000216  1d27              ADDS     r7,r4,#4              ;218
000218  19db              ADDS     r3,r3,r7              ;218
00021a  05db              LSLS     r3,r3,#23             ;218
00021c  0ddb              LSRS     r3,r3,#23             ;218
00021e  5cef              LDRB     r7,[r5,r3]            ;218
000220  466b              MOV      r3,sp                 ;218
000222  541f              STRB     r7,[r3,r0]            ;218
000224  1c40              ADDS     r0,r0,#1              ;218
000226  1c64              ADDS     r4,r4,#1              ;218
000228  b2c0              UXTB     r0,r0                 ;218
00022a  b2e4              UXTB     r4,r4                 ;217
                  |L1.556|
00022c  428c              CMP      r4,r1                 ;217
00022e  dbf1              BLT      |L1.532|
000230  2100              MOVS     r1,#0                 ;221
000232  e006              B        |L1.578|
                  |L1.564|
000234  185d              ADDS     r5,r3,r1              ;222
000236  5c1c              LDRB     r4,[r3,r0]            ;222
000238  786d              LDRB     r5,[r5,#1]            ;222
00023a  1964              ADDS     r4,r4,r5              ;222
00023c  1c49              ADDS     r1,r1,#1              ;222
00023e  541c              STRB     r4,[r3,r0]            ;222
000240  b2c9              UXTB     r1,r1                 ;221
                  |L1.578|
000242  785c              LDRB     r4,[r3,#1]            ;221
000244  1c64              ADDS     r4,r4,#1              ;221
000246  428c              CMP      r4,r1                 ;221
000248  d8f4              BHI      |L1.564|
00024a  e7b1              B        |L1.432|
                  |L1.588|
00024c  20f8              MOVS     r0,#0xf8              ;230
00024e  466b              MOV      r3,sp                 ;230
000250  7018              STRB     r0,[r3,#0]            ;230
000252  705f              STRB     r7,[r3,#1]            ;231
000254  2037              MOVS     r0,#0x37              ;232
000256  7098              STRB     r0,[r3,#2]            ;232
000258  2003              MOVS     r0,#3                 ;232
00025a  e00b              B        |L1.628|
                  |L1.604|
00025c  8873              LDRH     r3,[r6,#2]            ;234
00025e  1d27              ADDS     r7,r4,#4              ;234
000260  19db              ADDS     r3,r3,r7              ;234
000262  05db              LSLS     r3,r3,#23             ;234
000264  0ddb              LSRS     r3,r3,#23             ;234
000266  5cef              LDRB     r7,[r5,r3]            ;234
000268  466b              MOV      r3,sp                 ;234
00026a  541f              STRB     r7,[r3,r0]            ;234
00026c  1c40              ADDS     r0,r0,#1              ;234
00026e  1c64              ADDS     r4,r4,#1              ;234
000270  b2c0              UXTB     r0,r0                 ;234
000272  b2e4              UXTB     r4,r4                 ;233
                  |L1.628|
000274  428c              CMP      r4,r1                 ;233
000276  dbf1              BLT      |L1.604|
000278  2100              MOVS     r1,#0                 ;237
00027a  e006              B        |L1.650|
                  |L1.636|
00027c  185d              ADDS     r5,r3,r1              ;238
00027e  5c1c              LDRB     r4,[r3,r0]            ;238
000280  786d              LDRB     r5,[r5,#1]            ;238
000282  1964              ADDS     r4,r4,r5              ;238
000284  1c49              ADDS     r1,r1,#1              ;238
000286  541c              STRB     r4,[r3,r0]            ;238
000288  b2c9              UXTB     r1,r1                 ;237
                  |L1.650|
00028a  785c              LDRB     r4,[r3,#1]            ;237
00028c  1c64              ADDS     r4,r4,#1              ;237
00028e  428c              CMP      r4,r1                 ;237
000290  d8f4              BHI      |L1.636|
000292  e78d              B        |L1.432|
                  |L1.660|
000294  20f8              MOVS     r0,#0xf8              ;247
000296  466a              MOV      r2,sp                 ;247
000298  7010              STRB     r0,[r2,#0]            ;247
00029a  7057              STRB     r7,[r2,#1]            ;248
00029c  2041              MOVS     r0,#0x41              ;249
00029e  7090              STRB     r0,[r2,#2]            ;249
0002a0  2003              MOVS     r0,#3                 ;249
0002a2  e00a              B        |L1.698|
                  |L1.676|
0002a4  8873              LDRH     r3,[r6,#2]            ;251
0002a6  1d27              ADDS     r7,r4,#4              ;251
0002a8  19db              ADDS     r3,r3,r7              ;251
0002aa  05db              LSLS     r3,r3,#23             ;251
0002ac  0ddb              LSRS     r3,r3,#23             ;251
0002ae  5ceb              LDRB     r3,[r5,r3]            ;251
0002b0  5413              STRB     r3,[r2,r0]            ;251
0002b2  1c40              ADDS     r0,r0,#1              ;251
0002b4  1c64              ADDS     r4,r4,#1              ;251
0002b6  b2c0              UXTB     r0,r0                 ;251
0002b8  b2e4              UXTB     r4,r4                 ;250
                  |L1.698|
0002ba  428c              CMP      r4,r1                 ;250
0002bc  dbf2              BLT      |L1.676|
0002be  2100              MOVS     r1,#0                 ;254
0002c0  e006              B        |L1.720|
                  |L1.706|
0002c2  1854              ADDS     r4,r2,r1              ;255
0002c4  5c13              LDRB     r3,[r2,r0]            ;255
0002c6  7864              LDRB     r4,[r4,#1]            ;255
0002c8  191b              ADDS     r3,r3,r4              ;255
0002ca  1c49              ADDS     r1,r1,#1              ;255
0002cc  5413              STRB     r3,[r2,r0]            ;255
0002ce  b2c9              UXTB     r1,r1                 ;254
                  |L1.720|
0002d0  7853              LDRB     r3,[r2,#1]            ;254
0002d2  1c5b              ADDS     r3,r3,#1              ;254
0002d4  428b              CMP      r3,r1                 ;254
0002d6  d8f4              BHI      |L1.706|
0002d8  e715              B        |L1.262|
                  |L1.730|
0002da  8873              LDRH     r3,[r6,#2]            ;265
0002dc  1d27              ADDS     r7,r4,#4              ;265
0002de  19db              ADDS     r3,r3,r7              ;265
0002e0  05db              LSLS     r3,r3,#23             ;265
0002e2  0ddb              LSRS     r3,r3,#23             ;265
0002e4  5cef              LDRB     r7,[r5,r3]            ;265
0002e6  466b              MOV      r3,sp                 ;265
0002e8  541f              STRB     r7,[r3,r0]            ;265
0002ea  1c40              ADDS     r0,r0,#1              ;265
0002ec  1c64              ADDS     r4,r4,#1              ;265
0002ee  b2c0              UXTB     r0,r0                 ;265
0002f0  b2e4              UXTB     r4,r4                 ;264
                  |L1.754|
0002f2  428c              CMP      r4,r1                 ;264
0002f4  dbf1              BLT      |L1.730|
0002f6  2100              MOVS     r1,#0                 ;268
0002f8  e006              B        |L1.776|
                  |L1.762|
0002fa  185d              ADDS     r5,r3,r1              ;269
0002fc  5c1c              LDRB     r4,[r3,r0]            ;269
0002fe  786d              LDRB     r5,[r5,#1]            ;269
000300  1964              ADDS     r4,r4,r5              ;269
000302  1c49              ADDS     r1,r1,#1              ;269
000304  541c              STRB     r4,[r3,r0]            ;269
000306  b2c9              UXTB     r1,r1                 ;268
                  |L1.776|
000308  785c              LDRB     r4,[r3,#1]            ;268
00030a  1c64              ADDS     r4,r4,#1              ;268
00030c  428c              CMP      r4,r1                 ;268
00030e  d8f4              BHI      |L1.762|
000310  e74e              B        |L1.432|
                  |L1.786|
000312  4d2c              LDR      r5,|L1.964|
000314  0711              LSLS     r1,r2,#28             ;278
000316  2008              MOVS     r0,#8                 ;280
000318  2900              CMP      r1,#0                 ;278
00031a  db05              BLT      |L1.808|
00031c  4302              ORRS     r2,r2,r0              ;280
00031e  433a              ORRS     r2,r2,r7              ;281
000320  602a              STR      r2,[r5,#0]            ;282  ; g_tWork
000322  f7fffffe          BL       app_dome_start_current
000326  e004              B        |L1.818|
                  |L1.808|
000328  4382              BICS     r2,r2,r0              ;285
00032a  43ba              BICS     r2,r2,r7              ;286
00032c  602a              STR      r2,[r5,#0]            ;287  ; g_tWork
00032e  f7fffffe          BL       app_dome_stop_current
                  |L1.818|
000332  21f8              MOVS     r1,#0xf8              ;289
000334  466e              MOV      r6,sp                 ;289
000336  7031              STRB     r1,[r6,#0]            ;289
000338  220a              MOVS     r2,#0xa               ;290
00033a  2101              MOVS     r1,#1                 ;289
00033c  7072              STRB     r2,[r6,#1]            ;290
00033e  70b1              STRB     r1,[r6,#2]            ;291
000340  7829              LDRB     r1,[r5,#0]            ;292  ; g_tWork
000342  a801              ADD      r0,sp,#4              ;293
000344  0709              LSLS     r1,r1,#28             ;292
000346  0fc9              LSRS     r1,r1,#31             ;292
000348  70f1              STRB     r1,[r6,#3]            ;292
00034a  2108              MOVS     r1,#8                 ;293
00034c  f7fffffe          BL       app_dome_get_current_Name
000350  210c              MOVS     r1,#0xc               ;294
000352  e006              B        |L1.866|
                  |L1.852|
000354  1932              ADDS     r2,r6,r4              ;296
000356  5c70              LDRB     r0,[r6,r1]            ;296
000358  7852              LDRB     r2,[r2,#1]            ;296
00035a  1880              ADDS     r0,r0,r2              ;296
00035c  1c64              ADDS     r4,r4,#1              ;296
00035e  5470              STRB     r0,[r6,r1]            ;296
000360  b2e4              UXTB     r4,r4                 ;295
                  |L1.866|
000362  4668              MOV      r0,sp                 ;295
000364  7840              LDRB     r0,[r0,#1]            ;295
000366  1c40              ADDS     r0,r0,#1              ;295
000368  42a0              CMP      r0,r4                 ;295
00036a  d8f3              BHI      |L1.852|
00036c  4668              MOV      r0,sp                 ;299
00036e  1c49              ADDS     r1,r1,#1              ;299
                  |L1.880|
000370  f7fffffe          BL       app_2d4_send
000374  e69a              B        |L1.172|
                  |L1.886|
000376  4813              LDR      r0,|L1.964|
000378  433a              ORRS     r2,r2,r7              ;305
00037a  2100              MOVS     r1,#0                 ;307
00037c  6002              STR      r2,[r0,#0]            ;307  ; g_tWork
00037e  4608              MOV      r0,r1                 ;307
000380  e01a              B        |L1.952|
                  |L1.898|
000382  1d1b              ADDS     r3,r3,#4              ;309
000384  05d8              LSLS     r0,r3,#23             ;321
000386  0dc0              LSRS     r0,r0,#23             ;321
000388  490f              LDR      r1,|L1.968|
00038a  5c2a              LDRB     r2,[r5,r0]            ;321
00038c  700a              STRB     r2,[r1,#0]            ;321
00038e  5c28              LDRB     r0,[r5,r0]            ;323
000390  f7fffffe          BL       Light_bright_set
000394  e68a              B        |L1.172|
                  |L1.918|
000396  1d1b              ADDS     r3,r3,#4
000398  05d8              LSLS     r0,r3,#23             ;326
00039a  0dc0              LSRS     r0,r0,#23             ;326
00039c  5c29              LDRB     r1,[r5,r0]            ;326
00039e  480a              LDR      r0,|L1.968|
0003a0  7041              STRB     r1,[r0,#1]            ;326
0003a2  e683              B        |L1.172|
                  |L1.932|
0003a4  4807              LDR      r0,|L1.964|
0003a6  6001              STR      r1,[r0,#0]            ;331  ; g_tWork
0003a8  f7fffffe          BL       app_dome_start_current
0003ac  8870              LDRH     r0,[r6,#2]            ;332
0003ae  2100              MOVS     r1,#0                 ;332
0003b0  1d00              ADDS     r0,r0,#4              ;332
0003b2  05c0              LSLS     r0,r0,#23             ;332
0003b4  0dc0              LSRS     r0,r0,#23             ;332
0003b6  5c28              LDRB     r0,[r5,r0]            ;332
                  |L1.952|
0003b8  f7fffffe          BL       app_dome_start
0003bc  e676              B        |L1.172|
;;;347    
                          ENDP

0003be  0000              DCW      0x0000
                  |L1.960|
                          DCD      ||.data||
                  |L1.964|
                          DCD      g_tWork
                  |L1.968|
                          DCD      dome_running_param

                          AREA ||i.app_uart_Init||, CODE, READONLY, ALIGN=2

                  app_uart_Init PROC
;;;27     
;;;28     void app_uart_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;29     
;;;30     	memset((uint8_t *) &uart_st, 0, sizeof(Uart_ST));
000002  21c1              MOVS     r1,#0xc1
000004  0089              LSLS     r1,r1,#2
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       __aeabi_memclr
;;;31     }
00000c  bd10              POP      {r4,pc}
;;;32     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.app_uart_pro||, CODE, READONLY, ALIGN=2

                  app_uart_pro PROC
;;;347    
;;;348    void app_uart_pro(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;349    	uint8_t ucData = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;350    
;;;351    #if 1
;;;352    	while (1) {
;;;353    
;;;354    		if (comGetChar(COM1, &ucData)) {
;;;355    #if 0
;;;356    			comSendChar(COM0, ucData);
;;;357    #endif
;;;358    
;;;359    			uart_st.rxBuf[uart_st.pWrite++] = ucData;
000008  4f2b              LDR      r7,|L3.184|
00000a  2003              MOVS     r0,#3
00000c  0200              LSLS     r0,r0,#8
00000e  183c              ADDS     r4,r7,r0
                  |L3.16|
000010  4669              MOV      r1,sp                 ;354
000012  2001              MOVS     r0,#1                 ;354
000014  f7fffffe          BL       comGetChar
000018  2800              CMP      r0,#0                 ;354
00001a  d04b              BEQ      |L3.180|
00001c  4668              MOV      r0,sp
00001e  8821              LDRH     r1,[r4,#0]  ; uart_st
000020  7800              LDRB     r0,[r0,#0]
000022  5478              STRB     r0,[r7,r1]
000024  8820              LDRH     r0,[r4,#0]  ; uart_st
;;;360    			if (uart_st.pWrite >= sizeof(uart_st.rxBuf)) {
000026  2101              MOVS     r1,#1
000028  1c40              ADDS     r0,r0,#1              ;359
00002a  b280              UXTH     r0,r0                 ;359
00002c  0249              LSLS     r1,r1,#9
00002e  8020              STRH     r0,[r4,#0]            ;359
000030  4288              CMP      r0,r1
000032  d301              BCC      |L3.56|
;;;361    				uart_st.pWrite = 0;
000034  2000              MOVS     r0,#0
000036  8020              STRH     r0,[r4,#0]
                  |L3.56|
;;;362    			}
;;;363    
;;;364    			/*
;;;365    			 (0x55,0xAA)...0x00......0x00...0x00,0x00...0x00
;;;366    			 Head..........Length....cmd....Data........crc8()
;;;367    			 */
;;;368    			if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
000038  b281              UXTH     r1,r0
00003a  8860              LDRH     r0,[r4,#2]  ; uart_st
00003c  1a09              SUBS     r1,r1,r0
00003e  05c9              LSLS     r1,r1,#23
000040  0dc9              LSRS     r1,r1,#23
000042  2905              CMP      r1,#5
000044  d9e4              BLS      |L3.16|
;;;369    					% sizeof(uart_st.rxBuf) > 5) {
;;;370    				if (((uart_st.rxBuf[uart_st.pRead]) == 0x55)
000046  5c3a              LDRB     r2,[r7,r0]
000048  2a55              CMP      r2,#0x55
00004a  d105              BNE      |L3.88|
;;;371    						&& ((uart_st.rxBuf[(uart_st.pRead + 1)
00004c  1c42              ADDS     r2,r0,#1
00004e  05d2              LSLS     r2,r2,#23
000050  0dd2              LSRS     r2,r2,#23
000052  5cba              LDRB     r2,[r7,r2]
000054  2aaa              CMP      r2,#0xaa
000056  d001              BEQ      |L3.92|
                  |L3.88|
000058  1c40              ADDS     r0,r0,#1
;;;372    								% sizeof(uart_st.rxBuf)]) == 0xAA)) {
;;;373    					uint8_t len = uart_st.rxBuf[(uart_st.pRead + 2)
;;;374    							% sizeof(uart_st.rxBuf)];
;;;375    					if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
;;;376    							% sizeof(uart_st.rxBuf) >= (len + 4)) {
;;;377    						if (uart_st.rxBuf[(uart_st.pRead + len + 3)
;;;378    								% sizeof(uart_st.rxBuf)]
;;;379    								!= app_CalcCRC8_cycle(
;;;380    										uart_st.rxBuf + uart_st.pRead, len + 3,
;;;381    										uart_st.pRead, sizeof(uart_st.rxBuf))) {
;;;382    							uart_st.pRead++;
;;;383    							log_err(
;;;384    									"[ERROR]   remote control check error!\r\n");
;;;385    						} else {
;;;386    							/* your code */
;;;387    							app_RC_Receiver_cmd_pro(&uart_st);
;;;388    							uart_st.pRead += len + 4;
;;;389    							uart_st.pRead = uart_st.pRead
;;;390    									% sizeof(uart_st.rxBuf);
;;;391    						}
;;;392    					}
;;;393    				} else {
;;;394    					uart_st.pRead++;
00005a  e025              B        |L3.168|
                  |L3.92|
00005c  1c82              ADDS     r2,r0,#2              ;373
00005e  05d2              LSLS     r2,r2,#23             ;373
000060  0dd2              LSRS     r2,r2,#23             ;373
000062  5cbe              LDRB     r6,[r7,r2]            ;373
000064  1d35              ADDS     r5,r6,#4              ;373
000066  42a9              CMP      r1,r5                 ;375
000068  d31f              BCC      |L3.170|
00006a  b2c2              UXTB     r2,r0                 ;377
00006c  1cf6              ADDS     r6,r6,#3              ;377
00006e  b2f1              UXTB     r1,r6                 ;377
000070  19c0              ADDS     r0,r0,r7              ;377
000072  2300              MOVS     r3,#0                 ;377
000074  f7fffffe          BL       app_CalcCRC8_cycle
000078  8861              LDRH     r1,[r4,#2]            ;377  ; uart_st
00007a  198a              ADDS     r2,r1,r6              ;377
00007c  05d2              LSLS     r2,r2,#23             ;377
00007e  0dd2              LSRS     r2,r2,#23             ;377
000080  5cba              LDRB     r2,[r7,r2]            ;377
000082  4290              CMP      r0,r2                 ;377
000084  d009              BEQ      |L3.154|
000086  1c49              ADDS     r1,r1,#1              ;377
000088  8061              STRH     r1,[r4,#2]            ;382
00008a  21ff              MOVS     r1,#0xff              ;383
00008c  a30b              ADR      r3,|L3.188|
00008e  2202              MOVS     r2,#2                 ;383
000090  3180              ADDS     r1,r1,#0x80           ;383
000092  4814              LDR      r0,|L3.228|
000094  f7fffffe          BL       LITE_syslog
000098  e007              B        |L3.170|
                  |L3.154|
00009a  4807              LDR      r0,|L3.184|
00009c  f7fffffe          BL       app_RC_Receiver_cmd_pro
0000a0  8860              LDRH     r0,[r4,#2]            ;388  ; uart_st
0000a2  1940              ADDS     r0,r0,r5              ;388
0000a4  05c0              LSLS     r0,r0,#23             ;389
0000a6  0dc0              LSRS     r0,r0,#23             ;389
                  |L3.168|
0000a8  8060              STRH     r0,[r4,#2]            ;389
                  |L3.170|
;;;395    				}
;;;396    				uart_st.pRead = uart_st.pRead % sizeof(uart_st.rxBuf);
0000aa  8860              LDRH     r0,[r4,#2]  ; uart_st
0000ac  05c0              LSLS     r0,r0,#23
0000ae  0dc0              LSRS     r0,r0,#23
0000b0  8060              STRH     r0,[r4,#2]
0000b2  e7ad              B        |L3.16|
                  |L3.180|
;;;397    			}
;;;398    			continue;
;;;399    		}
;;;400    		break;
;;;401    
;;;402    	}
;;;403    #else
;;;404    	while (riflag) {
;;;405    		riflag--;
;;;406    		if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE >= 4) {
;;;407    			if (((st.rxBuf[st.pRead]) == 0x55)
;;;408    					&& ((st.rxBuf[(st.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
;;;409    				len = st.rxBuf[(st.pRead + 2) % RCV_BUFSIZE];
;;;410    				if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE
;;;411    						>= (len + 4)) {
;;;412    					if (st.rxBuf[(st.pRead + len + 3) % RCV_BUFSIZE]
;;;413    							!= app_CalcCRC8_cycle(st.rxBuf + st.pRead,
;;;414    									len + 3, st.pRead, RCV_BUFSIZE)) {
;;;415    						st.pRead++;
;;;416    					} else {
;;;417    						uint8_t index = 0;
;;;418    						memset(sendBuf, 0, PAYLOAD_WIDTH);
;;;419    						switch (st.rxBuf[(st.pRead + 3) % RCV_BUFSIZE]) {
;;;420    							case BLINK_METHOD_CMD:  //闪法
;;;421    							{
;;;422    								uint8_t i = 0;
;;;423    								uint16_t index = 0;
;;;424    								index =
;;;425    								st.rxBuf[(st.pRead + 12) % RCV_BUFSIZE];
;;;426    
;;;427    								if (index
;;;428    										>= ((FMC_APROM_END - DOME_START_ADDR)
;;;429    												/ sizeof(DOME_DEFAULT_T) - 1)) {
;;;430    									break;
;;;431    								}
;;;432    								FMC_ENABLE_AP_UPDATE();
;;;433    								SYS_UnlockReg();
;;;434    								FMC_Open();
;;;435    
;;;436    								if (index == 0) {
;;;437    									u8_tmp = (FMC_APROM_END - DOME_START_ADDR)
;;;438    									/ FMC_FLASH_PAGE_SIZE;
;;;439    									for (i = 0; i < u8_tmp; i++) {
;;;440    										app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;441    									}
;;;442    								}
;;;443    #if 0
;;;444    								for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;445    									uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;446    									+ (&dome_blink.header.index
;;;447    											- &dome_blink);
;;;448    									app_eeprom_write_byte(addr, 0);
;;;449    									nop
;;;450    								}
;;;451    #endif
;;;452    #if 1
;;;453    								tmp = st.rxBuf[(st.pRead + 13) % RCV_BUFSIZE]
;;;454    								& 0x0F;  //sub mode number
;;;455    
;;;456    								uint8_t n = (tmp * sizeof(SUBDOME_T)
;;;457    										+ sizeof(DOME_HEADER_T));
;;;458    								uint8_t minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;459    								if (minSpaceBytes % 4) {
;;;460    									minSpaceBytes++;
;;;461    								}
;;;462    
;;;463    								for (i = 0; i < (n / 4); i++) {
;;;464    									uint32_t addr = index * minSpaceBytes + i * 4;
;;;465    									uint32_t dt = st.rxBuf[(st.pRead + 4 + i)
;;;466    									% RCV_BUFSIZE];
;;;467    									dt |= st.rxBuf[(st.pRead + 4 + i + 1)
;;;468    									% RCV_BUFSIZE] << 8;
;;;469    									dt |= st.rxBuf[(st.pRead + 4 + i + 2)
;;;470    									% RCV_BUFSIZE] << 16;
;;;471    									dt |= st.rxBuf[(st.pRead + 4 + i + 3)
;;;472    									% RCV_BUFSIZE] << 24;
;;;473    									app_eeprom_write_int(addr, dt);
;;;474    								}
;;;475    								for (i = 0; i < (n % 4); i++) {
;;;476    									uint32_t addr = index * minSpaceBytes + n / 4
;;;477    									+ 4;
;;;478    									uint32_t dt = 0;
;;;479    									switch (i) {
;;;480    										case 0:
;;;481    										dt = st.rxBuf[(st.pRead + 4 + n / 4)
;;;482    										% RCV_BUFSIZE];
;;;483    										break;
;;;484    										case 1:
;;;485    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;486    												+ i) % RCV_BUFSIZE] << 8;
;;;487    										break;
;;;488    										case 2:
;;;489    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;490    												+ i) % RCV_BUFSIZE] << 16;
;;;491    										break;
;;;492    										case 3:
;;;493    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;494    												+ i) % RCV_BUFSIZE] << 24;
;;;495    										break;
;;;496    									}
;;;497    									app_eeprom_write_int(addr, dt);
;;;498    								}
;;;499    
;;;500    								FMC_Close();
;;;501    								SYS_LockReg();
;;;502    								FMC_DISABLE_AP_UPDATE();
;;;503    #endif
;;;504    								u8_tmp = index & 0xFF;
;;;505    								app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;506    							}
;;;507    							break;
;;;508    							case RCV_VOL_CMD:
;;;509    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;510    							sendBuf[index++] = len;
;;;511    							sendBuf[index++] = RCV_VOL_CMD;
;;;512    							for (i = 0; i < (len - 1); i++) {
;;;513    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;514    										+ i) % RCV_BUFSIZE];
;;;515    							}
;;;516    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;517    								sendBuf[index] += sendBuf[i + 1];
;;;518    							}
;;;519    							index++;
;;;520    							app_2d4_send(sendBuf, index);
;;;521    							break;
;;;522    							case RCV_POWER_STATUS_CMD:
;;;523    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;524    							sendBuf[index++] = len;
;;;525    							sendBuf[index++] = RCV_POWER_STATUS_CMD;
;;;526    							for (i = 0; i < (len - 1); i++) {
;;;527    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;528    										+ i) % RCV_BUFSIZE];
;;;529    							}
;;;530    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;531    								sendBuf[index] += sendBuf[i + 1];
;;;532    							}
;;;533    							index++;
;;;534    							app_2d4_send(sendBuf, index);
;;;535    							break;
;;;536    #if 0
;;;537    							case RCV_X_BOX_STATUS_CMD:
;;;538    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;539    							sendBuf[index++] = len;
;;;540    							sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
;;;541    							for (i = 0; i < (len - 1); i++) {
;;;542    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;543    										+ i) % RCV_BUFSIZE];
;;;544    							}
;;;545    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;546    								sendBuf[index] += sendBuf[i + 1];
;;;547    							}
;;;548    							index++;
;;;549    							app_2d4_send(sendBuf, index);
;;;550    							break;
;;;551    #endif
;;;552    							case RCV_BT_STATUS_CMD:
;;;553    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;554    							sendBuf[index++] = len;
;;;555    							sendBuf[index++] = RCV_BT_STATUS_CMD;
;;;556    							for (i = 0; i < (len - 1); i++) {
;;;557    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;558    										+ i) % RCV_BUFSIZE];
;;;559    							}
;;;560    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;561    								sendBuf[index] += sendBuf[i + 1];
;;;562    							}
;;;563    							index++;
;;;564    							if (g_tWork.status.bits.DOME == 0) {
;;;565    								app_2d4_send(sendBuf, index);
;;;566    							}
;;;567    							break;
;;;568    							case RCV_PREV_NEXT_CMD:
;;;569    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;570    							sendBuf[index++] = len;
;;;571    							sendBuf[index++] = RCV_PREV_NEXT_CMD;
;;;572    							for (i = 0; i < (len - 1); i++) {
;;;573    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;574    										+ i) % RCV_BUFSIZE];
;;;575    							}
;;;576    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;577    								sendBuf[index] += sendBuf[i + 1];
;;;578    							}
;;;579    							index++;
;;;580    							if (g_tWork.status.bits.DOME == 0) {
;;;581    								app_2d4_send(sendBuf, index);
;;;582    							}
;;;583    							break;
;;;584    							case RCV_USB_PLAY_TIME_CMD:
;;;585    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;586    							sendBuf[index++] = len;
;;;587    							sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
;;;588    							for (i = 0; i < (len - 1); i++) {
;;;589    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;590    										+ i) % RCV_BUFSIZE];
;;;591    							}
;;;592    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;593    								sendBuf[index] += sendBuf[i + 1];
;;;594    							}
;;;595    							index++;
;;;596    							if (g_tWork.status.bits.DOME == 0) {
;;;597    								app_2d4_send(sendBuf, index);
;;;598    							}
;;;599    							break;
;;;600    							case RCV_FM_HZ_CMD:
;;;601    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;602    							sendBuf[index++] = len;
;;;603    							sendBuf[index++] = RCV_FM_HZ_CMD;
;;;604    							for (i = 0; i < (len - 1); i++) {
;;;605    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;606    										+ i) % RCV_BUFSIZE];
;;;607    							}
;;;608    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;609    								sendBuf[index] += sendBuf[i + 1];
;;;610    							}
;;;611    							index++;
;;;612    
;;;613    							if (g_tWork.status.bits.DOME == 0) {
;;;614    								app_2d4_send(sendBuf, index);
;;;615    							}
;;;616    							break;
;;;617    							case MODE_CHANGE_CMD:   //MODE
;;;618    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;619    							sendBuf[index++] = len;
;;;620    							sendBuf[index++] = MODE_CHANGE_CMD;
;;;621    							for (i = 0; i < (len - 1); i++) {
;;;622    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;623    										+ i) % RCV_BUFSIZE];
;;;624    							}
;;;625    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;626    								sendBuf[index] += sendBuf[i + 1];
;;;627    							}
;;;628    							index++;
;;;629    							app_2d4_send(sendBuf, index);
;;;630    							break;
;;;631    							case RCV_PLAY_PAUSE_STATUS_CMD:
;;;632    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;633    							sendBuf[index++] = len;
;;;634    							sendBuf[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
;;;635    							for (i = 0; i < (len - 1); i++) {
;;;636    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;637    										+ i) % RCV_BUFSIZE];
;;;638    							}
;;;639    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;640    								sendBuf[index] += sendBuf[i + 1];
;;;641    							}
;;;642    							index++;
;;;643    							if (g_tWork.status.bits.DOME == 0) {
;;;644    								app_2d4_send(sendBuf, index);
;;;645    							}
;;;646    							break;
;;;647    							/// app --start
;;;648    							case KEY_CARD_POWER_CMD:
;;;649    							if (g_tWork.status.bits.blinkEnable == 0) {
;;;650    //								g_tWork.status.bits.pause = 0;
;;;651    								g_tWork.status.bits.blinkEnable = 1;
;;;652    								g_tWork.status.bits.DEMO = 1;
;;;653    								app_dome_start_current();
;;;654    							} else {
;;;655    //								g_tWork.status.bits.pause = 1;
;;;656    								g_tWork.status.bits.blinkEnable = 0;
;;;657    								g_tWork.status.bits.DEMO = 0;
;;;658    								app_dome_stop_current();
;;;659    							}
;;;660    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;661    							sendBuf[index++] = 10;
;;;662    							sendBuf[index++] = KEY_POWER_SHORT_CMD;
;;;663    							sendBuf[index++] = g_tWork.status.bits.blinkEnable;
;;;664    							app_dome_get_current_Name(sendBuf + index, 8);
;;;665    							index += 8;
;;;666    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;667    								sendBuf[index] += sendBuf[i + 1];
;;;668    							}
;;;669    							index++;
;;;670    							app_2d4_send(sendBuf, index);
;;;671    							break;
;;;672    							case KEY_CARD_DEMO_CMD:
;;;673    //							if (g_tWork.status.bits.DEMO) {
;;;674    //								g_tWork.status.bits.DEMO = 0;
;;;675    //							} else {
;;;676    							g_tWork.status.bits.DEMO = 1;
;;;677    //							}
;;;678    							app_dome_start(0, 0);
;;;679    
;;;680    							break;
;;;681    							case APP_COLOR_ATLA_CMD:
;;;682    #if 1
;;;683    							app_dome_rgb(
;;;684    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;685    									st.rxBuf[(st.pRead + 5) % RCV_BUFSIZE],
;;;686    									st.rxBuf[(st.pRead + 6) % RCV_BUFSIZE]);
;;;687    #else
;;;688    							app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;689    #endif
;;;690    							break;
;;;691    							case APP_BRIGHT_CMD:
;;;692    							dome_running_param.bright = st.rxBuf[(st.pRead
;;;693    									+ 4) % RCV_BUFSIZE];
;;;694    							Light_bright_set(
;;;695    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE]);
;;;696    							break;
;;;697    							case APP_SPEED_CMD:
;;;698    							dome_running_param.speed = st.rxBuf[(st.pRead
;;;699    									+ 4) % RCV_BUFSIZE];
;;;700    							break;
;;;701    							case APP_FLASH_INDEX_CMD:
;;;702    							g_tWork.status.bits.DEMO = 0;
;;;703    							app_dome_start_current();
;;;704    							app_dome_start(
;;;705    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;706    									0);
;;;707    							break;
;;;708    							case APP_SWITCH_INDEX_CMD: {
;;;709    								uint8_t switchData = st.rxBuf[(st.pRead + 4)
;;;710    								% RCV_BUFSIZE];
;;;711    								if (((switchData >> 4) & 0x0F) == 0) {
;;;712    									Relay_set(switchData & 0x0F);
;;;713    								}
;;;714    							}
;;;715    							break;
;;;716    							/// app --end
;;;717    							default:
;;;718    							break;
;;;719    						}
;;;720    						st.pRead += len + 4;
;;;721    #if 1
;;;722    						st.pRead = st.pRead % RCV_BUFSIZE;
;;;723    //						break;
;;;724    						return;
;;;725    #endif
;;;726    					}
;;;727    				}
;;;728    			} else {
;;;729    				st.pRead++;
;;;730    			}
;;;731    			st.pRead = st.pRead % RCV_BUFSIZE;
;;;732    		}
;;;733    	}
;;;734    #endif
;;;735    }
0000b4  bdf8              POP      {r3-r7,pc}
                          ENDP

0000b6  0000              DCW      0x0000
                  |L3.184|
                          DCD      ||.bss||
                  |L3.188|
0000bc  5b455252          DCB      "[ERROR]   remote control check error!\r\n",0
0000c0  4f525d20
0000c4  20207265
0000c8  6d6f7465
0000cc  20636f6e
0000d0  74726f6c
0000d4  20636865
0000d8  636b2065
0000dc  72726f72
0000e0  210d0a00
                  |L3.228|
                          DCD      ||.constdata||

                          AREA ||i.app_uart_send||, CODE, READONLY, ALIGN=2

                  app_uart_send PROC
;;;32     
;;;33     void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  4604              MOV      r4,r0
000004  b082              SUB      sp,sp,#8
;;;34     	uint8_t index = 0, i = 0;
;;;35     
;;;36     	memset(uart_st.txBuf, 0, sizeof(uart_st.txBuf));
000006  21ff              MOVS     r1,#0xff
000008  481a              LDR      r0,|L4.116|
00000a  4616              MOV      r6,r2                 ;33
00000c  2500              MOVS     r5,#0                 ;34
00000e  3101              ADDS     r1,#1
000010  9000              STR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_memclr
;;;37     
;;;38     	uart_st.txBuf[index++] = 0x55;
000016  9800              LDR      r0,[sp,#0]
000018  2155              MOVS     r1,#0x55
00001a  7001              STRB     r1,[r0,#0]
;;;39     	uart_st.txBuf[index++] = 0xAA;
00001c  4815              LDR      r0,|L4.116|
00001e  21aa              MOVS     r1,#0xaa
000020  1c40              ADDS     r0,r0,#1
000022  7001              STRB     r1,[r0,#0]
;;;40     	uart_st.txBuf[index++] = len + 1;
000024  4913              LDR      r1,|L4.116|
000026  1c70              ADDS     r0,r6,#1
000028  1c89              ADDS     r1,r1,#2
00002a  7008              STRB     r0,[r1,#0]
;;;41     	uart_st.txBuf[index++] = cmd;
00002c  1c48              ADDS     r0,r1,#1
00002e  7004              STRB     r4,[r0,#0]
000030  4f11              LDR      r7,|L4.120|
000032  2404              MOVS     r4,#4
;;;42     	for (i = 0; i < len; i++) {
000034  e00a              B        |L4.76|
                  |L4.54|
;;;43     		uart_st.txBuf[index++] = *(ptr + i);
000036  9803              LDR      r0,[sp,#0xc]
000038  5d41              LDRB     r1,[r0,r5]
00003a  1938              ADDS     r0,r7,r4
00003c  30ff              ADDS     r0,r0,#0xff
00003e  30ff              ADDS     r0,r0,#0xff
000040  3002              ADDS     r0,#2
000042  1c64              ADDS     r4,r4,#1
000044  1c6d              ADDS     r5,r5,#1
000046  7001              STRB     r1,[r0,#0]
000048  b2e4              UXTB     r4,r4
00004a  b2ed              UXTB     r5,r5                 ;42
                  |L4.76|
00004c  42b5              CMP      r5,r6                 ;42
00004e  d3f2              BCC      |L4.54|
000050  1d36              ADDS     r6,r6,#4              ;42
;;;44     	}
;;;45     	uart_st.txBuf[index++] = app_CalcCRC8(uart_st.txBuf, len + 4);
000052  b2f1              UXTB     r1,r6
000054  9800              LDR      r0,[sp,#0]
000056  f7fffffe          BL       app_CalcCRC8
00005a  1939              ADDS     r1,r7,r4
00005c  31ff              ADDS     r1,r1,#0xff
00005e  31ff              ADDS     r1,r1,#0xff
000060  3102              ADDS     r1,#2
000062  7008              STRB     r0,[r1,#0]
000064  1c64              ADDS     r4,r4,#1
000066  b2e2              UXTB     r2,r4
;;;46     	comSendBuf(COM1, uart_st.txBuf, index);
000068  2001              MOVS     r0,#1
00006a  9900              LDR      r1,[sp,#0]
00006c  f7fffffe          BL       comSendBuf
;;;47     
;;;48     //	for (i = 0; i < (len + 5); i++) {
;;;49     //		comSendChar(uart_st.txBuf[i]);
;;;50     //	}
;;;51     }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
;;;52     
                          ENDP

                  |L4.116|
                          DCD      ||.bss||+0x200
                  |L4.120|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  uart_st
                          %        772

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6170705f          DCB      0x61,0x70,0x70,0x5f
000004  75617274          DCB      0x75,0x61,0x72,0x74
000008  5f70726f          DCB      0x5f,0x70,0x72,0x6f
00000c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  len
000000  00                DCB      0x00
                  u8_tmp
000001  00                DCB      0x00
                  tmp
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_uart_c_fe162fbd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REVSH|
#line 402
|__asm___10_app_uart_c_fe162fbd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
