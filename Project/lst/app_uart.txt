; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\app_uart.crf ..\App\src\app_uart.c]
                          THUMB

                          AREA ||i.app_RC_Receiver_cmd_pro||, CODE, READONLY, ALIGN=2

                  app_RC_Receiver_cmd_pro PROC
;;;52     
;;;53     static void app_RC_Receiver_cmd_pro(Uart_ST* st) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;54     
;;;55     	uint8_t index = 0;
;;;56     	uint8_t i = 0;
000004  2600              MOVS     r6,#0
000006  4604              MOV      r4,r0                 ;53
;;;57     	uint8_t buffer[PAYLOAD_WIDTH] = { 0 };
;;;58     
;;;59     	switch (st->rxBuf[(st->pRead + 3) % sizeof(st->rxBuf)]) {
000008  2003              MOVS     r0,#3
00000a  9600              STR      r6,[sp,#0]            ;57
00000c  9601              STR      r6,[sp,#4]            ;57
00000e  9602              STR      r6,[sp,#8]            ;57
000010  0200              LSLS     r0,r0,#8
000012  9603              STR      r6,[sp,#0xc]
000014  1825              ADDS     r5,r4,r0
000016  886b              LDRH     r3,[r5,#2]
000018  49fb              LDR      r1,|L1.1032|
00001a  1cd8              ADDS     r0,r3,#3
00001c  05c0              LSLS     r0,r0,#23
00001e  0dc0              LSRS     r0,r0,#23
;;;60     	case BLINK_METHOD_CMD:  //闪法
;;;61     	{
;;;62     //		break;
;;;63     		uint8_t index = st->rxBuf[(st->pRead + 12) % sizeof(st->rxBuf)];
;;;64     		uint8_t availableGroup = 0;
;;;65     		uint8_t minSpaceBytes = 0;
;;;66     		uint8_t bytes = 0;
;;;67     		if (sizeof(DOME_DEFAULT_T) % 4) {
;;;68     			minSpaceBytes = (sizeof(DOME_DEFAULT_T) / 4) * 4 + 4;
;;;69     		} else {
;;;70     			minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;71     		}
;;;72     		availableGroup = (FMC_APROM_END - DOME_START_ADDR) / minSpaceBytes;
;;;73     
;;;74     		if (index > (availableGroup - 1)) {
;;;75     			break;
;;;76     		}
;;;77     		FMC_ENABLE_AP_UPDATE();
;;;78     		SYS_UnlockReg();
;;;79     		FMC_Open();
;;;80     
;;;81     		if (index == 0) {
;;;82     			u8_tmp = (FMC_APROM_END - DOME_START_ADDR) / FMC_FLASH_PAGE_SIZE;
;;;83     			for (i = 0; i < u8_tmp; i++) {
;;;84     				app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;85     			}
;;;86     		}
;;;87     #if 0
;;;88     		for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;89     			uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;90     			+ (&dome_blink.header.index
;;;91     					- &dome_blink);
;;;92     			app_eeprom_write_byte(addr, 0);
;;;93     			nop
;;;94     		}
;;;95     #endif
;;;96     #if 1
;;;97     		tmp = st->rxBuf[(st->pRead + 13) % sizeof(st->rxBuf)] & 0x0F; //sub mode number
;;;98     
;;;99     		bytes = tmp * sizeof(SUBDOME_T) + sizeof(DOME_HEADER_T);
;;;100    
;;;101    //		if (minSpaceBytes % 4) {
;;;102    //			minSpaceBytes++;
;;;103    //		}
;;;104    
;;;105    		for (i = 0; i < (bytes / 4); i++) {
;;;106    			uint32_t addr = index * minSpaceBytes + i * 4;
;;;107    			uint32_t dt = st->rxBuf[(st->pRead + 4 + i * 4) % sizeof(st->rxBuf)];
;;;108    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 1) % sizeof(st->rxBuf)]
;;;109    					<< 8;
;;;110    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 2) % sizeof(st->rxBuf)]
;;;111    					<< 16;
;;;112    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 3) % sizeof(st->rxBuf)]
;;;113    					<< 24;
;;;114    			app_eeprom_write_int(addr, dt);
;;;115    		}
;;;116    		if (bytes % 4) {
;;;117    			uint32_t addr = index * minSpaceBytes + (bytes / 4) * 4;
;;;118    			uint32_t dt = 0;
;;;119    			for (i = 0; i < (bytes % 4); i++) {
;;;120    				switch (i) {
;;;121    				case 0:
;;;122    					dt = st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4)
;;;123    							% sizeof(st->rxBuf)];
;;;124    					break;
;;;125    				case 1:
;;;126    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;127    							% sizeof(st->rxBuf)] << 8;
;;;128    					break;
;;;129    				case 2:
;;;130    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;131    							% sizeof(st->rxBuf)] << 16;
;;;132    					break;
;;;133    				}
;;;134    			}
;;;135    			app_eeprom_write_int(addr, dt);
;;;136    		}
;;;137    
;;;138    		FMC_Close();
;;;139    		SYS_LockReg();
;;;140    		FMC_DISABLE_AP_UPDATE();
;;;141    #endif
;;;142    		u8_tmp = index & 0xFF;
;;;143    		app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;144    	}
;;;145    		break;
;;;146    	case RCV_VOL_CMD:
;;;147    		buffer[index++] = LAMP2LCD_HEADER;
;;;148    		buffer[index++] = len;
000020  780f              LDRB     r7,[r1,#0]
;;;149    		buffer[index++] = RCV_VOL_CMD;
;;;150    		for (i = 0; i < (len - 1); i++) {
000022  4afa              LDR      r2,|L1.1036|
000024  5c20              LDRB     r0,[r4,r0]            ;59
000026  1e79              SUBS     r1,r7,#1
;;;151    			buffer[index++] =
;;;152    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;153    		}
;;;154    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;155    			buffer[index] += buffer[i + 1];
;;;156    		}
;;;157    		index++;
;;;158    		app_2d4_send(buffer, index);
;;;159    		break;
;;;160    	case RCV_POWER_STATUS_CMD:
;;;161    		buffer[index++] = LAMP2LCD_HEADER;
;;;162    		buffer[index++] = len;
;;;163    		buffer[index++] = RCV_POWER_STATUS_CMD;
;;;164    		for (i = 0; i < (len - 1); i++) {
;;;165    			buffer[index++] =
;;;166    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;167    		}
;;;168    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;169    			buffer[index] += buffer[i + 1];
;;;170    		}
;;;171    		index++;
;;;172    		app_2d4_send(buffer, index);
;;;173    		break;
;;;174    #if 0
;;;175    		case RCV_X_BOX_STATUS_CMD:
;;;176    		buffer[index++] = LAMP2LCD_HEADER;
;;;177    		buffer[index++] = len;
;;;178    		buffer[index++] = RCV_X_BOX_STATUS_CMD;
;;;179    		for (i = 0; i < (len - 1); i++) {
;;;180    			buffer[index++] = st->rxBuf[(st->pRead + 4
;;;181    					+ i) % sizeof(st->rxBuf)];
;;;182    		}
;;;183    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;184    			buffer[index] += buffer[i + 1];
;;;185    		}
;;;186    		index++;
;;;187    		app_2d4_send(buffer, index);
;;;188    		break;
;;;189    #endif
;;;190    	case RCV_BT_STATUS_CMD:
;;;191    		buffer[index++] = LAMP2LCD_HEADER;
;;;192    		buffer[index++] = len;
;;;193    		buffer[index++] = RCV_BT_STATUS_CMD;
;;;194    		for (i = 0; i < (len - 1); i++) {
;;;195    			buffer[index++] =
;;;196    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;197    		}
;;;198    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;199    			buffer[index] += buffer[i + 1];
;;;200    		}
;;;201    		index++;
;;;202    		if (g_tWork.status.bits.DOME == 0) {
000028  6812              LDR      r2,[r2,#0]
00002a  2841              CMP      r0,#0x41              ;59
00002c  d07e              BEQ      |L1.300|
00002e  dc20              BGT      |L1.114|
000030  2835              CMP      r0,#0x35              ;59
000032  d07c              BEQ      |L1.302|
000034  dc0f              BGT      |L1.86|
000036  2812              CMP      r0,#0x12              ;59
000038  d059              BEQ      |L1.238|
00003a  2831              CMP      r0,#0x31              ;59
00003c  d078              BEQ      |L1.304|
00003e  2833              CMP      r0,#0x33              ;59
000040  d077              BEQ      |L1.306|
000042  2834              CMP      r0,#0x34              ;59
000044  d12d              BNE      |L1.162|
;;;203    			app_2d4_send(buffer, index);
;;;204    		}
;;;205    		break;
;;;206    	case RCV_PREV_NEXT_CMD:
;;;207    		buffer[index++] = LAMP2LCD_HEADER;
;;;208    		buffer[index++] = len;
;;;209    		buffer[index++] = RCV_PREV_NEXT_CMD;
;;;210    		for (i = 0; i < (len - 1); i++) {
;;;211    			buffer[index++] =
;;;212    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;213    		}
;;;214    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;215    			buffer[index] += buffer[i + 1];
;;;216    		}
;;;217    		index++;
;;;218    		if (g_tWork.status.bits.DOME == 0) {
;;;219    			app_2d4_send(buffer, index);
;;;220    		}
;;;221    		break;
;;;222    	case RCV_USB_PLAY_TIME_CMD:
;;;223    		buffer[index++] = LAMP2LCD_HEADER;
;;;224    		buffer[index++] = len;
;;;225    		buffer[index++] = RCV_USB_PLAY_TIME_CMD;
;;;226    		for (i = 0; i < (len - 1); i++) {
;;;227    			buffer[index++] =
;;;228    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;229    		}
;;;230    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;231    			buffer[index] += buffer[i + 1];
;;;232    		}
;;;233    		index++;
;;;234    		if (g_tWork.status.bits.DOME == 0) {
;;;235    			app_2d4_send(buffer, index);
;;;236    		}
;;;237    		break;
;;;238    	case RCV_FM_HZ_CMD:
;;;239    		buffer[index++] = LAMP2LCD_HEADER;
;;;240    		buffer[index++] = len;
;;;241    		buffer[index++] = RCV_FM_HZ_CMD;
;;;242    		for (i = 0; i < (len - 1); i++) {
;;;243    			buffer[index++] =
;;;244    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;245    		}
;;;246    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;247    			buffer[index] += buffer[i + 1];
;;;248    		}
;;;249    		index++;
;;;250    
;;;251    		if (g_tWork.status.bits.DOME == 0) {
;;;252    			app_2d4_send(buffer, index);
;;;253    		}
;;;254    		break;
;;;255    	case MODE_CHANGE_CMD:   //MODE
;;;256    		buffer[index++] = LAMP2LCD_HEADER;
;;;257    		buffer[index++] = len;
;;;258    		buffer[index++] = MODE_CHANGE_CMD;
;;;259    		for (i = 0; i < (len - 1); i++) {
;;;260    			buffer[index++] =
;;;261    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;262    		}
;;;263    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;264    			buffer[index] += buffer[i + 1];
;;;265    		}
;;;266    		index++;
;;;267    		app_2d4_send(buffer, index);
;;;268    		break;
;;;269    	case RCV_PLAY_PAUSE_STATUS_CMD:
;;;270    		buffer[index++] = LAMP2LCD_HEADER;
000046  20f8              MOVS     r0,#0xf8
000048  466b              MOV      r3,sp
00004a  7018              STRB     r0,[r3,#0]
;;;271    		buffer[index++] = len;
00004c  705f              STRB     r7,[r3,#1]
;;;272    		buffer[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
00004e  2034              MOVS     r0,#0x34
000050  7098              STRB     r0,[r3,#2]
000052  2003              MOVS     r0,#3
;;;273    		for (i = 0; i < (len - 1); i++) {
000054  e211              B        |L1.1146|
                  |L1.86|
000056  2836              CMP      r0,#0x36              ;59
000058  d06c              BEQ      |L1.308|
00005a  2837              CMP      r0,#0x37              ;59
00005c  d06b              BEQ      |L1.310|
00005e  2838              CMP      r0,#0x38              ;59
000060  d11f              BNE      |L1.162|
000062  20f8              MOVS     r0,#0xf8              ;147
000064  466a              MOV      r2,sp                 ;147
000066  7010              STRB     r0,[r2,#0]            ;147
000068  7057              STRB     r7,[r2,#1]            ;148
00006a  2038              MOVS     r0,#0x38              ;149
00006c  7090              STRB     r0,[r2,#2]            ;149
00006e  2003              MOVS     r0,#3                 ;149
000070  e0fe              B        |L1.624|
                  |L1.114|
000072  49e6              LDR      r1,|L1.1036|
;;;274    			buffer[index++] =
;;;275    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;276    		}
;;;277    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;278    			buffer[index] += buffer[i + 1];
;;;279    		}
;;;280    		index++;
;;;281    		if (g_tWork.status.bits.DOME == 0) {
;;;282    			app_2d4_send(buffer, index);
;;;283    		}
;;;284    		break;
;;;285    	case DEVICE_STA_CMD: {
;;;286    		uint8_t sta[2] = { 0 };
;;;287    		memset(sta, 0, sizeof(sta));
;;;288    		sta[0] |= g_tWork.status.bits.blinkEnable ? 0x80 : 0;
;;;289    		sta[0] |= g_tWork.status.bits.DEMO ? 0x40 : 0;
;;;290    		sta[1] |= Relay_IsOn() ? 0x01 : 0;
;;;291    		app_uart_send(DEVICE_STA_CMD, sta, sizeof(sta));
;;;292    	}
;;;293    		break;
;;;294    		/// app --start
;;;295    	case KEY_CARD_POWER_CMD:
;;;296    		if (g_tWork.status.bits.blinkEnable == 0) {
;;;297    			//								g_tWork.status.bits.pause = 0;
;;;298    			g_tWork.status.bits.blinkEnable = 1;
;;;299    			g_tWork.status.bits.DEMO = 1;
000074  2704              MOVS     r7,#4
000076  6809              LDR      r1,[r1,#0]            ;202
;;;300    			app_dome_start_current();
;;;301    		} else {
;;;302    			//								g_tWork.status.bits.pause = 1;
;;;303    			g_tWork.status.bits.blinkEnable = 0;
;;;304    			g_tWork.status.bits.DEMO = 0;
000078  43b9              BICS     r1,r1,r7
00007a  2864              CMP      r0,#0x64              ;59
00007c  d078              BEQ      |L1.368|
00007e  dc12              BGT      |L1.166|
000080  2854              CMP      r0,#0x54              ;59
000082  d076              BEQ      |L1.370|
000084  2857              CMP      r0,#0x57              ;59
000086  d075              BEQ      |L1.372|
000088  2862              CMP      r0,#0x62              ;59
00008a  d074              BEQ      |L1.374|
00008c  2863              CMP      r0,#0x63              ;59
00008e  d108              BNE      |L1.162|
000090  1d1b              ADDS     r3,r3,#4              ;59
;;;305    			app_dome_stop_current();
;;;306    		}
;;;307    		buffer[index++] = LAMP2LCD_HEADER;
;;;308    		buffer[index++] = 10;
;;;309    		buffer[index++] = KEY_POWER_SHORT_CMD;
;;;310    		buffer[index++] = g_tWork.status.bits.blinkEnable;
;;;311    		app_dome_get_current_Name(buffer + index, 8);
;;;312    		index += 8;
;;;313    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;314    			buffer[index] += buffer[i + 1];
;;;315    		}
;;;316    		index++;
;;;317    		app_2d4_send(buffer, index);
;;;318    		break;
;;;319    	case KEY_CARD_DEMO_CMD:
;;;320    		//							if (g_tWork.status.bits.DEMO) {
;;;321    		//								g_tWork.status.bits.DEMO = 0;
;;;322    		//							} else {
;;;323    		g_tWork.status.bits.DEMO = 1;
;;;324    		//							}
;;;325    		app_dome_start(0);
;;;326    
;;;327    		break;
;;;328    	case APP_COLOR_ATLA_CMD:
;;;329    #if 1
;;;330    		g_tWork.status.bits.DEMO = 0;
;;;331    		app_dome_rgb(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)],
;;;332    				st->rxBuf[(st->pRead + 5) % sizeof(st->rxBuf)],
;;;333    				st->rxBuf[(st->pRead + 6) % sizeof(st->rxBuf)]);
;;;334    #else
;;;335    		app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;336    #endif
;;;337    		break;
;;;338    	case APP_BRIGHT_CMD:
;;;339    		dome_running_param.bright = st->rxBuf[(st->pRead + 4)
000092  05d8              LSLS     r0,r3,#23
000094  0dc0              LSRS     r0,r0,#23
000096  49de              LDR      r1,|L1.1040|
000098  5c22              LDRB     r2,[r4,r0]
00009a  700a              STRB     r2,[r1,#0]
;;;340    				% sizeof(st->rxBuf)];
;;;341    		Light_bright_set(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
00009c  5c20              LDRB     r0,[r4,r0]
00009e  f7fffffe          BL       Light_bright_set
                  |L1.162|
;;;342    		break;
;;;343    	case APP_SPEED_CMD:
;;;344    		dome_running_param.speed =
;;;345    				st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;346    		break;
;;;347    	case APP_FLASH_INDEX_CMD:
;;;348    		g_tWork.status.bits.DEMO = 0;
;;;349    		app_dome_start_current();
;;;350    		app_dome_start(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
;;;351    		break;
;;;352    	case APP_SWITCH_INDEX_CMD: {
;;;353    		uint8_t switchData = st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;354    		if (((switchData >> 4) & 0x0F) == 0) {
;;;355    			Relay_set(switchData & 0x0F);
;;;356    		}
;;;357    	}
;;;358    		break;
;;;359    		/// app --end
;;;360    	default:
;;;361    		break;
;;;362    	}
;;;363    
;;;364    }
0000a2  b007              ADD      sp,sp,#0x1c
0000a4  bdf0              POP      {r4-r7,pc}
                  |L1.166|
0000a6  2865              CMP      r0,#0x65              ;59
0000a8  d07e              BEQ      |L1.424|
0000aa  2866              CMP      r0,#0x66              ;59
0000ac  d07d              BEQ      |L1.426|
0000ae  28f0              CMP      r0,#0xf0              ;59
0000b0  d1f7              BNE      |L1.162|
0000b2  2000              MOVS     r0,#0                 ;286
0000b4  4669              MOV      r1,sp                 ;288
0000b6  9004              STR      r0,[sp,#0x10]         ;288
0000b8  7c08              LDRB     r0,[r1,#0x10]         ;288
0000ba  0711              LSLS     r1,r2,#28             ;288
0000bc  0fc9              LSRS     r1,r1,#31             ;288
0000be  01c9              LSLS     r1,r1,#7              ;288
0000c0  4308              ORRS     r0,r0,r1              ;288
0000c2  0751              LSLS     r1,r2,#29             ;289
0000c4  0fc9              LSRS     r1,r1,#31             ;289
0000c6  0189              LSLS     r1,r1,#6              ;289
0000c8  4308              ORRS     r0,r0,r1              ;289
0000ca  4669              MOV      r1,sp                 ;289
0000cc  7408              STRB     r0,[r1,#0x10]         ;289
0000ce  f7fffffe          BL       Relay_IsOn
0000d2  2800              CMP      r0,#0                 ;290
0000d4  d000              BEQ      |L1.216|
0000d6  2001              MOVS     r0,#1                 ;290
                  |L1.216|
0000d8  4669              MOV      r1,sp                 ;290
0000da  7c49              LDRB     r1,[r1,#0x11]         ;290
0000dc  2202              MOVS     r2,#2                 ;291
0000de  4308              ORRS     r0,r0,r1              ;290
0000e0  4669              MOV      r1,sp                 ;290
0000e2  7448              STRB     r0,[r1,#0x11]         ;290
0000e4  a904              ADD      r1,sp,#0x10           ;291
0000e6  20f0              MOVS     r0,#0xf0              ;291
                  |L1.232|
0000e8  f7fffffe          BL       app_uart_send
0000ec  e7d9              B        |L1.162|
                  |L1.238|
0000ee  330c              ADDS     r3,r3,#0xc
0000f0  05d8              LSLS     r0,r3,#23             ;63
0000f2  0dc0              LSRS     r0,r0,#23             ;63
0000f4  5c27              LDRB     r7,[r4,r0]            ;63
0000f6  2074              MOVS     r0,#0x74              ;68
0000f8  9005              STR      r0,[sp,#0x14]         ;74
0000fa  2f2b              CMP      r7,#0x2b              ;74
0000fc  dcd1              BGT      |L1.162|
0000fe  48c5              LDR      r0,|L1.1044|
000100  6801              LDR      r1,[r0,#0]            ;77
000102  2208              MOVS     r2,#8                 ;77
000104  4311              ORRS     r1,r1,r2              ;77
000106  6001              STR      r1,[r0,#0]            ;77
000108  2159              MOVS     r1,#0x59              ;77
00010a  2216              MOVS     r2,#0x16              ;77
00010c  2388              MOVS     r3,#0x88              ;77
                  |L1.270|
00010e  48c2              LDR      r0,|L1.1048|
000110  6001              STR      r1,[r0,#0]            ;77
000112  6002              STR      r2,[r0,#0]            ;77
000114  6003              STR      r3,[r0,#0]            ;77
000116  6800              LDR      r0,[r0,#0]            ;77
000118  2800              CMP      r0,#0                 ;77
00011a  d0f8              BEQ      |L1.270|
00011c  f7fffffe          BL       FMC_Open
000120  2f00              CMP      r7,#0                 ;81
000122  d113              BNE      |L1.332|
000124  48b8              LDR      r0,|L1.1032|
000126  210a              MOVS     r1,#0xa               ;82
000128  7041              STRB     r1,[r0,#1]            ;82
00012a  e005              B        |L1.312|
                  |L1.300|
00012c  e176              B        |L1.1052|
                  |L1.302|
00012e  e0ff              B        |L1.816|
                  |L1.304|
000130  e0b1              B        |L1.662|
                  |L1.306|
000132  e0d3              B        |L1.732|
                  |L1.308|
000134  e120              B        |L1.888|
                  |L1.310|
000136  e143              B        |L1.960|
                  |L1.312|
000138  2600              MOVS     r6,#0                 ;83
                  |L1.314|
00013a  0270              LSLS     r0,r6,#9              ;84
00013c  f7fffffe          BL       app_eeprom_erase
000140  48b1              LDR      r0,|L1.1032|
000142  1c76              ADDS     r6,r6,#1              ;84
000144  7840              LDRB     r0,[r0,#1]            ;83  ; u8_tmp
000146  b2f6              UXTB     r6,r6                 ;83
000148  4286              CMP      r6,r0                 ;83
00014a  d3f6              BCC      |L1.314|
                  |L1.332|
00014c  8868              LDRH     r0,[r5,#2]            ;97
00014e  49ae              LDR      r1,|L1.1032|
000150  300d              ADDS     r0,r0,#0xd            ;97
000152  05c0              LSLS     r0,r0,#23             ;97
000154  0dc0              LSRS     r0,r0,#23             ;97
000156  5c20              LDRB     r0,[r4,r0]            ;97
000158  2600              MOVS     r6,#0                 ;105
00015a  0700              LSLS     r0,r0,#28             ;97
00015c  0f00              LSRS     r0,r0,#28             ;97
00015e  8048              STRH     r0,[r1,#2]            ;97
000160  210d              MOVS     r1,#0xd               ;99
000162  4348              MULS     r0,r1,r0              ;99
000164  300a              ADDS     r0,r0,#0xa            ;99
000166  b2c0              UXTB     r0,r0                 ;99
000168  9004              STR      r0,[sp,#0x10]         ;105
00016a  0880              LSRS     r0,r0,#2              ;105
00016c  9006              STR      r0,[sp,#0x18]         ;105
00016e  e02d              B        |L1.460|
                  |L1.368|
000170  e1db              B        |L1.1322|
                  |L1.370|
000172  e192              B        |L1.1178|
                  |L1.372|
000174  e1c3              B        |L1.1278|
                  |L1.374|
000176  e1c7              B        |L1.1288|
                  |L1.376|
000178  9805              LDR      r0,[sp,#0x14]         ;106
00017a  4639              MOV      r1,r7                 ;106
00017c  4341              MULS     r1,r0,r1              ;106
00017e  00b0              LSLS     r0,r6,#2              ;106
000180  1809              ADDS     r1,r1,r0              ;106
000182  468c              MOV      r12,r1                ;106
000184  8869              LDRH     r1,[r5,#2]            ;107
000186  1d02              ADDS     r2,r0,#4              ;107
000188  188a              ADDS     r2,r1,r2              ;107
00018a  05d2              LSLS     r2,r2,#23             ;107
00018c  0dd2              LSRS     r2,r2,#23             ;107
00018e  5ca3              LDRB     r3,[r4,r2]            ;107
000190  1d42              ADDS     r2,r0,#5              ;108
000192  188a              ADDS     r2,r1,r2              ;108
000194  05d2              LSLS     r2,r2,#23             ;108
000196  0dd2              LSRS     r2,r2,#23             ;108
000198  5ca2              LDRB     r2,[r4,r2]            ;108
00019a  0212              LSLS     r2,r2,#8              ;108
00019c  431a              ORRS     r2,r2,r3              ;108
00019e  1d83              ADDS     r3,r0,#6              ;110
0001a0  18cb              ADDS     r3,r1,r3              ;110
0001a2  05db              LSLS     r3,r3,#23             ;110
0001a4  0ddb              LSRS     r3,r3,#23             ;110
0001a6  e001              B        |L1.428|
                  |L1.424|
0001a8  e1c6              B        |L1.1336|
                  |L1.426|
0001aa  e1d1              B        |L1.1360|
                  |L1.428|
0001ac  1dc0              ADDS     r0,r0,#7              ;110
0001ae  1808              ADDS     r0,r1,r0              ;112
0001b0  05c0              LSLS     r0,r0,#23             ;112
0001b2  0dc0              LSRS     r0,r0,#23             ;112
0001b4  5ce3              LDRB     r3,[r4,r3]            ;110
0001b6  5c20              LDRB     r0,[r4,r0]            ;112
0001b8  041b              LSLS     r3,r3,#16             ;110
0001ba  0601              LSLS     r1,r0,#24             ;112
0001bc  4313              ORRS     r3,r3,r2              ;110
0001be  4319              ORRS     r1,r1,r3              ;112
0001c0  4660              MOV      r0,r12                ;114
0001c2  f7fffffe          BL       app_eeprom_write_int
0001c6  1c76              ADDS     r6,r6,#1              ;114
0001c8  9806              LDR      r0,[sp,#0x18]         ;105
0001ca  b2f6              UXTB     r6,r6                 ;105
                  |L1.460|
0001cc  42b0              CMP      r0,r6                 ;105
0001ce  d8d3              BHI      |L1.376|
0001d0  9804              LDR      r0,[sp,#0x10]         ;116
0001d2  0780              LSLS     r0,r0,#30             ;116
0001d4  d031              BEQ      |L1.570|
0001d6  9904              LDR      r1,[sp,#0x10]         ;117
0001d8  9805              LDR      r0,[sp,#0x14]         ;117
0001da  088a              LSRS     r2,r1,#2              ;117
0001dc  4378              MULS     r0,r7,r0              ;117
0001de  0092              LSLS     r2,r2,#2              ;117
0001e0  1880              ADDS     r0,r0,r2              ;117
0001e2  9b04              LDR      r3,[sp,#0x10]         ;119
0001e4  2100              MOVS     r1,#0                 ;118
0001e6  4684              MOV      r12,r0                ;117
0001e8  079e              LSLS     r6,r3,#30             ;119
0001ea  4608              MOV      r0,r1                 ;119
0001ec  0fb6              LSRS     r6,r6,#30             ;119
0001ee  e01f              B        |L1.560|
                  |L1.496|
0001f0  2800              CMP      r0,#0                 ;120
0001f2  d004              BEQ      |L1.510|
0001f4  2801              CMP      r0,#1                 ;120
0001f6  d009              BEQ      |L1.524|
0001f8  2802              CMP      r0,#2                 ;120
0001fa  d117              BNE      |L1.556|
0001fc  e00e              B        |L1.540|
                  |L1.510|
0001fe  886b              LDRH     r3,[r5,#2]            ;122
000200  1d11              ADDS     r1,r2,#4              ;122
000202  1859              ADDS     r1,r3,r1              ;122
000204  05c9              LSLS     r1,r1,#23             ;122
000206  0dc9              LSRS     r1,r1,#23             ;122
000208  5c61              LDRB     r1,[r4,r1]            ;122
00020a  e00f              B        |L1.556|
                  |L1.524|
00020c  886b              LDRH     r3,[r5,#2]            ;126
00020e  189b              ADDS     r3,r3,r2              ;126
000210  1d5b              ADDS     r3,r3,#5              ;126
000212  05db              LSLS     r3,r3,#23             ;126
000214  0ddb              LSRS     r3,r3,#23             ;126
000216  5ce3              LDRB     r3,[r4,r3]            ;126
000218  021b              LSLS     r3,r3,#8              ;126
00021a  e006              B        |L1.554|
                  |L1.540|
00021c  886b              LDRH     r3,[r5,#2]            ;130
00021e  189b              ADDS     r3,r3,r2              ;130
000220  1d9b              ADDS     r3,r3,#6              ;130
000222  05db              LSLS     r3,r3,#23             ;130
000224  0ddb              LSRS     r3,r3,#23             ;130
000226  5ce3              LDRB     r3,[r4,r3]            ;130
000228  041b              LSLS     r3,r3,#16             ;130
                  |L1.554|
00022a  4319              ORRS     r1,r1,r3              ;126
                  |L1.556|
00022c  1c40              ADDS     r0,r0,#1              ;126
00022e  b2c0              UXTB     r0,r0                 ;119
                  |L1.560|
000230  4286              CMP      r6,r0                 ;119
000232  d8dd              BHI      |L1.496|
000234  4660              MOV      r0,r12                ;135
000236  f7fffffe          BL       app_eeprom_write_int
                  |L1.570|
00023a  f7fffffe          BL       FMC_Close
00023e  4976              LDR      r1,|L1.1048|
000240  2000              MOVS     r0,#0                 ;138
000242  6008              STR      r0,[r1,#0]            ;138
000244  4873              LDR      r0,|L1.1044|
000246  6801              LDR      r1,[r0,#0]            ;140
000248  2208              MOVS     r2,#8                 ;140
00024a  4391              BICS     r1,r1,r2              ;140
00024c  6001              STR      r1,[r0,#0]            ;140
00024e  486e              LDR      r0,|L1.1032|
000250  2201              MOVS     r2,#1                 ;143
000252  7047              STRB     r7,[r0,#1]            ;142
000254  1c41              ADDS     r1,r0,#1              ;143
000256  2012              MOVS     r0,#0x12              ;143
000258  e746              B        |L1.232|
                  |L1.602|
00025a  886b              LDRH     r3,[r5,#2]            ;151
00025c  1d37              ADDS     r7,r6,#4              ;151
00025e  19db              ADDS     r3,r3,r7              ;151
000260  05db              LSLS     r3,r3,#23             ;151
000262  0ddb              LSRS     r3,r3,#23             ;151
000264  5ce3              LDRB     r3,[r4,r3]            ;151
000266  5413              STRB     r3,[r2,r0]            ;151
000268  1c40              ADDS     r0,r0,#1              ;151
00026a  1c76              ADDS     r6,r6,#1              ;151
00026c  b2c0              UXTB     r0,r0                 ;151
00026e  b2f6              UXTB     r6,r6                 ;150
                  |L1.624|
000270  428e              CMP      r6,r1                 ;150
000272  dbf2              BLT      |L1.602|
000274  2100              MOVS     r1,#0                 ;154
000276  e006              B        |L1.646|
                  |L1.632|
000278  1854              ADDS     r4,r2,r1              ;155
00027a  5c13              LDRB     r3,[r2,r0]            ;155
00027c  7864              LDRB     r4,[r4,#1]            ;155
00027e  191b              ADDS     r3,r3,r4              ;155
000280  1c49              ADDS     r1,r1,#1              ;155
000282  5413              STRB     r3,[r2,r0]            ;155
000284  b2c9              UXTB     r1,r1                 ;154
                  |L1.646|
000286  7853              LDRB     r3,[r2,#1]            ;154
000288  1c5b              ADDS     r3,r3,#1              ;154
00028a  428b              CMP      r3,r1                 ;154
00028c  d8f4              BHI      |L1.632|
                  |L1.654|
00028e  1c40              ADDS     r0,r0,#1              ;154
000290  b2c1              UXTB     r1,r0                 ;157
000292  4610              MOV      r0,r2                 ;158
000294  e130              B        |L1.1272|
                  |L1.662|
000296  20f8              MOVS     r0,#0xf8              ;161
000298  466a              MOV      r2,sp                 ;161
00029a  7010              STRB     r0,[r2,#0]            ;161
00029c  7057              STRB     r7,[r2,#1]            ;162
00029e  2031              MOVS     r0,#0x31              ;163
0002a0  7090              STRB     r0,[r2,#2]            ;163
0002a2  2003              MOVS     r0,#3                 ;163
0002a4  e00a              B        |L1.700|
                  |L1.678|
0002a6  886b              LDRH     r3,[r5,#2]            ;165
0002a8  1d37              ADDS     r7,r6,#4              ;165
0002aa  19db              ADDS     r3,r3,r7              ;165
0002ac  05db              LSLS     r3,r3,#23             ;165
0002ae  0ddb              LSRS     r3,r3,#23             ;165
0002b0  5ce3              LDRB     r3,[r4,r3]            ;165
0002b2  5413              STRB     r3,[r2,r0]            ;165
0002b4  1c40              ADDS     r0,r0,#1              ;165
0002b6  1c76              ADDS     r6,r6,#1              ;165
0002b8  b2c0              UXTB     r0,r0                 ;165
0002ba  b2f6              UXTB     r6,r6                 ;164
                  |L1.700|
0002bc  428e              CMP      r6,r1                 ;164
0002be  dbf2              BLT      |L1.678|
0002c0  2100              MOVS     r1,#0                 ;168
0002c2  e006              B        |L1.722|
                  |L1.708|
0002c4  1854              ADDS     r4,r2,r1              ;169
0002c6  5c13              LDRB     r3,[r2,r0]            ;169
0002c8  7864              LDRB     r4,[r4,#1]            ;169
0002ca  191b              ADDS     r3,r3,r4              ;169
0002cc  1c49              ADDS     r1,r1,#1              ;169
0002ce  5413              STRB     r3,[r2,r0]            ;169
0002d0  b2c9              UXTB     r1,r1                 ;168
                  |L1.722|
0002d2  7853              LDRB     r3,[r2,#1]            ;168
0002d4  1c5b              ADDS     r3,r3,#1              ;168
0002d6  428b              CMP      r3,r1                 ;168
0002d8  d8f4              BHI      |L1.708|
0002da  e7d8              B        |L1.654|
                  |L1.732|
0002dc  20f8              MOVS     r0,#0xf8              ;191
0002de  466b              MOV      r3,sp                 ;191
0002e0  7018              STRB     r0,[r3,#0]            ;191
0002e2  705f              STRB     r7,[r3,#1]            ;192
0002e4  2033              MOVS     r0,#0x33              ;193
0002e6  7098              STRB     r0,[r3,#2]            ;193
0002e8  2003              MOVS     r0,#3                 ;193
0002ea  e00b              B        |L1.772|
                  |L1.748|
0002ec  886b              LDRH     r3,[r5,#2]            ;195
0002ee  1d37              ADDS     r7,r6,#4              ;195
0002f0  19db              ADDS     r3,r3,r7              ;195
0002f2  05db              LSLS     r3,r3,#23             ;195
0002f4  0ddb              LSRS     r3,r3,#23             ;195
0002f6  5ce7              LDRB     r7,[r4,r3]            ;195
0002f8  466b              MOV      r3,sp                 ;195
0002fa  541f              STRB     r7,[r3,r0]            ;195
0002fc  1c40              ADDS     r0,r0,#1              ;195
0002fe  1c76              ADDS     r6,r6,#1              ;195
000300  b2c0              UXTB     r0,r0                 ;195
000302  b2f6              UXTB     r6,r6                 ;194
                  |L1.772|
000304  428e              CMP      r6,r1                 ;194
000306  dbf1              BLT      |L1.748|
000308  2100              MOVS     r1,#0                 ;198
00030a  e006              B        |L1.794|
                  |L1.780|
00030c  185d              ADDS     r5,r3,r1              ;199
00030e  5c1c              LDRB     r4,[r3,r0]            ;199
000310  786d              LDRB     r5,[r5,#1]            ;199
000312  1964              ADDS     r4,r4,r5              ;199
000314  1c49              ADDS     r1,r1,#1              ;199
000316  541c              STRB     r4,[r3,r0]            ;199
000318  b2c9              UXTB     r1,r1                 ;198
                  |L1.794|
00031a  785c              LDRB     r4,[r3,#1]            ;198
00031c  1c64              ADDS     r4,r4,#1              ;198
00031e  428c              CMP      r4,r1                 ;198
000320  d8f4              BHI      |L1.780|
                  |L1.802|
000322  1c40              ADDS     r0,r0,#1              ;198
000324  b2c1              UXTB     r1,r0                 ;201
000326  07d0              LSLS     r0,r2,#31             ;202
000328  d000              BEQ      |L1.812|
00032a  e6ba              B        |L1.162|
                  |L1.812|
00032c  4618              MOV      r0,r3                 ;282
00032e  e0e3              B        |L1.1272|
                  |L1.816|
000330  20f8              MOVS     r0,#0xf8              ;207
000332  466b              MOV      r3,sp                 ;207
000334  7018              STRB     r0,[r3,#0]            ;207
000336  705f              STRB     r7,[r3,#1]            ;208
000338  2035              MOVS     r0,#0x35              ;209
00033a  7098              STRB     r0,[r3,#2]            ;209
00033c  2003              MOVS     r0,#3                 ;209
00033e  e00b              B        |L1.856|
                  |L1.832|
000340  886b              LDRH     r3,[r5,#2]            ;211
000342  1d37              ADDS     r7,r6,#4              ;211
000344  19db              ADDS     r3,r3,r7              ;211
000346  05db              LSLS     r3,r3,#23             ;211
000348  0ddb              LSRS     r3,r3,#23             ;211
00034a  5ce7              LDRB     r7,[r4,r3]            ;211
00034c  466b              MOV      r3,sp                 ;211
00034e  541f              STRB     r7,[r3,r0]            ;211
000350  1c40              ADDS     r0,r0,#1              ;211
000352  1c76              ADDS     r6,r6,#1              ;211
000354  b2c0              UXTB     r0,r0                 ;211
000356  b2f6              UXTB     r6,r6                 ;210
                  |L1.856|
000358  428e              CMP      r6,r1                 ;210
00035a  dbf1              BLT      |L1.832|
00035c  2100              MOVS     r1,#0                 ;214
00035e  e006              B        |L1.878|
                  |L1.864|
000360  185d              ADDS     r5,r3,r1              ;215
000362  5c1c              LDRB     r4,[r3,r0]            ;215
000364  786d              LDRB     r5,[r5,#1]            ;215
000366  1964              ADDS     r4,r4,r5              ;215
000368  1c49              ADDS     r1,r1,#1              ;215
00036a  541c              STRB     r4,[r3,r0]            ;215
00036c  b2c9              UXTB     r1,r1                 ;214
                  |L1.878|
00036e  785c              LDRB     r4,[r3,#1]            ;214
000370  1c64              ADDS     r4,r4,#1              ;214
000372  428c              CMP      r4,r1                 ;214
000374  d8f4              BHI      |L1.864|
000376  e7d4              B        |L1.802|
                  |L1.888|
000378  20f8              MOVS     r0,#0xf8              ;223
00037a  466b              MOV      r3,sp                 ;223
00037c  7018              STRB     r0,[r3,#0]            ;223
00037e  705f              STRB     r7,[r3,#1]            ;224
000380  2036              MOVS     r0,#0x36              ;225
000382  7098              STRB     r0,[r3,#2]            ;225
000384  2003              MOVS     r0,#3                 ;225
000386  e00b              B        |L1.928|
                  |L1.904|
000388  886b              LDRH     r3,[r5,#2]            ;227
00038a  1d37              ADDS     r7,r6,#4              ;227
00038c  19db              ADDS     r3,r3,r7              ;227
00038e  05db              LSLS     r3,r3,#23             ;227
000390  0ddb              LSRS     r3,r3,#23             ;227
000392  5ce7              LDRB     r7,[r4,r3]            ;227
000394  466b              MOV      r3,sp                 ;227
000396  541f              STRB     r7,[r3,r0]            ;227
000398  1c40              ADDS     r0,r0,#1              ;227
00039a  1c76              ADDS     r6,r6,#1              ;227
00039c  b2c0              UXTB     r0,r0                 ;227
00039e  b2f6              UXTB     r6,r6                 ;226
                  |L1.928|
0003a0  428e              CMP      r6,r1                 ;226
0003a2  dbf1              BLT      |L1.904|
0003a4  2100              MOVS     r1,#0                 ;230
0003a6  e006              B        |L1.950|
                  |L1.936|
0003a8  185d              ADDS     r5,r3,r1              ;231
0003aa  5c1c              LDRB     r4,[r3,r0]            ;231
0003ac  786d              LDRB     r5,[r5,#1]            ;231
0003ae  1964              ADDS     r4,r4,r5              ;231
0003b0  1c49              ADDS     r1,r1,#1              ;231
0003b2  541c              STRB     r4,[r3,r0]            ;231
0003b4  b2c9              UXTB     r1,r1                 ;230
                  |L1.950|
0003b6  785c              LDRB     r4,[r3,#1]            ;230
0003b8  1c64              ADDS     r4,r4,#1              ;230
0003ba  428c              CMP      r4,r1                 ;230
0003bc  d8f4              BHI      |L1.936|
0003be  e7b0              B        |L1.802|
                  |L1.960|
0003c0  20f8              MOVS     r0,#0xf8              ;239
0003c2  466b              MOV      r3,sp                 ;239
0003c4  7018              STRB     r0,[r3,#0]            ;239
0003c6  705f              STRB     r7,[r3,#1]            ;240
0003c8  2037              MOVS     r0,#0x37              ;241
0003ca  7098              STRB     r0,[r3,#2]            ;241
0003cc  2003              MOVS     r0,#3                 ;241
0003ce  e00b              B        |L1.1000|
                  |L1.976|
0003d0  886b              LDRH     r3,[r5,#2]            ;243
0003d2  1d37              ADDS     r7,r6,#4              ;243
0003d4  19db              ADDS     r3,r3,r7              ;243
0003d6  05db              LSLS     r3,r3,#23             ;243
0003d8  0ddb              LSRS     r3,r3,#23             ;243
0003da  5ce7              LDRB     r7,[r4,r3]            ;243
0003dc  466b              MOV      r3,sp                 ;243
0003de  541f              STRB     r7,[r3,r0]            ;243
0003e0  1c40              ADDS     r0,r0,#1              ;243
0003e2  1c76              ADDS     r6,r6,#1              ;243
0003e4  b2c0              UXTB     r0,r0                 ;243
0003e6  b2f6              UXTB     r6,r6                 ;242
                  |L1.1000|
0003e8  428e              CMP      r6,r1                 ;242
0003ea  dbf1              BLT      |L1.976|
0003ec  2100              MOVS     r1,#0                 ;246
0003ee  e006              B        |L1.1022|
                  |L1.1008|
0003f0  185d              ADDS     r5,r3,r1              ;247
0003f2  5c1c              LDRB     r4,[r3,r0]            ;247
0003f4  786d              LDRB     r5,[r5,#1]            ;247
0003f6  1964              ADDS     r4,r4,r5              ;247
0003f8  1c49              ADDS     r1,r1,#1              ;247
0003fa  541c              STRB     r4,[r3,r0]            ;247
0003fc  b2c9              UXTB     r1,r1                 ;246
                  |L1.1022|
0003fe  785c              LDRB     r4,[r3,#1]            ;246
000400  1c64              ADDS     r4,r4,#1              ;246
000402  428c              CMP      r4,r1                 ;246
000404  d8f4              BHI      |L1.1008|
000406  e78c              B        |L1.802|
                  |L1.1032|
                          DCD      ||.data||
                  |L1.1036|
                          DCD      g_tWork
                  |L1.1040|
                          DCD      dome_running_param
                  |L1.1044|
                          DCD      0x5000c000
                  |L1.1048|
                          DCD      0x50000100
                  |L1.1052|
00041c  20f8              MOVS     r0,#0xf8              ;256
00041e  466a              MOV      r2,sp                 ;256
000420  7010              STRB     r0,[r2,#0]            ;256
000422  7057              STRB     r7,[r2,#1]            ;257
000424  2041              MOVS     r0,#0x41              ;258
000426  7090              STRB     r0,[r2,#2]            ;258
000428  2003              MOVS     r0,#3                 ;258
00042a  e00a              B        |L1.1090|
                  |L1.1068|
00042c  886b              LDRH     r3,[r5,#2]            ;260
00042e  1d37              ADDS     r7,r6,#4              ;260
000430  19db              ADDS     r3,r3,r7              ;260
000432  05db              LSLS     r3,r3,#23             ;260
000434  0ddb              LSRS     r3,r3,#23             ;260
000436  5ce3              LDRB     r3,[r4,r3]            ;260
000438  5413              STRB     r3,[r2,r0]            ;260
00043a  1c40              ADDS     r0,r0,#1              ;260
00043c  1c76              ADDS     r6,r6,#1              ;260
00043e  b2c0              UXTB     r0,r0                 ;260
000440  b2f6              UXTB     r6,r6                 ;259
                  |L1.1090|
000442  428e              CMP      r6,r1                 ;259
000444  dbf2              BLT      |L1.1068|
000446  2100              MOVS     r1,#0                 ;263
000448  e006              B        |L1.1112|
                  |L1.1098|
00044a  1854              ADDS     r4,r2,r1              ;264
00044c  5c13              LDRB     r3,[r2,r0]            ;264
00044e  7864              LDRB     r4,[r4,#1]            ;264
000450  191b              ADDS     r3,r3,r4              ;264
000452  1c49              ADDS     r1,r1,#1              ;264
000454  5413              STRB     r3,[r2,r0]            ;264
000456  b2c9              UXTB     r1,r1                 ;263
                  |L1.1112|
000458  7853              LDRB     r3,[r2,#1]            ;263
00045a  1c5b              ADDS     r3,r3,#1              ;263
00045c  428b              CMP      r3,r1                 ;263
00045e  d8f4              BHI      |L1.1098|
000460  e715              B        |L1.654|
                  |L1.1122|
000462  886b              LDRH     r3,[r5,#2]            ;274
000464  1d37              ADDS     r7,r6,#4              ;274
000466  19db              ADDS     r3,r3,r7              ;274
000468  05db              LSLS     r3,r3,#23             ;274
00046a  0ddb              LSRS     r3,r3,#23             ;274
00046c  5ce7              LDRB     r7,[r4,r3]            ;274
00046e  466b              MOV      r3,sp                 ;274
000470  541f              STRB     r7,[r3,r0]            ;274
000472  1c40              ADDS     r0,r0,#1              ;274
000474  1c76              ADDS     r6,r6,#1              ;274
000476  b2c0              UXTB     r0,r0                 ;274
000478  b2f6              UXTB     r6,r6                 ;273
                  |L1.1146|
00047a  428e              CMP      r6,r1                 ;273
00047c  dbf1              BLT      |L1.1122|
00047e  2100              MOVS     r1,#0                 ;277
000480  e006              B        |L1.1168|
                  |L1.1154|
000482  185d              ADDS     r5,r3,r1              ;278
000484  5c1c              LDRB     r4,[r3,r0]            ;278
000486  786d              LDRB     r5,[r5,#1]            ;278
000488  1964              ADDS     r4,r4,r5              ;278
00048a  1c49              ADDS     r1,r1,#1              ;278
00048c  541c              STRB     r4,[r3,r0]            ;278
00048e  b2c9              UXTB     r1,r1                 ;277
                  |L1.1168|
000490  785c              LDRB     r4,[r3,#1]            ;277
000492  1c64              ADDS     r4,r4,#1              ;277
000494  428c              CMP      r4,r1                 ;277
000496  d8f4              BHI      |L1.1154|
000498  e743              B        |L1.802|
                  |L1.1178|
00049a  4c33              LDR      r4,|L1.1384|
00049c  0710              LSLS     r0,r2,#28             ;296
00049e  d406              BMI      |L1.1198|
0004a0  2008              MOVS     r0,#8                 ;298
0004a2  4302              ORRS     r2,r2,r0              ;298
0004a4  433a              ORRS     r2,r2,r7              ;299
0004a6  6022              STR      r2,[r4,#0]            ;300  ; g_tWork
0004a8  f7fffffe          BL       app_dome_start_current
0004ac  e005              B        |L1.1210|
                  |L1.1198|
0004ae  2008              MOVS     r0,#8                 ;303
0004b0  4382              BICS     r2,r2,r0              ;303
0004b2  43ba              BICS     r2,r2,r7              ;304
0004b4  6022              STR      r2,[r4,#0]            ;305  ; g_tWork
0004b6  f7fffffe          BL       app_dome_stop_current
                  |L1.1210|
0004ba  21f8              MOVS     r1,#0xf8              ;307
0004bc  466d              MOV      r5,sp                 ;307
0004be  7029              STRB     r1,[r5,#0]            ;307
0004c0  220a              MOVS     r2,#0xa               ;308
0004c2  2101              MOVS     r1,#1                 ;307
0004c4  706a              STRB     r2,[r5,#1]            ;308
0004c6  70a9              STRB     r1,[r5,#2]            ;309
0004c8  7821              LDRB     r1,[r4,#0]            ;310  ; g_tWork
0004ca  a801              ADD      r0,sp,#4              ;311
0004cc  0709              LSLS     r1,r1,#28             ;310
0004ce  0fc9              LSRS     r1,r1,#31             ;310
0004d0  70e9              STRB     r1,[r5,#3]            ;310
0004d2  2108              MOVS     r1,#8                 ;311
0004d4  f7fffffe          BL       app_dome_get_current_Name
0004d8  210c              MOVS     r1,#0xc               ;312
0004da  e006              B        |L1.1258|
                  |L1.1244|
0004dc  19aa              ADDS     r2,r5,r6              ;314
0004de  5c68              LDRB     r0,[r5,r1]            ;314
0004e0  7852              LDRB     r2,[r2,#1]            ;314
0004e2  1880              ADDS     r0,r0,r2              ;314
0004e4  1c76              ADDS     r6,r6,#1              ;314
0004e6  5468              STRB     r0,[r5,r1]            ;314
0004e8  b2f6              UXTB     r6,r6                 ;313
                  |L1.1258|
0004ea  4668              MOV      r0,sp                 ;313
0004ec  7840              LDRB     r0,[r0,#1]            ;313
0004ee  1c40              ADDS     r0,r0,#1              ;313
0004f0  42b0              CMP      r0,r6                 ;313
0004f2  d8f3              BHI      |L1.1244|
0004f4  4668              MOV      r0,sp                 ;317
0004f6  1c49              ADDS     r1,r1,#1              ;317
                  |L1.1272|
0004f8  f7fffffe          BL       app_2d4_send
                  |L1.1276|
0004fc  e5d1              B        |L1.162|
                  |L1.1278|
0004fe  481a              LDR      r0,|L1.1384|
000500  433a              ORRS     r2,r2,r7              ;323
000502  6002              STR      r2,[r0,#0]            ;325  ; g_tWork
000504  2000              MOVS     r0,#0                 ;325
000506  e020              B        |L1.1354|
                  |L1.1288|
000508  4817              LDR      r0,|L1.1384|
00050a  6001              STR      r1,[r0,#0]            ;331  ; g_tWork
00050c  1d98              ADDS     r0,r3,#6              ;331
00050e  05c0              LSLS     r0,r0,#23             ;331
000510  0dc0              LSRS     r0,r0,#23             ;331
000512  5c22              LDRB     r2,[r4,r0]            ;331
000514  1d58              ADDS     r0,r3,#5              ;331
000516  05c0              LSLS     r0,r0,#23             ;331
000518  0dc0              LSRS     r0,r0,#23             ;331
00051a  5c21              LDRB     r1,[r4,r0]            ;331
00051c  1d1b              ADDS     r3,r3,#4              ;331
00051e  05d8              LSLS     r0,r3,#23             ;331
000520  0dc0              LSRS     r0,r0,#23             ;331
000522  5c20              LDRB     r0,[r4,r0]            ;331
000524  f7fffffe          BL       app_dome_rgb
000528  e5bb              B        |L1.162|
                  |L1.1322|
00052a  1d1b              ADDS     r3,r3,#4
00052c  05d8              LSLS     r0,r3,#23             ;344
00052e  0dc0              LSRS     r0,r0,#23             ;344
000530  5c21              LDRB     r1,[r4,r0]            ;344
000532  480e              LDR      r0,|L1.1388|
000534  7041              STRB     r1,[r0,#1]            ;344
000536  e5b4              B        |L1.162|
                  |L1.1336|
000538  480b              LDR      r0,|L1.1384|
00053a  6001              STR      r1,[r0,#0]            ;349  ; g_tWork
00053c  f7fffffe          BL       app_dome_start_current
000540  8868              LDRH     r0,[r5,#2]            ;350
000542  1d00              ADDS     r0,r0,#4              ;350
000544  05c0              LSLS     r0,r0,#23             ;350
000546  0dc0              LSRS     r0,r0,#23             ;350
000548  5c20              LDRB     r0,[r4,r0]            ;350
                  |L1.1354|
00054a  f7fffffe          BL       app_dome_start
00054e  e5a8              B        |L1.162|
                  |L1.1360|
000550  1d1b              ADDS     r3,r3,#4
000552  05d8              LSLS     r0,r3,#23             ;353
000554  0dc0              LSRS     r0,r0,#23             ;353
000556  5c20              LDRB     r0,[r4,r0]            ;353
000558  0901              LSRS     r1,r0,#4              ;354
00055a  d1cf              BNE      |L1.1276|
00055c  0700              LSLS     r0,r0,#28             ;355
00055e  0f00              LSRS     r0,r0,#28             ;355
000560  f7fffffe          BL       Relay_set
000564  e59d              B        |L1.162|
;;;365    
                          ENDP

000566  0000              DCW      0x0000
                  |L1.1384|
                          DCD      g_tWork
                  |L1.1388|
                          DCD      dome_running_param

                          AREA ||i.app_uart_Init||, CODE, READONLY, ALIGN=2

                  app_uart_Init PROC
;;;27     
;;;28     void app_uart_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;29     
;;;30     	memset((uint8_t *) &uart_st, 0, sizeof(Uart_ST));
000002  21c1              MOVS     r1,#0xc1
000004  0089              LSLS     r1,r1,#2
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       __aeabi_memclr
;;;31     }
00000c  bd10              POP      {r4,pc}
;;;32     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.app_uart_pro||, CODE, READONLY, ALIGN=2

                  app_uart_pro PROC
;;;365    
;;;366    void app_uart_pro(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;367    	uint8_t ucData = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;368    
;;;369    #if 1
;;;370    	while (1) {
;;;371    
;;;372    		if (comGetChar(COM1, &ucData)) {
;;;373    #if 0
;;;374    //			comSendChar(COM0, ucData);
;;;375    //			log_debug("rcv %02X", ucData);
;;;376    #endif
;;;377    
;;;378    			uart_st.rxBuf[uart_st.pWrite++] = ucData;
000008  4f2a              LDR      r7,|L3.180|
00000a  2003              MOVS     r0,#3
00000c  0200              LSLS     r0,r0,#8
00000e  183c              ADDS     r4,r7,r0
                  |L3.16|
000010  4669              MOV      r1,sp                 ;372
000012  2001              MOVS     r0,#1                 ;372
000014  f7fffffe          BL       comGetChar
000018  2800              CMP      r0,#0                 ;372
00001a  d04a              BEQ      |L3.178|
00001c  4668              MOV      r0,sp
00001e  8821              LDRH     r1,[r4,#0]  ; uart_st
000020  7800              LDRB     r0,[r0,#0]
000022  5478              STRB     r0,[r7,r1]
000024  8820              LDRH     r0,[r4,#0]  ; uart_st
;;;379    			if (uart_st.pWrite >= sizeof(uart_st.rxBuf)) {
000026  2301              MOVS     r3,#1
000028  1c40              ADDS     r0,r0,#1              ;378
00002a  b280              UXTH     r0,r0                 ;378
00002c  025b              LSLS     r3,r3,#9
00002e  8020              STRH     r0,[r4,#0]            ;378
000030  4298              CMP      r0,r3
000032  d301              BCC      |L3.56|
;;;380    				uart_st.pWrite = 0;
000034  2000              MOVS     r0,#0
000036  8020              STRH     r0,[r4,#0]
                  |L3.56|
;;;381    			}
;;;382    
;;;383    			/*
;;;384    			 (0x55,0xAA)...0x00......0x00...0x00,0x00...0x00
;;;385    			 Head..........Length....cmd....Data........crc8()
;;;386    			 */
;;;387    			if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
000038  8862              LDRH     r2,[r4,#2]  ; uart_st
00003a  b280              UXTH     r0,r0
00003c  1a80              SUBS     r0,r0,r2
00003e  05c0              LSLS     r0,r0,#23
000040  0dc0              LSRS     r0,r0,#23
000042  2805              CMP      r0,#5
000044  d9e4              BLS      |L3.16|
;;;388    					% sizeof(uart_st.rxBuf) > 5) {
;;;389    				if (((uart_st.rxBuf[uart_st.pRead]) == 0x55)
000046  5cb9              LDRB     r1,[r7,r2]
000048  2955              CMP      r1,#0x55
00004a  d105              BNE      |L3.88|
;;;390    						&& ((uart_st.rxBuf[(uart_st.pRead + 1)
00004c  1c51              ADDS     r1,r2,#1
00004e  05c9              LSLS     r1,r1,#23
000050  0dc9              LSRS     r1,r1,#23
000052  5c79              LDRB     r1,[r7,r1]
000054  29aa              CMP      r1,#0xaa
000056  d006              BEQ      |L3.102|
                  |L3.88|
000058  1c52              ADDS     r2,r2,#1
;;;391    								% sizeof(uart_st.rxBuf)]) == 0xAA)) {
;;;392    					uint8_t len = uart_st.rxBuf[(uart_st.pRead + 2)
;;;393    							% sizeof(uart_st.rxBuf)];
;;;394    					if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
;;;395    							% sizeof(uart_st.rxBuf) >= (len + 4)) {
;;;396    						if (uart_st.rxBuf[(uart_st.pRead + len + 3)
;;;397    								% sizeof(uart_st.rxBuf)]
;;;398    								!= app_CalcCRC8_cycle(
;;;399    										uart_st.rxBuf + uart_st.pRead, len + 3,
;;;400    										uart_st.pRead, sizeof(uart_st.rxBuf))) {
;;;401    							uart_st.pRead++;
;;;402    							log_err(
;;;403    									"[ERROR]   remote control check error!\r\n");
;;;404    						} else {
;;;405    							/* your code */
;;;406    							app_RC_Receiver_cmd_pro(&uart_st);
;;;407    							uart_st.pRead += len + 4;
;;;408    							uart_st.pRead = uart_st.pRead
;;;409    									% sizeof(uart_st.rxBuf);
;;;410    						}
;;;411    					}
;;;412    				} else {
;;;413    					uart_st.pRead++;
00005a  8062              STRH     r2,[r4,#2]
                  |L3.92|
;;;414    				}
;;;415    				uart_st.pRead = uart_st.pRead % sizeof(uart_st.rxBuf);
00005c  8860              LDRH     r0,[r4,#2]  ; uart_st
00005e  05c0              LSLS     r0,r0,#23
000060  0dc0              LSRS     r0,r0,#23
000062  8060              STRH     r0,[r4,#2]
000064  e7d4              B        |L3.16|
                  |L3.102|
000066  1c91              ADDS     r1,r2,#2              ;392
000068  05c9              LSLS     r1,r1,#23             ;392
00006a  0dc9              LSRS     r1,r1,#23             ;392
00006c  5c7d              LDRB     r5,[r7,r1]            ;392
00006e  1d2e              ADDS     r6,r5,#4              ;394
000070  42b0              CMP      r0,r6                 ;394
000072  d3f3              BCC      |L3.92|
000074  19d0              ADDS     r0,r2,r7              ;396
000076  1ce9              ADDS     r1,r5,#3              ;396
000078  f7fffffe          BL       app_CalcCRC8_cycle
00007c  8861              LDRH     r1,[r4,#2]            ;396  ; uart_st
00007e  1ced              ADDS     r5,r5,#3              ;396
000080  194a              ADDS     r2,r1,r5              ;396
000082  05d2              LSLS     r2,r2,#23             ;396
000084  0dd2              LSRS     r2,r2,#23             ;396
000086  5cba              LDRB     r2,[r7,r2]            ;396
000088  4290              CMP      r0,r2                 ;396
00008a  d009              BEQ      |L3.160|
00008c  1c49              ADDS     r1,r1,#1              ;396
00008e  8061              STRH     r1,[r4,#2]            ;401
000090  21ff              MOVS     r1,#0xff              ;402
000092  a309              ADR      r3,|L3.184|
000094  2202              MOVS     r2,#2                 ;402
000096  3193              ADDS     r1,r1,#0x93           ;402
000098  4811              LDR      r0,|L3.224|
00009a  f7fffffe          BL       LITE_syslog
00009e  e7dd              B        |L3.92|
                  |L3.160|
0000a0  4804              LDR      r0,|L3.180|
0000a2  f7fffffe          BL       app_RC_Receiver_cmd_pro
0000a6  8860              LDRH     r0,[r4,#2]            ;407  ; uart_st
0000a8  1980              ADDS     r0,r0,r6              ;407
0000aa  05c0              LSLS     r0,r0,#23             ;408
0000ac  0dc0              LSRS     r0,r0,#23             ;408
0000ae  8060              STRH     r0,[r4,#2]            ;408
0000b0  e7d4              B        |L3.92|
                  |L3.178|
;;;416    			}
;;;417    			continue;
;;;418    		}
;;;419    		break;
;;;420    
;;;421    	}
;;;422    #else
;;;423    	while (riflag) {
;;;424    		riflag--;
;;;425    		if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE >= 4) {
;;;426    			if (((st.rxBuf[st.pRead]) == 0x55)
;;;427    					&& ((st.rxBuf[(st.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
;;;428    				len = st.rxBuf[(st.pRead + 2) % RCV_BUFSIZE];
;;;429    				if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE
;;;430    						>= (len + 4)) {
;;;431    					if (st.rxBuf[(st.pRead + len + 3) % RCV_BUFSIZE]
;;;432    							!= app_CalcCRC8_cycle(st.rxBuf + st.pRead,
;;;433    									len + 3, st.pRead, RCV_BUFSIZE)) {
;;;434    						st.pRead++;
;;;435    					} else {
;;;436    						uint8_t index = 0;
;;;437    						memset(sendBuf, 0, PAYLOAD_WIDTH);
;;;438    						switch (st.rxBuf[(st.pRead + 3) % RCV_BUFSIZE]) {
;;;439    							case BLINK_METHOD_CMD:  //闪法
;;;440    							{
;;;441    								uint8_t i = 0;
;;;442    								uint16_t index = 0;
;;;443    								index =
;;;444    								st.rxBuf[(st.pRead + 12) % RCV_BUFSIZE];
;;;445    
;;;446    								if (index
;;;447    										>= ((FMC_APROM_END - DOME_START_ADDR)
;;;448    												/ sizeof(DOME_DEFAULT_T) - 1)) {
;;;449    									break;
;;;450    								}
;;;451    								FMC_ENABLE_AP_UPDATE();
;;;452    								SYS_UnlockReg();
;;;453    								FMC_Open();
;;;454    
;;;455    								if (index == 0) {
;;;456    									u8_tmp = (FMC_APROM_END - DOME_START_ADDR)
;;;457    									/ FMC_FLASH_PAGE_SIZE;
;;;458    									for (i = 0; i < u8_tmp; i++) {
;;;459    										app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;460    									}
;;;461    								}
;;;462    #if 0
;;;463    								for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;464    									uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;465    									+ (&dome_blink.header.index
;;;466    											- &dome_blink);
;;;467    									app_eeprom_write_byte(addr, 0);
;;;468    									nop
;;;469    								}
;;;470    #endif
;;;471    #if 1
;;;472    								tmp = st.rxBuf[(st.pRead + 13) % RCV_BUFSIZE]
;;;473    								& 0x0F;  //sub mode number
;;;474    
;;;475    								uint8_t n = (tmp * sizeof(SUBDOME_T)
;;;476    										+ sizeof(DOME_HEADER_T));
;;;477    								uint8_t minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;478    								if (minSpaceBytes % 4) {
;;;479    									minSpaceBytes++;
;;;480    								}
;;;481    
;;;482    								for (i = 0; i < (n / 4); i++) {
;;;483    									uint32_t addr = index * minSpaceBytes + i * 4;
;;;484    									uint32_t dt = st.rxBuf[(st.pRead + 4 + i)
;;;485    									% RCV_BUFSIZE];
;;;486    									dt |= st.rxBuf[(st.pRead + 4 + i + 1)
;;;487    									% RCV_BUFSIZE] << 8;
;;;488    									dt |= st.rxBuf[(st.pRead + 4 + i + 2)
;;;489    									% RCV_BUFSIZE] << 16;
;;;490    									dt |= st.rxBuf[(st.pRead + 4 + i + 3)
;;;491    									% RCV_BUFSIZE] << 24;
;;;492    									app_eeprom_write_int(addr, dt);
;;;493    								}
;;;494    								for (i = 0; i < (n % 4); i++) {
;;;495    									uint32_t addr = index * minSpaceBytes + n / 4
;;;496    									+ 4;
;;;497    									uint32_t dt = 0;
;;;498    									switch (i) {
;;;499    										case 0:
;;;500    										dt = st.rxBuf[(st.pRead + 4 + n / 4)
;;;501    										% RCV_BUFSIZE];
;;;502    										break;
;;;503    										case 1:
;;;504    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;505    												+ i) % RCV_BUFSIZE] << 8;
;;;506    										break;
;;;507    										case 2:
;;;508    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;509    												+ i) % RCV_BUFSIZE] << 16;
;;;510    										break;
;;;511    										case 3:
;;;512    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;513    												+ i) % RCV_BUFSIZE] << 24;
;;;514    										break;
;;;515    									}
;;;516    									app_eeprom_write_int(addr, dt);
;;;517    								}
;;;518    
;;;519    								FMC_Close();
;;;520    								SYS_LockReg();
;;;521    								FMC_DISABLE_AP_UPDATE();
;;;522    #endif
;;;523    								u8_tmp = index & 0xFF;
;;;524    								app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;525    							}
;;;526    							break;
;;;527    							case RCV_VOL_CMD:
;;;528    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;529    							sendBuf[index++] = len;
;;;530    							sendBuf[index++] = RCV_VOL_CMD;
;;;531    							for (i = 0; i < (len - 1); i++) {
;;;532    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;533    										+ i) % RCV_BUFSIZE];
;;;534    							}
;;;535    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;536    								sendBuf[index] += sendBuf[i + 1];
;;;537    							}
;;;538    							index++;
;;;539    							app_2d4_send(sendBuf, index);
;;;540    							break;
;;;541    							case RCV_POWER_STATUS_CMD:
;;;542    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;543    							sendBuf[index++] = len;
;;;544    							sendBuf[index++] = RCV_POWER_STATUS_CMD;
;;;545    							for (i = 0; i < (len - 1); i++) {
;;;546    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;547    										+ i) % RCV_BUFSIZE];
;;;548    							}
;;;549    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;550    								sendBuf[index] += sendBuf[i + 1];
;;;551    							}
;;;552    							index++;
;;;553    							app_2d4_send(sendBuf, index);
;;;554    							break;
;;;555    #if 0
;;;556    							case RCV_X_BOX_STATUS_CMD:
;;;557    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;558    							sendBuf[index++] = len;
;;;559    							sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
;;;560    							for (i = 0; i < (len - 1); i++) {
;;;561    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;562    										+ i) % RCV_BUFSIZE];
;;;563    							}
;;;564    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;565    								sendBuf[index] += sendBuf[i + 1];
;;;566    							}
;;;567    							index++;
;;;568    							app_2d4_send(sendBuf, index);
;;;569    							break;
;;;570    #endif
;;;571    							case RCV_BT_STATUS_CMD:
;;;572    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;573    							sendBuf[index++] = len;
;;;574    							sendBuf[index++] = RCV_BT_STATUS_CMD;
;;;575    							for (i = 0; i < (len - 1); i++) {
;;;576    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;577    										+ i) % RCV_BUFSIZE];
;;;578    							}
;;;579    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;580    								sendBuf[index] += sendBuf[i + 1];
;;;581    							}
;;;582    							index++;
;;;583    							if (g_tWork.status.bits.DOME == 0) {
;;;584    								app_2d4_send(sendBuf, index);
;;;585    							}
;;;586    							break;
;;;587    							case RCV_PREV_NEXT_CMD:
;;;588    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;589    							sendBuf[index++] = len;
;;;590    							sendBuf[index++] = RCV_PREV_NEXT_CMD;
;;;591    							for (i = 0; i < (len - 1); i++) {
;;;592    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;593    										+ i) % RCV_BUFSIZE];
;;;594    							}
;;;595    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;596    								sendBuf[index] += sendBuf[i + 1];
;;;597    							}
;;;598    							index++;
;;;599    							if (g_tWork.status.bits.DOME == 0) {
;;;600    								app_2d4_send(sendBuf, index);
;;;601    							}
;;;602    							break;
;;;603    							case RCV_USB_PLAY_TIME_CMD:
;;;604    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;605    							sendBuf[index++] = len;
;;;606    							sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
;;;607    							for (i = 0; i < (len - 1); i++) {
;;;608    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;609    										+ i) % RCV_BUFSIZE];
;;;610    							}
;;;611    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;612    								sendBuf[index] += sendBuf[i + 1];
;;;613    							}
;;;614    							index++;
;;;615    							if (g_tWork.status.bits.DOME == 0) {
;;;616    								app_2d4_send(sendBuf, index);
;;;617    							}
;;;618    							break;
;;;619    							case RCV_FM_HZ_CMD:
;;;620    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;621    							sendBuf[index++] = len;
;;;622    							sendBuf[index++] = RCV_FM_HZ_CMD;
;;;623    							for (i = 0; i < (len - 1); i++) {
;;;624    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;625    										+ i) % RCV_BUFSIZE];
;;;626    							}
;;;627    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;628    								sendBuf[index] += sendBuf[i + 1];
;;;629    							}
;;;630    							index++;
;;;631    
;;;632    							if (g_tWork.status.bits.DOME == 0) {
;;;633    								app_2d4_send(sendBuf, index);
;;;634    							}
;;;635    							break;
;;;636    							case MODE_CHANGE_CMD:   //MODE
;;;637    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;638    							sendBuf[index++] = len;
;;;639    							sendBuf[index++] = MODE_CHANGE_CMD;
;;;640    							for (i = 0; i < (len - 1); i++) {
;;;641    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;642    										+ i) % RCV_BUFSIZE];
;;;643    							}
;;;644    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;645    								sendBuf[index] += sendBuf[i + 1];
;;;646    							}
;;;647    							index++;
;;;648    							app_2d4_send(sendBuf, index);
;;;649    							break;
;;;650    							case RCV_PLAY_PAUSE_STATUS_CMD:
;;;651    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;652    							sendBuf[index++] = len;
;;;653    							sendBuf[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
;;;654    							for (i = 0; i < (len - 1); i++) {
;;;655    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;656    										+ i) % RCV_BUFSIZE];
;;;657    							}
;;;658    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;659    								sendBuf[index] += sendBuf[i + 1];
;;;660    							}
;;;661    							index++;
;;;662    							if (g_tWork.status.bits.DOME == 0) {
;;;663    								app_2d4_send(sendBuf, index);
;;;664    							}
;;;665    							break;
;;;666    							/// app --start
;;;667    							case KEY_CARD_POWER_CMD:
;;;668    							if (g_tWork.status.bits.blinkEnable == 0) {
;;;669    //								g_tWork.status.bits.pause = 0;
;;;670    								g_tWork.status.bits.blinkEnable = 1;
;;;671    								g_tWork.status.bits.DEMO = 1;
;;;672    								app_dome_start_current();
;;;673    							} else {
;;;674    //								g_tWork.status.bits.pause = 1;
;;;675    								g_tWork.status.bits.blinkEnable = 0;
;;;676    								g_tWork.status.bits.DEMO = 0;
;;;677    								app_dome_stop_current();
;;;678    							}
;;;679    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;680    							sendBuf[index++] = 10;
;;;681    							sendBuf[index++] = KEY_POWER_SHORT_CMD;
;;;682    							sendBuf[index++] = g_tWork.status.bits.blinkEnable;
;;;683    							app_dome_get_current_Name(sendBuf + index, 8);
;;;684    							index += 8;
;;;685    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;686    								sendBuf[index] += sendBuf[i + 1];
;;;687    							}
;;;688    							index++;
;;;689    							app_2d4_send(sendBuf, index);
;;;690    							break;
;;;691    							case KEY_CARD_DEMO_CMD:
;;;692    //							if (g_tWork.status.bits.DEMO) {
;;;693    //								g_tWork.status.bits.DEMO = 0;
;;;694    //							} else {
;;;695    							g_tWork.status.bits.DEMO = 1;
;;;696    //							}
;;;697    							app_dome_start(0, 0);
;;;698    
;;;699    							break;
;;;700    							case APP_COLOR_ATLA_CMD:
;;;701    #if 1
;;;702    							app_dome_rgb(
;;;703    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;704    									st.rxBuf[(st.pRead + 5) % RCV_BUFSIZE],
;;;705    									st.rxBuf[(st.pRead + 6) % RCV_BUFSIZE]);
;;;706    #else
;;;707    							app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;708    #endif
;;;709    							break;
;;;710    							case APP_BRIGHT_CMD:
;;;711    							dome_running_param.bright = st.rxBuf[(st.pRead
;;;712    									+ 4) % RCV_BUFSIZE];
;;;713    							Light_bright_set(
;;;714    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE]);
;;;715    							break;
;;;716    							case APP_SPEED_CMD:
;;;717    							dome_running_param.speed = st.rxBuf[(st.pRead
;;;718    									+ 4) % RCV_BUFSIZE];
;;;719    							break;
;;;720    							case APP_FLASH_INDEX_CMD:
;;;721    							g_tWork.status.bits.DEMO = 0;
;;;722    							app_dome_start_current();
;;;723    							app_dome_start(
;;;724    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;725    									0);
;;;726    							break;
;;;727    							case APP_SWITCH_INDEX_CMD: {
;;;728    								uint8_t switchData = st.rxBuf[(st.pRead + 4)
;;;729    								% RCV_BUFSIZE];
;;;730    								if (((switchData >> 4) & 0x0F) == 0) {
;;;731    									Relay_set(switchData & 0x0F);
;;;732    								}
;;;733    							}
;;;734    							break;
;;;735    							/// app --end
;;;736    							default:
;;;737    							break;
;;;738    						}
;;;739    						st.pRead += len + 4;
;;;740    #if 1
;;;741    						st.pRead = st.pRead % RCV_BUFSIZE;
;;;742    //						break;
;;;743    						return;
;;;744    #endif
;;;745    					}
;;;746    				}
;;;747    			} else {
;;;748    				st.pRead++;
;;;749    			}
;;;750    			st.pRead = st.pRead % RCV_BUFSIZE;
;;;751    		}
;;;752    	}
;;;753    #endif
;;;754    }
0000b2  bdf8              POP      {r3-r7,pc}
                          ENDP

                  |L3.180|
                          DCD      ||.bss||
                  |L3.184|
0000b8  5b455252          DCB      "[ERROR]   remote control check error!\r\n",0
0000bc  4f525d20
0000c0  20207265
0000c4  6d6f7465
0000c8  20636f6e
0000cc  74726f6c
0000d0  20636865
0000d4  636b2065
0000d8  72726f72
0000dc  210d0a00
                  |L3.224|
                          DCD      ||.constdata||

                          AREA ||i.app_uart_send||, CODE, READONLY, ALIGN=2

                  app_uart_send PROC
;;;32     
;;;33     void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  4604              MOV      r4,r0
000004  b082              SUB      sp,sp,#8
;;;34     	uint8_t index = 0, i = 0;
;;;35     
;;;36     	memset(uart_st.txBuf, 0, sizeof(uart_st.txBuf));
000006  21ff              MOVS     r1,#0xff
000008  481a              LDR      r0,|L4.116|
00000a  4616              MOV      r6,r2                 ;33
00000c  2500              MOVS     r5,#0                 ;34
00000e  3101              ADDS     r1,#1
000010  9000              STR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_memclr
;;;37     
;;;38     	uart_st.txBuf[index++] = 0x55;
000016  9800              LDR      r0,[sp,#0]
000018  2155              MOVS     r1,#0x55
00001a  7001              STRB     r1,[r0,#0]
;;;39     	uart_st.txBuf[index++] = 0xAA;
00001c  4815              LDR      r0,|L4.116|
00001e  21aa              MOVS     r1,#0xaa
000020  1c40              ADDS     r0,r0,#1
000022  7001              STRB     r1,[r0,#0]
;;;40     	uart_st.txBuf[index++] = len + 1;
000024  4913              LDR      r1,|L4.116|
000026  1c70              ADDS     r0,r6,#1
000028  1c89              ADDS     r1,r1,#2
00002a  7008              STRB     r0,[r1,#0]
;;;41     	uart_st.txBuf[index++] = cmd;
00002c  1c48              ADDS     r0,r1,#1
00002e  7004              STRB     r4,[r0,#0]
000030  4f11              LDR      r7,|L4.120|
000032  2404              MOVS     r4,#4
;;;42     	for (i = 0; i < len; i++) {
000034  e00a              B        |L4.76|
                  |L4.54|
;;;43     		uart_st.txBuf[index++] = *(ptr + i);
000036  9803              LDR      r0,[sp,#0xc]
000038  5d41              LDRB     r1,[r0,r5]
00003a  1938              ADDS     r0,r7,r4
00003c  30ff              ADDS     r0,r0,#0xff
00003e  30ff              ADDS     r0,r0,#0xff
000040  3002              ADDS     r0,#2
000042  1c64              ADDS     r4,r4,#1
000044  1c6d              ADDS     r5,r5,#1
000046  7001              STRB     r1,[r0,#0]
000048  b2e4              UXTB     r4,r4
00004a  b2ed              UXTB     r5,r5                 ;42
                  |L4.76|
00004c  42b5              CMP      r5,r6                 ;42
00004e  d3f2              BCC      |L4.54|
000050  1d36              ADDS     r6,r6,#4              ;42
;;;44     	}
;;;45     	uart_st.txBuf[index++] = app_CalcCRC8(uart_st.txBuf, len + 4);
000052  b2f1              UXTB     r1,r6
000054  9800              LDR      r0,[sp,#0]
000056  f7fffffe          BL       app_CalcCRC8
00005a  1939              ADDS     r1,r7,r4
00005c  31ff              ADDS     r1,r1,#0xff
00005e  31ff              ADDS     r1,r1,#0xff
000060  3102              ADDS     r1,#2
000062  7008              STRB     r0,[r1,#0]
000064  1c64              ADDS     r4,r4,#1
000066  b2e2              UXTB     r2,r4
;;;46     	comSendBuf(COM1, uart_st.txBuf, index);
000068  2001              MOVS     r0,#1
00006a  9900              LDR      r1,[sp,#0]
00006c  f7fffffe          BL       comSendBuf
;;;47     
;;;48     //	for (i = 0; i < (len + 5); i++) {
;;;49     //		comSendChar(uart_st.txBuf[i]);
;;;50     //	}
;;;51     }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
;;;52     
                          ENDP

                  |L4.116|
                          DCD      ||.bss||+0x200
                  |L4.120|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  uart_st
                          %        772

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6170705f          DCB      0x61,0x70,0x70,0x5f
000004  75617274          DCB      0x75,0x61,0x72,0x74
000008  5f70726f          DCB      0x5f,0x70,0x72,0x6f
00000c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  len
000000  00                DCB      0x00
                  u8_tmp
000001  00                DCB      0x00
                  tmp
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_uart_c_fe162fbd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REVSH|
#line 402
|__asm___10_app_uart_c_fe162fbd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
