; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\app_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\app_uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\app_uart.crf ..\App\src\app_uart.c]
                          THUMB

                          AREA ||i.app_RC_Receiver_cmd_pro||, CODE, READONLY, ALIGN=2

                  app_RC_Receiver_cmd_pro PROC
;;;52     
;;;53     static void app_RC_Receiver_cmd_pro(Uart_ST* st) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b089              SUB      sp,sp,#0x24
;;;54     
;;;55     	uint8_t index = 0;
;;;56     	uint8_t i = 0;
000004  2600              MOVS     r6,#0
000006  4604              MOV      r4,r0                 ;53
;;;57     	uint8_t buffer[PAYLOAD_WIDTH] = { 0 };
000008  9600              STR      r6,[sp,#0]
00000a  9601              STR      r6,[sp,#4]
00000c  9602              STR      r6,[sp,#8]
;;;58     
;;;59     	switch (st->rxBuf[(st->pRead + 3) % sizeof(st->rxBuf)]) {
00000e  2003              MOVS     r0,#3
000010  9603              STR      r6,[sp,#0xc]
000012  0200              LSLS     r0,r0,#8
000014  1825              ADDS     r5,r4,r0
000016  886b              LDRH     r3,[r5,#2]
000018  49fb              LDR      r1,|L1.1032|
00001a  1cd8              ADDS     r0,r3,#3
;;;60     	case BLINK_METHOD_CMD:  //闪法
;;;61     	{
;;;62     //		break;
;;;63     		uint8_t index = st->rxBuf[(st->pRead + 12) % sizeof(st->rxBuf)];
;;;64     		uint8_t availableGroup = 0;
;;;65     		uint8_t minSpaceBytes = 0;
;;;66     		uint8_t bytes = 0;
;;;67     		if (sizeof(DOME_DEFAULT_T) % 4) {
;;;68     			minSpaceBytes = (sizeof(DOME_DEFAULT_T) / 4) * 4 + 4;
;;;69     		} else {
;;;70     			minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;71     		}
;;;72     		availableGroup = (FMC_APROM_END - DOME_START_ADDR) / minSpaceBytes;
;;;73     
;;;74     		if (index > (availableGroup - 1)) {
;;;75     			break;
;;;76     		}
;;;77     		FMC_ENABLE_AP_UPDATE();
;;;78     		SYS_UnlockReg();
;;;79     		FMC_Open();
;;;80     
;;;81     		if (index == 0) {
;;;82     			u8_tmp = (FMC_APROM_END - DOME_START_ADDR) / FMC_FLASH_PAGE_SIZE;
;;;83     			for (i = 0; i < u8_tmp; i++) {
;;;84     				app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;85     			}
;;;86     		}
;;;87     #if 0
;;;88     		for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;89     			uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;90     			+ (&dome_blink.header.index
;;;91     					- &dome_blink);
;;;92     			app_eeprom_write_byte(addr, 0);
;;;93     			nop
;;;94     		}
;;;95     #endif
;;;96     #if 1
;;;97     		tmp = st->rxBuf[(st->pRead + 13) % sizeof(st->rxBuf)] & 0x0F; //sub mode number
;;;98     
;;;99     		bytes = tmp * sizeof(SUBDOME_T) + sizeof(DOME_HEADER_T);
;;;100    
;;;101    //		if (minSpaceBytes % 4) {
;;;102    //			minSpaceBytes++;
;;;103    //		}
;;;104    
;;;105    		for (i = 0; i < (bytes / 4); i++) {
;;;106    			uint32_t addr = index * minSpaceBytes + i * 4;
;;;107    			uint32_t dt = st->rxBuf[(st->pRead + 4 + i * 4) % sizeof(st->rxBuf)];
;;;108    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 1) % sizeof(st->rxBuf)]
;;;109    					<< 8;
;;;110    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 2) % sizeof(st->rxBuf)]
;;;111    					<< 16;
;;;112    			dt |= st->rxBuf[(st->pRead + 4 + i * 4 + 3) % sizeof(st->rxBuf)]
;;;113    					<< 24;
;;;114    			app_eeprom_write_int(addr, dt);
;;;115    		}
;;;116    		if (bytes % 4) {
;;;117    			uint32_t addr = index * minSpaceBytes + (bytes / 4) * 4;
;;;118    			uint32_t dt = 0;
;;;119    			for (i = 0; i < (bytes % 4); i++) {
;;;120    				switch (i) {
;;;121    				case 0:
;;;122    					dt = st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4)
;;;123    							% sizeof(st->rxBuf)];
;;;124    					break;
;;;125    				case 1:
;;;126    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;127    							% sizeof(st->rxBuf)] << 8;
;;;128    					break;
;;;129    				case 2:
;;;130    					dt |= st->rxBuf[(st->pRead + 4 + (bytes / 4) * 4 + i)
;;;131    							% sizeof(st->rxBuf)] << 16;
;;;132    					break;
;;;133    				}
;;;134    			}
;;;135    			app_eeprom_write_int(addr, dt);
;;;136    		}
;;;137    
;;;138    #if 1
;;;139    		blink_number = 0;
;;;140    		for (i = 0; i < availableGroup; i++) {
;;;141    			uint32_t add_tmp = i * minSpaceBytes;
;;;142    			uint32_t add_data = app_eeprom_read_int(add_tmp);
;;;143    			if (0xFFFFFFFF != add_data) {
;;;144    				blink_number++;
;;;145    			} else {
;;;146    				break;
;;;147    			}
;;;148    		}
;;;149    #endif
;;;150    
;;;151    		FMC_Close();
;;;152    		SYS_LockReg();
;;;153    		FMC_DISABLE_AP_UPDATE();
;;;154    #endif
;;;155    		u8_tmp = index & 0xFF;
;;;156    		app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;157    	}
;;;158    		break;
;;;159    	case RCV_VOL_CMD:
;;;160    		buffer[index++] = LAMP2LCD_HEADER;
;;;161    		buffer[index++] = len;
00001c  780f              LDRB     r7,[r1,#0]
00001e  05c0              LSLS     r0,r0,#23             ;59
000020  0dc0              LSRS     r0,r0,#23             ;59
;;;162    		buffer[index++] = RCV_VOL_CMD;
;;;163    		for (i = 0; i < (len - 1); i++) {
000022  49fa              LDR      r1,|L1.1036|
000024  5c20              LDRB     r0,[r4,r0]            ;59
000026  1e7a              SUBS     r2,r7,#1
;;;164    			buffer[index++] =
;;;165    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;166    		}
;;;167    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;168    			buffer[index] += buffer[i + 1];
;;;169    		}
;;;170    		index++;
;;;171    		app_2d4_send(buffer, index);
;;;172    		break;
;;;173    	case RCV_POWER_STATUS_CMD:
;;;174    		buffer[index++] = LAMP2LCD_HEADER;
;;;175    		buffer[index++] = len;
;;;176    		buffer[index++] = RCV_POWER_STATUS_CMD;
;;;177    		for (i = 0; i < (len - 1); i++) {
;;;178    			buffer[index++] =
;;;179    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;180    		}
;;;181    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;182    			buffer[index] += buffer[i + 1];
;;;183    		}
;;;184    		index++;
;;;185    		app_2d4_send(buffer, index);
;;;186    		break;
;;;187    #if 0
;;;188    		case RCV_X_BOX_STATUS_CMD:
;;;189    		buffer[index++] = LAMP2LCD_HEADER;
;;;190    		buffer[index++] = len;
;;;191    		buffer[index++] = RCV_X_BOX_STATUS_CMD;
;;;192    		for (i = 0; i < (len - 1); i++) {
;;;193    			buffer[index++] = st->rxBuf[(st->pRead + 4
;;;194    					+ i) % sizeof(st->rxBuf)];
;;;195    		}
;;;196    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;197    			buffer[index] += buffer[i + 1];
;;;198    		}
;;;199    		index++;
;;;200    		app_2d4_send(buffer, index);
;;;201    		break;
;;;202    #endif
;;;203    	case RCV_BT_STATUS_CMD:
;;;204    		g_tWork.device_mode = BT_MODE;
;;;205    		if (g_tWork.status.bits.DOME) {
000028  6849              LDR      r1,[r1,#4]
00002a  2841              CMP      r0,#0x41              ;59
00002c  d07e              BEQ      |L1.300|
00002e  dc28              BGT      |L1.130|
000030  2835              CMP      r0,#0x35              ;59
000032  d07c              BEQ      |L1.302|
000034  dc17              BGT      |L1.102|
000036  2812              CMP      r0,#0x12              ;59
000038  d061              BEQ      |L1.254|
00003a  2831              CMP      r0,#0x31              ;59
00003c  d078              BEQ      |L1.304|
00003e  2833              CMP      r0,#0x33              ;59
000040  d077              BEQ      |L1.306|
000042  2834              CMP      r0,#0x34              ;59
000044  d135              BNE      |L1.178|
000046  1d1b              ADDS     r3,r3,#4              ;59
;;;206    			break;
;;;207    		}
;;;208    		buffer[index++] = LAMP2LCD_HEADER;
;;;209    		buffer[index++] = len;
;;;210    		buffer[index++] = RCV_BT_STATUS_CMD;
;;;211    		for (i = 0; i < (len - 1); i++) {
;;;212    			buffer[index++] =
;;;213    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;214    		}
;;;215    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;216    			buffer[index] += buffer[i + 1];
;;;217    		}
;;;218    		index++;
;;;219    		app_2d4_send(buffer, index);
;;;220    		break;
;;;221    	case RCV_PREV_NEXT_CMD:
;;;222    		if (g_tWork.status.bits.DOME) {
;;;223    			break;
;;;224    		}
;;;225    		buffer[index++] = LAMP2LCD_HEADER;
;;;226    		buffer[index++] = len;
;;;227    		buffer[index++] = RCV_PREV_NEXT_CMD;
;;;228    		for (i = 0; i < (len - 1); i++) {
;;;229    			buffer[index++] =
;;;230    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;231    		}
;;;232    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;233    			buffer[index] += buffer[i + 1];
;;;234    		}
;;;235    		index++;
;;;236    		app_2d4_send(buffer, index);
;;;237    		break;
;;;238    	case RCV_USB_PLAY_TIME_CMD:
;;;239    		g_tWork.device_mode = USB_MODE;
;;;240    		if (g_tWork.status.bits.DOME) {
;;;241    			break;
;;;242    		}
;;;243    		buffer[index++] = LAMP2LCD_HEADER;
;;;244    		buffer[index++] = len;
;;;245    		buffer[index++] = RCV_USB_PLAY_TIME_CMD;
;;;246    		for (i = 0; i < (len - 1); i++) {
;;;247    			buffer[index++] =
;;;248    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;249    		}
;;;250    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;251    			buffer[index] += buffer[i + 1];
;;;252    		}
;;;253    		index++;
;;;254    		app_2d4_send(buffer, index);
;;;255    		break;
;;;256    	case RCV_FM_HZ_CMD:
;;;257    		g_tWork.device_mode = FM_MODE;
;;;258    		if (g_tWork.status.bits.DOME) {
;;;259    			break;
;;;260    		}
;;;261    		buffer[index++] = LAMP2LCD_HEADER;
;;;262    		buffer[index++] = len;
;;;263    		buffer[index++] = RCV_FM_HZ_CMD;
;;;264    		for (i = 0; i < (len - 1); i++) {
;;;265    			buffer[index++] =
;;;266    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;267    		}
;;;268    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;269    			buffer[index] += buffer[i + 1];
;;;270    		}
;;;271    		index++;
;;;272    		app_2d4_send(buffer, index);
;;;273    		break;
;;;274    	case MODE_CHANGE_CMD:   //MODE
;;;275    		buffer[index++] = LAMP2LCD_HEADER;
;;;276    		buffer[index++] = len;
;;;277    		buffer[index++] = MODE_CHANGE_CMD;
;;;278    		for (i = 0; i < (len - 1); i++) {
;;;279    			buffer[index++] =
;;;280    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;281    		}
;;;282    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;283    			buffer[index] += buffer[i + 1];
;;;284    		}
;;;285    		index++;
;;;286    		app_2d4_send(buffer, index);
;;;287    		break;
;;;288    	case RCV_PLAY_PAUSE_STATUS_CMD:
;;;289    		g_tWork.device_mode = st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
000048  05d8              LSLS     r0,r3,#23
00004a  0dc0              LSRS     r0,r0,#23
00004c  5c23              LDRB     r3,[r4,r0]
00004e  48ef              LDR      r0,|L1.1036|
000050  7003              STRB     r3,[r0,#0]
;;;290    		if (g_tWork.status.bits.DOME) {
000052  07c8              LSLS     r0,r1,#31
000054  d12d              BNE      |L1.178|
;;;291    			break;
;;;292    		}
;;;293    		buffer[index++] = LAMP2LCD_HEADER;
000056  20f8              MOVS     r0,#0xf8
000058  466b              MOV      r3,sp
00005a  7018              STRB     r0,[r3,#0]
;;;294    		buffer[index++] = len;
00005c  705f              STRB     r7,[r3,#1]
;;;295    		buffer[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
00005e  2034              MOVS     r0,#0x34
000060  7098              STRB     r0,[r3,#2]
000062  2003              MOVS     r0,#3
;;;296    		for (i = 0; i < (len - 1); i++) {
000064  e232              B        |L1.1228|
                  |L1.102|
000066  2836              CMP      r0,#0x36              ;59
000068  d07e              BEQ      |L1.360|
00006a  2837              CMP      r0,#0x37              ;59
00006c  d07d              BEQ      |L1.362|
00006e  2838              CMP      r0,#0x38              ;59
000070  d11f              BNE      |L1.178|
000072  20f8              MOVS     r0,#0xf8              ;160
000074  466b              MOV      r3,sp                 ;160
000076  7018              STRB     r0,[r3,#0]            ;160
000078  705f              STRB     r7,[r3,#1]            ;161
00007a  2038              MOVS     r0,#0x38              ;162
00007c  7098              STRB     r0,[r3,#2]            ;162
00007e  2003              MOVS     r0,#3                 ;162
000080  e115              B        |L1.686|
                  |L1.130|
000082  4de2              LDR      r5,|L1.1036|
;;;297    			buffer[index++] =
;;;298    					st->rxBuf[(st->pRead + 4 + i) % sizeof(st->rxBuf)];
;;;299    		}
;;;300    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;301    			buffer[index] += buffer[i + 1];
;;;302    		}
;;;303    		index++;
;;;304    		app_2d4_send(buffer, index);
;;;305    		break;
;;;306    	case DEVICE_STA_CMD: {
;;;307    		uint8_t sta[2] = { 0 };
;;;308    		memset(sta, 0, sizeof(sta));
;;;309    		sta[0] |= g_tWork.status.bits.blinkEnable ? 0x80 : 0;
;;;310    		sta[0] |= g_tWork.status.bits.DEMO ? 0x40 : 0;
;;;311    		sta[1] |= Relay_IsOn() ? 0x01 : 0;
;;;312    		app_uart_send(DEVICE_STA_CMD, sta, sizeof(sta));
;;;313    	}
;;;314    		break;
;;;315    		/// app --start
;;;316    	case KEY_CARD_POWER_CMD:
;;;317    		if (g_tWork.status.bits.blinkEnable == 0) {
;;;318    			//								g_tWork.status.bits.pause = 0;
;;;319    			g_tWork.status.bits.blinkEnable = 1;
;;;320    			g_tWork.status.bits.DEMO = 1;
000084  2204              MOVS     r2,#4
000086  686d              LDR      r5,[r5,#4]            ;205
;;;321    			app_dome_start_current();
;;;322    		} else {
;;;323    			//								g_tWork.status.bits.pause = 1;
;;;324    			g_tWork.status.bits.blinkEnable = 0;
;;;325    			g_tWork.status.bits.DEMO = 0;
;;;326    			app_dome_stop_current();
;;;327    		}
;;;328    		if (g_tWork.status.bits.DOME == 0) {
;;;329    			break;
;;;330    		}
;;;331    		buffer[index++] = LAMP2LCD_HEADER;
;;;332    		buffer[index++] = 10;
;;;333    		buffer[index++] = KEY_POWER_SHORT_CMD;
;;;334    		if (g_tWork.status.bits.blinkEnable) {
;;;335    			buffer[index++] = 0;
;;;336    		} else {
;;;337    			buffer[index++] = 1;
;;;338    		}
;;;339    
;;;340    		app_dome_get_current_Name(buffer + index, 8);
;;;341    		index += 8;
;;;342    		for (i = 0; i < (buffer[1] + 1); i++) {
;;;343    			buffer[index] += buffer[i + 1];
;;;344    		}
;;;345    		index++;
;;;346    		app_2d4_send(buffer, index);
;;;347    		break;
;;;348    	case KEY_CARD_DEMO_CMD:
;;;349    		g_tWork.status.bits.DEMO = 1;
;;;350    		g_tWork.status.bits.blinkEnable = 1;
;;;351    		app_dome_start(1);
;;;352    
;;;353    		break;
;;;354    	case APP_COLOR_ATLA_CMD:
;;;355    #if 1
;;;356    		g_tWork.status.bits.DEMO = 0;
;;;357    		app_dome_rgb(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)],
;;;358    				st->rxBuf[(st->pRead + 5) % sizeof(st->rxBuf)],
;;;359    				st->rxBuf[(st->pRead + 6) % sizeof(st->rxBuf)]);
;;;360    #else
;;;361    		app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;362    #endif
;;;363    		break;
;;;364    	case APP_BRIGHT_CMD:
;;;365    		dome_running_param.bright = st->rxBuf[(st->pRead + 4)
000088  4fe1              LDR      r7,|L1.1040|
00008a  4395              BICS     r5,r5,r2              ;325
00008c  2864              CMP      r0,#0x64              ;59
00008e  d06d              BEQ      |L1.364|
000090  dc11              BGT      |L1.182|
000092  2854              CMP      r0,#0x54              ;59
000094  d06b              BEQ      |L1.366|
000096  2857              CMP      r0,#0x57              ;59
000098  d06a              BEQ      |L1.368|
00009a  2862              CMP      r0,#0x62              ;59
00009c  d069              BEQ      |L1.370|
00009e  2863              CMP      r0,#0x63              ;59
0000a0  d107              BNE      |L1.178|
0000a2  1d1b              ADDS     r3,r3,#4              ;59
0000a4  05d8              LSLS     r0,r3,#23
0000a6  0dc0              LSRS     r0,r0,#23
0000a8  5c21              LDRB     r1,[r4,r0]
0000aa  7039              STRB     r1,[r7,#0]
;;;366    				% sizeof(st->rxBuf)];
;;;367    		Light_bright_set(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
0000ac  5c20              LDRB     r0,[r4,r0]
0000ae  f7fffffe          BL       Light_bright_set
                  |L1.178|
;;;368    		break;
;;;369    	case APP_SPEED_CMD:
;;;370    		dome_running_param.speed =
;;;371    				st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;372    		break;
;;;373    	case APP_FLASH_INDEX_CMD:
;;;374    		g_tWork.status.bits.DEMO = 0;
;;;375    		g_tWork.status.bits.blinkEnable = 1;
;;;376    //		app_dome_start_current();
;;;377    		app_dome_start(st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)]);
;;;378    
;;;379    		break;
;;;380    	case APP_SWITCH_INDEX_CMD: {
;;;381    		uint8_t switchData = st->rxBuf[(st->pRead + 4) % sizeof(st->rxBuf)];
;;;382    		if (((switchData >> 4) & 0x0F) == 0) {
;;;383    			Relay_set(switchData & 0x0F);
;;;384    		}
;;;385    	}
;;;386    		break;
;;;387    		/// app --end
;;;388    	default:
;;;389    		break;
;;;390    	}
;;;391    
;;;392    }
0000b2  b009              ADD      sp,sp,#0x24
0000b4  bdf0              POP      {r4-r7,pc}
                  |L1.182|
0000b6  2865              CMP      r0,#0x65              ;59
0000b8  d07e              BEQ      |L1.440|
0000ba  2866              CMP      r0,#0x66              ;59
0000bc  d07d              BEQ      |L1.442|
0000be  28f0              CMP      r0,#0xf0              ;59
0000c0  d1f7              BNE      |L1.178|
0000c2  2000              MOVS     r0,#0                 ;307
0000c4  466a              MOV      r2,sp                 ;309
0000c6  9004              STR      r0,[sp,#0x10]         ;309
0000c8  7c10              LDRB     r0,[r2,#0x10]         ;309
0000ca  070a              LSLS     r2,r1,#28             ;309
0000cc  0fd2              LSRS     r2,r2,#31             ;309
0000ce  01d2              LSLS     r2,r2,#7              ;309
0000d0  0749              LSLS     r1,r1,#29             ;310
0000d2  4310              ORRS     r0,r0,r2              ;309
0000d4  0fc9              LSRS     r1,r1,#31             ;310
0000d6  0189              LSLS     r1,r1,#6              ;310
0000d8  4308              ORRS     r0,r0,r1              ;310
0000da  466a              MOV      r2,sp                 ;310
0000dc  7410              STRB     r0,[r2,#0x10]         ;310
0000de  f7fffffe          BL       Relay_IsOn
0000e2  2800              CMP      r0,#0                 ;311
0000e4  d000              BEQ      |L1.232|
0000e6  2001              MOVS     r0,#1                 ;311
                  |L1.232|
0000e8  4669              MOV      r1,sp                 ;311
0000ea  7c49              LDRB     r1,[r1,#0x11]         ;311
0000ec  2202              MOVS     r2,#2                 ;312
0000ee  4308              ORRS     r0,r0,r1              ;311
0000f0  4669              MOV      r1,sp                 ;311
0000f2  7448              STRB     r0,[r1,#0x11]         ;311
0000f4  a904              ADD      r1,sp,#0x10           ;312
0000f6  20f0              MOVS     r0,#0xf0              ;312
                  |L1.248|
0000f8  f7fffffe          BL       app_uart_send
0000fc  e7d9              B        |L1.178|
                  |L1.254|
0000fe  330c              ADDS     r3,r3,#0xc
000100  05d8              LSLS     r0,r3,#23             ;63
000102  0dc0              LSRS     r0,r0,#23             ;63
000104  5c27              LDRB     r7,[r4,r0]            ;63
000106  2074              MOVS     r0,#0x74              ;68
000108  9005              STR      r0,[sp,#0x14]         ;72
00010a  202c              MOVS     r0,#0x2c              ;72
00010c  9007              STR      r0,[sp,#0x1c]         ;74
00010e  2f2b              CMP      r7,#0x2b              ;74
000110  dccf              BGT      |L1.178|
000112  48c0              LDR      r0,|L1.1044|
000114  6801              LDR      r1,[r0,#0]            ;77
000116  2208              MOVS     r2,#8                 ;77
000118  4311              ORRS     r1,r1,r2              ;77
00011a  6001              STR      r1,[r0,#0]            ;77
00011c  2159              MOVS     r1,#0x59              ;77
00011e  2216              MOVS     r2,#0x16              ;77
000120  2388              MOVS     r3,#0x88              ;77
                  |L1.290|
000122  48bd              LDR      r0,|L1.1048|
000124  6001              STR      r1,[r0,#0]            ;77
000126  6002              STR      r2,[r0,#0]            ;77
000128  6003              STR      r3,[r0,#0]            ;77
00012a  e003              B        |L1.308|
                  |L1.300|
00012c  e1a0              B        |L1.1136|
                  |L1.302|
00012e  e11d              B        |L1.876|
                  |L1.304|
000130  e0d0              B        |L1.724|
                  |L1.306|
000132  e0f2              B        |L1.794|
                  |L1.308|
000134  6800              LDR      r0,[r0,#0]            ;77
000136  2800              CMP      r0,#0                 ;77
000138  d0f3              BEQ      |L1.290|
00013a  f7fffffe          BL       FMC_Open
00013e  2f00              CMP      r7,#0                 ;81
000140  d10c              BNE      |L1.348|
000142  210a              MOVS     r1,#0xa               ;82
000144  48b0              LDR      r0,|L1.1032|
000146  2600              MOVS     r6,#0                 ;83
000148  7041              STRB     r1,[r0,#1]            ;82
                  |L1.330|
00014a  0270              LSLS     r0,r6,#9              ;84
00014c  f7fffffe          BL       app_eeprom_erase
000150  48ad              LDR      r0,|L1.1032|
000152  1c76              ADDS     r6,r6,#1              ;84
000154  7840              LDRB     r0,[r0,#1]            ;83  ; u8_tmp
000156  b2f6              UXTB     r6,r6                 ;83
000158  4286              CMP      r6,r0                 ;83
00015a  d3f6              BCC      |L1.330|
                  |L1.348|
00015c  8868              LDRH     r0,[r5,#2]            ;97
00015e  300d              ADDS     r0,r0,#0xd            ;97
000160  05c0              LSLS     r0,r0,#23             ;97
000162  0dc0              LSRS     r0,r0,#23             ;97
000164  5c20              LDRB     r0,[r4,r0]            ;97
000166  e005              B        |L1.372|
                  |L1.360|
000168  e125              B        |L1.950|
                  |L1.362|
00016a  e159              B        |L1.1056|
                  |L1.364|
00016c  e20d              B        |L1.1418|
                  |L1.366|
00016e  e1bd              B        |L1.1260|
                  |L1.368|
000170  e1f3              B        |L1.1370|
                  |L1.370|
000172  e1f9              B        |L1.1384|
                  |L1.372|
000174  0700              LSLS     r0,r0,#28             ;97
000176  49a4              LDR      r1,|L1.1032|
000178  0f00              LSRS     r0,r0,#28             ;97
00017a  8048              STRH     r0,[r1,#2]            ;97
00017c  210d              MOVS     r1,#0xd               ;99
00017e  4348              MULS     r0,r1,r0              ;99
000180  300a              ADDS     r0,r0,#0xa            ;99
000182  b2c0              UXTB     r0,r0                 ;99
000184  2600              MOVS     r6,#0                 ;105
000186  9004              STR      r0,[sp,#0x10]         ;105
000188  0880              LSRS     r0,r0,#2              ;105
00018a  9006              STR      r0,[sp,#0x18]         ;105
00018c  e029              B        |L1.482|
                  |L1.398|
00018e  9805              LDR      r0,[sp,#0x14]         ;106
000190  4639              MOV      r1,r7                 ;106
000192  4341              MULS     r1,r0,r1              ;106
000194  00b0              LSLS     r0,r6,#2              ;106
000196  1809              ADDS     r1,r1,r0              ;106
000198  468c              MOV      r12,r1                ;106
00019a  8869              LDRH     r1,[r5,#2]            ;107
00019c  1d02              ADDS     r2,r0,#4              ;107
00019e  188a              ADDS     r2,r1,r2              ;107
0001a0  05d2              LSLS     r2,r2,#23             ;107
0001a2  0dd2              LSRS     r2,r2,#23             ;107
0001a4  5ca3              LDRB     r3,[r4,r2]            ;107
0001a6  1d42              ADDS     r2,r0,#5              ;108
0001a8  188a              ADDS     r2,r1,r2              ;108
0001aa  05d2              LSLS     r2,r2,#23             ;108
0001ac  0dd2              LSRS     r2,r2,#23             ;108
0001ae  5ca2              LDRB     r2,[r4,r2]            ;108
0001b0  0212              LSLS     r2,r2,#8              ;108
0001b2  431a              ORRS     r2,r2,r3              ;108
0001b4  1d83              ADDS     r3,r0,#6              ;110
0001b6  e001              B        |L1.444|
                  |L1.440|
0001b8  e1ed              B        |L1.1430|
                  |L1.442|
0001ba  e1f7              B        |L1.1452|
                  |L1.444|
0001bc  18cb              ADDS     r3,r1,r3              ;110
0001be  1dc0              ADDS     r0,r0,#7              ;110
0001c0  1808              ADDS     r0,r1,r0              ;112
0001c2  05db              LSLS     r3,r3,#23             ;110
0001c4  05c0              LSLS     r0,r0,#23             ;112
0001c6  0ddb              LSRS     r3,r3,#23             ;110
0001c8  0dc0              LSRS     r0,r0,#23             ;112
0001ca  5ce3              LDRB     r3,[r4,r3]            ;110
0001cc  5c20              LDRB     r0,[r4,r0]            ;112
0001ce  041b              LSLS     r3,r3,#16             ;110
0001d0  0601              LSLS     r1,r0,#24             ;112
0001d2  4313              ORRS     r3,r3,r2              ;110
0001d4  4319              ORRS     r1,r1,r3              ;112
0001d6  4660              MOV      r0,r12                ;114
0001d8  f7fffffe          BL       app_eeprom_write_int
0001dc  1c76              ADDS     r6,r6,#1              ;114
0001de  9806              LDR      r0,[sp,#0x18]         ;105
0001e0  b2f6              UXTB     r6,r6                 ;105
                  |L1.482|
0001e2  42b0              CMP      r0,r6                 ;105
0001e4  d8d3              BHI      |L1.398|
0001e6  9804              LDR      r0,[sp,#0x10]         ;116
0001e8  0780              LSLS     r0,r0,#30             ;116
0001ea  d032              BEQ      |L1.594|
0001ec  9905              LDR      r1,[sp,#0x14]         ;117
0001ee  4638              MOV      r0,r7                 ;117
0001f0  4348              MULS     r0,r1,r0              ;117
0001f2  9904              LDR      r1,[sp,#0x10]         ;117
0001f4  9b04              LDR      r3,[sp,#0x10]         ;119
0001f6  088a              LSRS     r2,r1,#2              ;117
0001f8  0092              LSLS     r2,r2,#2              ;117
0001fa  1880              ADDS     r0,r0,r2              ;117
0001fc  2100              MOVS     r1,#0                 ;118
0001fe  4684              MOV      r12,r0                ;117
000200  079e              LSLS     r6,r3,#30             ;119
000202  4608              MOV      r0,r1                 ;119
000204  0fb6              LSRS     r6,r6,#30             ;119
000206  e01f              B        |L1.584|
                  |L1.520|
000208  2800              CMP      r0,#0                 ;120
00020a  d004              BEQ      |L1.534|
00020c  2801              CMP      r0,#1                 ;120
00020e  d009              BEQ      |L1.548|
000210  2802              CMP      r0,#2                 ;120
000212  d117              BNE      |L1.580|
000214  e00e              B        |L1.564|
                  |L1.534|
000216  886b              LDRH     r3,[r5,#2]            ;122
000218  1d11              ADDS     r1,r2,#4              ;122
00021a  1859              ADDS     r1,r3,r1              ;122
00021c  05c9              LSLS     r1,r1,#23             ;122
00021e  0dc9              LSRS     r1,r1,#23             ;122
000220  5c61              LDRB     r1,[r4,r1]            ;122
000222  e00f              B        |L1.580|
                  |L1.548|
000224  886b              LDRH     r3,[r5,#2]            ;126
000226  189b              ADDS     r3,r3,r2              ;126
000228  1d5b              ADDS     r3,r3,#5              ;126
00022a  05db              LSLS     r3,r3,#23             ;126
00022c  0ddb              LSRS     r3,r3,#23             ;126
00022e  5ce3              LDRB     r3,[r4,r3]            ;126
000230  021b              LSLS     r3,r3,#8              ;126
000232  e006              B        |L1.578|
                  |L1.564|
000234  886b              LDRH     r3,[r5,#2]            ;130
000236  189b              ADDS     r3,r3,r2              ;130
000238  1d9b              ADDS     r3,r3,#6              ;130
00023a  05db              LSLS     r3,r3,#23             ;130
00023c  0ddb              LSRS     r3,r3,#23             ;130
00023e  5ce3              LDRB     r3,[r4,r3]            ;130
000240  041b              LSLS     r3,r3,#16             ;130
                  |L1.578|
000242  4319              ORRS     r1,r1,r3              ;126
                  |L1.580|
000244  1c40              ADDS     r0,r0,#1              ;126
000246  b2c0              UXTB     r0,r0                 ;119
                  |L1.584|
000248  4286              CMP      r6,r0                 ;119
00024a  d8dd              BHI      |L1.520|
00024c  4660              MOV      r0,r12                ;135
00024e  f7fffffe          BL       app_eeprom_write_int
                  |L1.594|
000252  2600              MOVS     r6,#0                 ;139
000254  4d71              LDR      r5,|L1.1052|
000256  4634              MOV      r4,r6                 ;140
000258  702e              STRB     r6,[r5,#0]            ;139
00025a  e00b              B        |L1.628|
                  |L1.604|
00025c  9905              LDR      r1,[sp,#0x14]         ;141
00025e  4620              MOV      r0,r4                 ;141
000260  4348              MULS     r0,r1,r0              ;141
000262  f7fffffe          BL       app_eeprom_read_int
000266  1c40              ADDS     r0,r0,#1              ;142
000268  d007              BEQ      |L1.634|
00026a  7828              LDRB     r0,[r5,#0]            ;144  ; blink_number
00026c  1c40              ADDS     r0,r0,#1              ;144
00026e  1c64              ADDS     r4,r4,#1              ;144
000270  7028              STRB     r0,[r5,#0]            ;144
000272  b2e4              UXTB     r4,r4                 ;140
                  |L1.628|
000274  9807              LDR      r0,[sp,#0x1c]         ;140
000276  4284              CMP      r4,r0                 ;140
000278  d3f0              BCC      |L1.604|
                  |L1.634|
00027a  f7fffffe          BL       FMC_Close
00027e  4866              LDR      r0,|L1.1048|
000280  6006              STR      r6,[r0,#0]            ;151
000282  4864              LDR      r0,|L1.1044|
000284  6802              LDR      r2,[r0,#0]            ;153
000286  2108              MOVS     r1,#8                 ;153
000288  438a              BICS     r2,r2,r1              ;153
00028a  6002              STR      r2,[r0,#0]            ;153
00028c  485e              LDR      r0,|L1.1032|
00028e  2201              MOVS     r2,#1                 ;156
000290  7047              STRB     r7,[r0,#1]            ;155
000292  1c41              ADDS     r1,r0,#1              ;156
000294  2012              MOVS     r0,#0x12              ;156
000296  e72f              B        |L1.248|
                  |L1.664|
000298  8869              LDRH     r1,[r5,#2]            ;164
00029a  1d37              ADDS     r7,r6,#4              ;164
00029c  19c9              ADDS     r1,r1,r7              ;164
00029e  05c9              LSLS     r1,r1,#23             ;164
0002a0  0dc9              LSRS     r1,r1,#23             ;164
0002a2  5c61              LDRB     r1,[r4,r1]            ;164
0002a4  5419              STRB     r1,[r3,r0]            ;164
0002a6  1c40              ADDS     r0,r0,#1              ;164
0002a8  1c76              ADDS     r6,r6,#1              ;164
0002aa  b2c0              UXTB     r0,r0                 ;164
0002ac  b2f6              UXTB     r6,r6                 ;163
                  |L1.686|
0002ae  4296              CMP      r6,r2                 ;163
0002b0  dbf2              BLT      |L1.664|
0002b2  2100              MOVS     r1,#0                 ;167
0002b4  e006              B        |L1.708|
                  |L1.694|
0002b6  185c              ADDS     r4,r3,r1              ;168
0002b8  5c1a              LDRB     r2,[r3,r0]            ;168
0002ba  7864              LDRB     r4,[r4,#1]            ;168
0002bc  1912              ADDS     r2,r2,r4              ;168
0002be  1c49              ADDS     r1,r1,#1              ;168
0002c0  541a              STRB     r2,[r3,r0]            ;168
0002c2  b2c9              UXTB     r1,r1                 ;167
                  |L1.708|
0002c4  785a              LDRB     r2,[r3,#1]            ;167
0002c6  1c52              ADDS     r2,r2,#1              ;167
0002c8  428a              CMP      r2,r1                 ;167
0002ca  d8f4              BHI      |L1.694|
                  |L1.716|
0002cc  1c40              ADDS     r0,r0,#1              ;167
0002ce  b2c1              UXTB     r1,r0                 ;170
0002d0  4618              MOV      r0,r3                 ;171
0002d2  e13f              B        |L1.1364|
                  |L1.724|
0002d4  20f8              MOVS     r0,#0xf8              ;174
0002d6  466b              MOV      r3,sp                 ;174
0002d8  7018              STRB     r0,[r3,#0]            ;174
0002da  705f              STRB     r7,[r3,#1]            ;175
0002dc  2031              MOVS     r0,#0x31              ;176
0002de  7098              STRB     r0,[r3,#2]            ;176
0002e0  2003              MOVS     r0,#3                 ;176
0002e2  e00a              B        |L1.762|
                  |L1.740|
0002e4  8869              LDRH     r1,[r5,#2]            ;178
0002e6  1d37              ADDS     r7,r6,#4              ;178
0002e8  19c9              ADDS     r1,r1,r7              ;178
0002ea  05c9              LSLS     r1,r1,#23             ;178
0002ec  0dc9              LSRS     r1,r1,#23             ;178
0002ee  5c61              LDRB     r1,[r4,r1]            ;178
0002f0  5419              STRB     r1,[r3,r0]            ;178
0002f2  1c40              ADDS     r0,r0,#1              ;178
0002f4  1c76              ADDS     r6,r6,#1              ;178
0002f6  b2c0              UXTB     r0,r0                 ;178
0002f8  b2f6              UXTB     r6,r6                 ;177
                  |L1.762|
0002fa  4296              CMP      r6,r2                 ;177
0002fc  dbf2              BLT      |L1.740|
0002fe  2100              MOVS     r1,#0                 ;181
000300  e006              B        |L1.784|
                  |L1.770|
000302  185c              ADDS     r4,r3,r1              ;182
000304  5c1a              LDRB     r2,[r3,r0]            ;182
000306  7864              LDRB     r4,[r4,#1]            ;182
000308  1912              ADDS     r2,r2,r4              ;182
00030a  1c49              ADDS     r1,r1,#1              ;182
00030c  541a              STRB     r2,[r3,r0]            ;182
00030e  b2c9              UXTB     r1,r1                 ;181
                  |L1.784|
000310  785a              LDRB     r2,[r3,#1]            ;181
000312  1c52              ADDS     r2,r2,#1              ;181
000314  428a              CMP      r2,r1                 ;181
000316  d8f4              BHI      |L1.770|
000318  e7d8              B        |L1.716|
                  |L1.794|
00031a  483c              LDR      r0,|L1.1036|
00031c  2301              MOVS     r3,#1                 ;204
00031e  7003              STRB     r3,[r0,#0]            ;204
000320  07c8              LSLS     r0,r1,#31             ;205
000322  d000              BEQ      |L1.806|
                  |L1.804|
000324  e6c5              B        |L1.178|
                  |L1.806|
000326  20f8              MOVS     r0,#0xf8              ;208
000328  466b              MOV      r3,sp                 ;208
00032a  7018              STRB     r0,[r3,#0]            ;208
00032c  705f              STRB     r7,[r3,#1]            ;209
00032e  2033              MOVS     r0,#0x33              ;210
000330  7098              STRB     r0,[r3,#2]            ;210
000332  2003              MOVS     r0,#3                 ;210
000334  e00a              B        |L1.844|
                  |L1.822|
000336  8869              LDRH     r1,[r5,#2]            ;212
000338  1d37              ADDS     r7,r6,#4              ;212
00033a  19c9              ADDS     r1,r1,r7              ;212
00033c  05c9              LSLS     r1,r1,#23             ;212
00033e  0dc9              LSRS     r1,r1,#23             ;212
000340  5c61              LDRB     r1,[r4,r1]            ;212
000342  5419              STRB     r1,[r3,r0]            ;212
000344  1c40              ADDS     r0,r0,#1              ;212
000346  1c76              ADDS     r6,r6,#1              ;212
000348  b2c0              UXTB     r0,r0                 ;212
00034a  b2f6              UXTB     r6,r6                 ;211
                  |L1.844|
00034c  4296              CMP      r6,r2                 ;211
00034e  dbf2              BLT      |L1.822|
000350  2100              MOVS     r1,#0                 ;215
000352  e006              B        |L1.866|
                  |L1.852|
000354  185c              ADDS     r4,r3,r1              ;216
000356  5c1a              LDRB     r2,[r3,r0]            ;216
000358  7864              LDRB     r4,[r4,#1]            ;216
00035a  1912              ADDS     r2,r2,r4              ;216
00035c  1c49              ADDS     r1,r1,#1              ;216
00035e  541a              STRB     r2,[r3,r0]            ;216
000360  b2c9              UXTB     r1,r1                 ;215
                  |L1.866|
000362  785a              LDRB     r2,[r3,#1]            ;215
000364  1c52              ADDS     r2,r2,#1              ;215
000366  428a              CMP      r2,r1                 ;215
000368  d8f4              BHI      |L1.852|
00036a  e7af              B        |L1.716|
                  |L1.876|
00036c  07c8              LSLS     r0,r1,#31             ;222
                  |L1.878|
00036e  d1d9              BNE      |L1.804|
000370  20f8              MOVS     r0,#0xf8              ;225
000372  466b              MOV      r3,sp                 ;225
000374  7018              STRB     r0,[r3,#0]            ;225
000376  705f              STRB     r7,[r3,#1]            ;226
000378  2035              MOVS     r0,#0x35              ;227
00037a  7098              STRB     r0,[r3,#2]            ;227
00037c  2003              MOVS     r0,#3                 ;227
00037e  e00a              B        |L1.918|
                  |L1.896|
000380  8869              LDRH     r1,[r5,#2]            ;229
000382  1d37              ADDS     r7,r6,#4              ;229
000384  19c9              ADDS     r1,r1,r7              ;229
000386  05c9              LSLS     r1,r1,#23             ;229
000388  0dc9              LSRS     r1,r1,#23             ;229
00038a  5c61              LDRB     r1,[r4,r1]            ;229
00038c  5419              STRB     r1,[r3,r0]            ;229
00038e  1c40              ADDS     r0,r0,#1              ;229
000390  1c76              ADDS     r6,r6,#1              ;229
000392  b2c0              UXTB     r0,r0                 ;229
000394  b2f6              UXTB     r6,r6                 ;228
                  |L1.918|
000396  4296              CMP      r6,r2                 ;228
000398  dbf2              BLT      |L1.896|
00039a  2100              MOVS     r1,#0                 ;232
00039c  e006              B        |L1.940|
                  |L1.926|
00039e  185c              ADDS     r4,r3,r1              ;233
0003a0  5c1a              LDRB     r2,[r3,r0]            ;233
0003a2  7864              LDRB     r4,[r4,#1]            ;233
0003a4  1912              ADDS     r2,r2,r4              ;233
0003a6  1c49              ADDS     r1,r1,#1              ;233
0003a8  541a              STRB     r2,[r3,r0]            ;233
0003aa  b2c9              UXTB     r1,r1                 ;232
                  |L1.940|
0003ac  785a              LDRB     r2,[r3,#1]            ;232
0003ae  1c52              ADDS     r2,r2,#1              ;232
0003b0  428a              CMP      r2,r1                 ;232
0003b2  d8f4              BHI      |L1.926|
0003b4  e78a              B        |L1.716|
                  |L1.950|
0003b6  4b15              LDR      r3,|L1.1036|
0003b8  2003              MOVS     r0,#3                 ;239
0003ba  7018              STRB     r0,[r3,#0]            ;239
0003bc  07c8              LSLS     r0,r1,#31             ;240
0003be  d1b1              BNE      |L1.804|
0003c0  21f8              MOVS     r1,#0xf8              ;243
0003c2  466b              MOV      r3,sp                 ;243
0003c4  7019              STRB     r1,[r3,#0]            ;243
0003c6  2136              MOVS     r1,#0x36              ;245
0003c8  705f              STRB     r7,[r3,#1]            ;244
0003ca  7099              STRB     r1,[r3,#2]            ;245
0003cc  2003              MOVS     r0,#3                 ;245
0003ce  e00a              B        |L1.998|
                  |L1.976|
0003d0  8869              LDRH     r1,[r5,#2]            ;247
0003d2  1d37              ADDS     r7,r6,#4              ;247
0003d4  19c9              ADDS     r1,r1,r7              ;247
0003d6  05c9              LSLS     r1,r1,#23             ;247
0003d8  0dc9              LSRS     r1,r1,#23             ;247
0003da  5c61              LDRB     r1,[r4,r1]            ;247
0003dc  5419              STRB     r1,[r3,r0]            ;247
0003de  1c40              ADDS     r0,r0,#1              ;247
0003e0  1c76              ADDS     r6,r6,#1              ;247
0003e2  b2c0              UXTB     r0,r0                 ;247
0003e4  b2f6              UXTB     r6,r6                 ;246
                  |L1.998|
0003e6  4296              CMP      r6,r2                 ;246
0003e8  dbf2              BLT      |L1.976|
0003ea  2100              MOVS     r1,#0                 ;250
0003ec  e006              B        |L1.1020|
                  |L1.1006|
0003ee  185c              ADDS     r4,r3,r1              ;251
0003f0  5c1a              LDRB     r2,[r3,r0]            ;251
0003f2  7864              LDRB     r4,[r4,#1]            ;251
0003f4  1912              ADDS     r2,r2,r4              ;251
0003f6  1c49              ADDS     r1,r1,#1              ;251
0003f8  541a              STRB     r2,[r3,r0]            ;251
0003fa  b2c9              UXTB     r1,r1                 ;250
                  |L1.1020|
0003fc  785a              LDRB     r2,[r3,#1]            ;250
0003fe  1c52              ADDS     r2,r2,#1              ;250
000400  428a              CMP      r2,r1                 ;250
000402  d8f4              BHI      |L1.1006|
000404  e762              B        |L1.716|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      ||.data||
                  |L1.1036|
                          DCD      g_tWork
                  |L1.1040|
                          DCD      dome_running_param
                  |L1.1044|
                          DCD      0x5000c000
                  |L1.1048|
                          DCD      0x50000100
                  |L1.1052|
                          DCD      blink_number
                  |L1.1056|
000420  4b68              LDR      r3,|L1.1476|
000422  2002              MOVS     r0,#2                 ;257
000424  7018              STRB     r0,[r3,#0]            ;257
000426  07c8              LSLS     r0,r1,#31             ;258
000428  d1a1              BNE      |L1.878|
00042a  20f8              MOVS     r0,#0xf8              ;261
00042c  466b              MOV      r3,sp                 ;261
00042e  7018              STRB     r0,[r3,#0]            ;261
000430  705f              STRB     r7,[r3,#1]            ;262
000432  2037              MOVS     r0,#0x37              ;263
000434  7098              STRB     r0,[r3,#2]            ;263
000436  2003              MOVS     r0,#3                 ;263
000438  e00a              B        |L1.1104|
                  |L1.1082|
00043a  8869              LDRH     r1,[r5,#2]            ;265
00043c  1d37              ADDS     r7,r6,#4              ;265
00043e  19c9              ADDS     r1,r1,r7              ;265
000440  05c9              LSLS     r1,r1,#23             ;265
000442  0dc9              LSRS     r1,r1,#23             ;265
000444  5c61              LDRB     r1,[r4,r1]            ;265
000446  5419              STRB     r1,[r3,r0]            ;265
000448  1c40              ADDS     r0,r0,#1              ;265
00044a  1c76              ADDS     r6,r6,#1              ;265
00044c  b2c0              UXTB     r0,r0                 ;265
00044e  b2f6              UXTB     r6,r6                 ;264
                  |L1.1104|
000450  4296              CMP      r6,r2                 ;264
000452  dbf2              BLT      |L1.1082|
000454  2100              MOVS     r1,#0                 ;268
000456  e006              B        |L1.1126|
                  |L1.1112|
000458  185c              ADDS     r4,r3,r1              ;269
00045a  5c1a              LDRB     r2,[r3,r0]            ;269
00045c  7864              LDRB     r4,[r4,#1]            ;269
00045e  1912              ADDS     r2,r2,r4              ;269
000460  1c49              ADDS     r1,r1,#1              ;269
000462  541a              STRB     r2,[r3,r0]            ;269
000464  b2c9              UXTB     r1,r1                 ;268
                  |L1.1126|
000466  785a              LDRB     r2,[r3,#1]            ;268
000468  1c52              ADDS     r2,r2,#1              ;268
00046a  428a              CMP      r2,r1                 ;268
00046c  d8f4              BHI      |L1.1112|
00046e  e72d              B        |L1.716|
                  |L1.1136|
000470  20f8              MOVS     r0,#0xf8              ;275
000472  466b              MOV      r3,sp                 ;275
000474  7018              STRB     r0,[r3,#0]            ;275
000476  705f              STRB     r7,[r3,#1]            ;276
000478  2041              MOVS     r0,#0x41              ;277
00047a  7098              STRB     r0,[r3,#2]            ;277
00047c  2003              MOVS     r0,#3                 ;277
00047e  e00a              B        |L1.1174|
                  |L1.1152|
000480  8869              LDRH     r1,[r5,#2]            ;279
000482  1d37              ADDS     r7,r6,#4              ;279
000484  19c9              ADDS     r1,r1,r7              ;279
000486  05c9              LSLS     r1,r1,#23             ;279
000488  0dc9              LSRS     r1,r1,#23             ;279
00048a  5c61              LDRB     r1,[r4,r1]            ;279
00048c  5419              STRB     r1,[r3,r0]            ;279
00048e  1c40              ADDS     r0,r0,#1              ;279
000490  1c76              ADDS     r6,r6,#1              ;279
000492  b2c0              UXTB     r0,r0                 ;279
000494  b2f6              UXTB     r6,r6                 ;278
                  |L1.1174|
000496  4296              CMP      r6,r2                 ;278
000498  dbf2              BLT      |L1.1152|
00049a  2100              MOVS     r1,#0                 ;282
00049c  e006              B        |L1.1196|
                  |L1.1182|
00049e  185c              ADDS     r4,r3,r1              ;283
0004a0  5c1a              LDRB     r2,[r3,r0]            ;283
0004a2  7864              LDRB     r4,[r4,#1]            ;283
0004a4  1912              ADDS     r2,r2,r4              ;283
0004a6  1c49              ADDS     r1,r1,#1              ;283
0004a8  541a              STRB     r2,[r3,r0]            ;283
0004aa  b2c9              UXTB     r1,r1                 ;282
                  |L1.1196|
0004ac  785a              LDRB     r2,[r3,#1]            ;282
0004ae  1c52              ADDS     r2,r2,#1              ;282
0004b0  428a              CMP      r2,r1                 ;282
0004b2  d8f4              BHI      |L1.1182|
0004b4  e70a              B        |L1.716|
                  |L1.1206|
0004b6  8869              LDRH     r1,[r5,#2]            ;297
0004b8  1d37              ADDS     r7,r6,#4              ;297
0004ba  19c9              ADDS     r1,r1,r7              ;297
0004bc  05c9              LSLS     r1,r1,#23             ;297
0004be  0dc9              LSRS     r1,r1,#23             ;297
0004c0  5c61              LDRB     r1,[r4,r1]            ;297
0004c2  5419              STRB     r1,[r3,r0]            ;297
0004c4  1c40              ADDS     r0,r0,#1              ;297
0004c6  1c76              ADDS     r6,r6,#1              ;297
0004c8  b2c0              UXTB     r0,r0                 ;297
0004ca  b2f6              UXTB     r6,r6                 ;296
                  |L1.1228|
0004cc  4296              CMP      r6,r2                 ;296
0004ce  dbf2              BLT      |L1.1206|
0004d0  2100              MOVS     r1,#0                 ;300
0004d2  e006              B        |L1.1250|
                  |L1.1236|
0004d4  185c              ADDS     r4,r3,r1              ;301
0004d6  5c1a              LDRB     r2,[r3,r0]            ;301
0004d8  7864              LDRB     r4,[r4,#1]            ;301
0004da  1912              ADDS     r2,r2,r4              ;301
0004dc  1c49              ADDS     r1,r1,#1              ;301
0004de  541a              STRB     r2,[r3,r0]            ;301
0004e0  b2c9              UXTB     r1,r1                 ;300
                  |L1.1250|
0004e2  785a              LDRB     r2,[r3,#1]            ;300
0004e4  1c52              ADDS     r2,r2,#1              ;300
0004e6  428a              CMP      r2,r1                 ;300
0004e8  d8f4              BHI      |L1.1236|
0004ea  e6ef              B        |L1.716|
                  |L1.1260|
0004ec  4c35              LDR      r4,|L1.1476|
0004ee  0708              LSLS     r0,r1,#28             ;317
0004f0  d406              BMI      |L1.1280|
0004f2  2008              MOVS     r0,#8                 ;319
0004f4  4301              ORRS     r1,r1,r0              ;319
0004f6  4311              ORRS     r1,r1,r2              ;320
0004f8  6061              STR      r1,[r4,#4]            ;321  ; g_tWork
0004fa  f7fffffe          BL       app_dome_start_current
0004fe  e005              B        |L1.1292|
                  |L1.1280|
000500  2008              MOVS     r0,#8                 ;324
000502  4381              BICS     r1,r1,r0              ;324
000504  4391              BICS     r1,r1,r2              ;325
000506  6061              STR      r1,[r4,#4]            ;326  ; g_tWork
000508  f7fffffe          BL       app_dome_stop_current
                  |L1.1292|
00050c  6861              LDR      r1,[r4,#4]            ;328  ; g_tWork
00050e  07c8              LSLS     r0,r1,#31             ;328
000510  d100              BNE      |L1.1300|
                  |L1.1298|
000512  e5ce              B        |L1.178|
                  |L1.1300|
000514  466c              MOV      r4,sp                 ;331
000516  20f8              MOVS     r0,#0xf8              ;331
000518  7020              STRB     r0,[r4,#0]            ;331
00051a  220a              MOVS     r2,#0xa               ;332
00051c  2001              MOVS     r0,#1                 ;331
00051e  7062              STRB     r2,[r4,#1]            ;332
000520  4623              MOV      r3,r4                 ;331
000522  70a0              STRB     r0,[r4,#2]            ;333
000524  0709              LSLS     r1,r1,#28             ;334
000526  d500              BPL      |L1.1322|
000528  2000              MOVS     r0,#0                 ;335
                  |L1.1322|
00052a  70d8              STRB     r0,[r3,#3]            ;337
00052c  1d20              ADDS     r0,r4,#4              ;340
00052e  2108              MOVS     r1,#8                 ;340
000530  f7fffffe          BL       app_dome_get_current_Name
000534  210c              MOVS     r1,#0xc               ;341
000536  e006              B        |L1.1350|
                  |L1.1336|
000538  19a2              ADDS     r2,r4,r6              ;343
00053a  5c60              LDRB     r0,[r4,r1]            ;343
00053c  7852              LDRB     r2,[r2,#1]            ;343
00053e  1880              ADDS     r0,r0,r2              ;343
000540  1c76              ADDS     r6,r6,#1              ;343
000542  5460              STRB     r0,[r4,r1]            ;343
000544  b2f6              UXTB     r6,r6                 ;342
                  |L1.1350|
000546  4668              MOV      r0,sp                 ;342
000548  7840              LDRB     r0,[r0,#1]            ;342
00054a  1c40              ADDS     r0,r0,#1              ;342
00054c  42b0              CMP      r0,r6                 ;342
00054e  d8f3              BHI      |L1.1336|
000550  4668              MOV      r0,sp                 ;346
000552  1c49              ADDS     r1,r1,#1              ;346
                  |L1.1364|
000554  f7fffffe          BL       app_2d4_send
000558  e5ab              B        |L1.178|
                  |L1.1370|
00055a  4311              ORRS     r1,r1,r2              ;349
00055c  4819              LDR      r0,|L1.1476|
00055e  2208              MOVS     r2,#8                 ;350
000560  4311              ORRS     r1,r1,r2              ;350
000562  6041              STR      r1,[r0,#4]            ;351  ; g_tWork
000564  2001              MOVS     r0,#1                 ;351
000566  e01e              B        |L1.1446|
                  |L1.1384|
000568  4816              LDR      r0,|L1.1476|
00056a  6045              STR      r5,[r0,#4]            ;357  ; g_tWork
00056c  1d98              ADDS     r0,r3,#6              ;357
00056e  05c0              LSLS     r0,r0,#23             ;357
000570  0dc0              LSRS     r0,r0,#23             ;357
000572  5c22              LDRB     r2,[r4,r0]            ;357
000574  1d58              ADDS     r0,r3,#5              ;357
000576  05c0              LSLS     r0,r0,#23             ;357
000578  0dc0              LSRS     r0,r0,#23             ;357
00057a  5c21              LDRB     r1,[r4,r0]            ;357
00057c  1d1b              ADDS     r3,r3,#4              ;357
00057e  05d8              LSLS     r0,r3,#23             ;357
000580  0dc0              LSRS     r0,r0,#23             ;357
000582  5c20              LDRB     r0,[r4,r0]            ;357
000584  f7fffffe          BL       app_dome_rgb
000588  e593              B        |L1.178|
                  |L1.1418|
00058a  1d1b              ADDS     r3,r3,#4
00058c  05d8              LSLS     r0,r3,#23             ;370
00058e  0dc0              LSRS     r0,r0,#23             ;370
000590  5c20              LDRB     r0,[r4,r0]            ;370
000592  7078              STRB     r0,[r7,#1]            ;370
000594  e58d              B        |L1.178|
                  |L1.1430|
000596  2008              MOVS     r0,#8                 ;375
000598  4305              ORRS     r5,r5,r0              ;375
00059a  490a              LDR      r1,|L1.1476|
00059c  1d1b              ADDS     r3,r3,#4              ;375
00059e  05d8              LSLS     r0,r3,#23             ;377
0005a0  0dc0              LSRS     r0,r0,#23             ;377
0005a2  604d              STR      r5,[r1,#4]            ;377  ; g_tWork
0005a4  5c20              LDRB     r0,[r4,r0]            ;377
                  |L1.1446|
0005a6  f7fffffe          BL       app_dome_start
0005aa  e582              B        |L1.178|
                  |L1.1452|
0005ac  1d1b              ADDS     r3,r3,#4
0005ae  05d8              LSLS     r0,r3,#23             ;381
0005b0  0dc0              LSRS     r0,r0,#23             ;381
0005b2  5c20              LDRB     r0,[r4,r0]            ;381
0005b4  0901              LSRS     r1,r0,#4              ;382
0005b6  d1ac              BNE      |L1.1298|
0005b8  0700              LSLS     r0,r0,#28             ;383
0005ba  0f00              LSRS     r0,r0,#28             ;383
0005bc  f7fffffe          BL       Relay_set
0005c0  e577              B        |L1.178|
;;;393    
                          ENDP

0005c2  0000              DCW      0x0000
                  |L1.1476|
                          DCD      g_tWork

                          AREA ||i.app_uart_Init||, CODE, READONLY, ALIGN=2

                  app_uart_Init PROC
;;;27     
;;;28     void app_uart_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;29     
;;;30     	memset((uint8_t *) &uart_st, 0, sizeof(Uart_ST));
000002  21c1              MOVS     r1,#0xc1
000004  0089              LSLS     r1,r1,#2
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       __aeabi_memclr
;;;31     }
00000c  bd10              POP      {r4,pc}
;;;32     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.app_uart_pro||, CODE, READONLY, ALIGN=2

                  app_uart_pro PROC
;;;393    
;;;394    void app_uart_pro(uint8_t mc) {
000000  b5f1              PUSH     {r0,r4-r7,lr}
000002  b082              SUB      sp,sp,#8
;;;395    	uint8_t ucData = 0;
000004  2000              MOVS     r0,#0
000006  4669              MOV      r1,sp
000008  7008              STRB     r0,[r1,#0]
;;;396    
;;;397    #if 1
;;;398    	while (1) {
;;;399    
;;;400    		if (comGetChar(COM1, &ucData)) {
;;;401    #if 0
;;;402    //			comSendChar(COM0, ucData);
;;;403    //			log_debug("rcv %02X", ucData);
;;;404    #endif
;;;405    
;;;406    			if (mc == 0) {
;;;407    				return;
;;;408    			}
;;;409    
;;;410    			uart_st.rxBuf[uart_st.pWrite++] = ucData;
00000a  4d2f              LDR      r5,|L3.200|
00000c  2003              MOVS     r0,#3
;;;411    			if (uart_st.pWrite >= sizeof(uart_st.rxBuf)) {
;;;412    				uart_st.pWrite = 0;
;;;413    			}
;;;414    
;;;415    			/*
;;;416    			 (0x55,0xAA)...0x00......0x00...0x00,0x00...0x00
;;;417    			 Head..........Length....cmd....Data........crc8()
;;;418    			 */
;;;419    			if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
;;;420    					% sizeof(uart_st.rxBuf) > 5) {
;;;421    				if (((uart_st.rxBuf[uart_st.pRead]) == 0x55)
;;;422    						&& ((uart_st.rxBuf[(uart_st.pRead + 1)
;;;423    								% sizeof(uart_st.rxBuf)]) == 0xAA)) {
;;;424    					len = uart_st.rxBuf[(uart_st.pRead + 2)
00000e  4e2f              LDR      r6,|L3.204|
000010  0200              LSLS     r0,r0,#8              ;410
000012  182c              ADDS     r4,r5,r0              ;410
                  |L3.20|
000014  4669              MOV      r1,sp                 ;400
000016  2001              MOVS     r0,#1                 ;400
000018  f7fffffe          BL       comGetChar
00001c  2800              CMP      r0,#0                 ;400
00001e  d051              BEQ      |L3.196|
000020  9802              LDR      r0,[sp,#8]            ;406
000022  2800              CMP      r0,#0                 ;406
000024  d04e              BEQ      |L3.196|
000026  4668              MOV      r0,sp                 ;410
000028  8821              LDRH     r1,[r4,#0]            ;410  ; uart_st
00002a  7800              LDRB     r0,[r0,#0]            ;410
00002c  5468              STRB     r0,[r5,r1]            ;410
00002e  8820              LDRH     r0,[r4,#0]            ;410  ; uart_st
000030  2301              MOVS     r3,#1                 ;411
000032  1c40              ADDS     r0,r0,#1              ;410
000034  b280              UXTH     r0,r0                 ;410
000036  025b              LSLS     r3,r3,#9              ;411
000038  8020              STRH     r0,[r4,#0]            ;410
00003a  4298              CMP      r0,r3                 ;411
00003c  d301              BCC      |L3.66|
00003e  2000              MOVS     r0,#0                 ;412
000040  8020              STRH     r0,[r4,#0]            ;412
                  |L3.66|
000042  8862              LDRH     r2,[r4,#2]            ;419  ; uart_st
000044  b280              UXTH     r0,r0                 ;419
000046  1a80              SUBS     r0,r0,r2              ;419
000048  05c0              LSLS     r0,r0,#23             ;419
00004a  0dc0              LSRS     r0,r0,#23             ;419
00004c  2805              CMP      r0,#5                 ;419
00004e  d9e1              BLS      |L3.20|
000050  5ca9              LDRB     r1,[r5,r2]            ;421
000052  2955              CMP      r1,#0x55              ;421
000054  d105              BNE      |L3.98|
000056  1c51              ADDS     r1,r2,#1              ;422
000058  05c9              LSLS     r1,r1,#23             ;422
00005a  0dc9              LSRS     r1,r1,#23             ;422
00005c  5c69              LDRB     r1,[r5,r1]            ;422
00005e  29aa              CMP      r1,#0xaa              ;422
000060  d006              BEQ      |L3.112|
                  |L3.98|
000062  1c52              ADDS     r2,r2,#1              ;422
;;;425    							% sizeof(uart_st.rxBuf)];
;;;426    					if ((uart_st.pWrite + sizeof(uart_st.rxBuf) - uart_st.pRead)
;;;427    							% sizeof(uart_st.rxBuf) >= (len + 4)) {
;;;428    						if (uart_st.rxBuf[(uart_st.pRead + len + 3)
;;;429    								% sizeof(uart_st.rxBuf)]
;;;430    								!= app_CalcCRC8_cycle(
;;;431    										uart_st.rxBuf + uart_st.pRead, len + 3,
;;;432    										uart_st.pRead, sizeof(uart_st.rxBuf))) {
;;;433    							uart_st.pRead++;
;;;434    							log_err(
;;;435    									"[ERROR]   remote control check error!\r\n");
;;;436    						} else {
;;;437    							/* your code */
;;;438    							app_RC_Receiver_cmd_pro(&uart_st);
;;;439    							uart_st.pRead += len + 4;
;;;440    							uart_st.pRead = uart_st.pRead
;;;441    									% sizeof(uart_st.rxBuf);
;;;442    						}
;;;443    					}
;;;444    				} else {
;;;445    					uart_st.pRead++;
000064  8062              STRH     r2,[r4,#2]
                  |L3.102|
;;;446    				}
;;;447    				uart_st.pRead = uart_st.pRead % sizeof(uart_st.rxBuf);
000066  8860              LDRH     r0,[r4,#2]  ; uart_st
000068  05c0              LSLS     r0,r0,#23
00006a  0dc0              LSRS     r0,r0,#23
00006c  8060              STRH     r0,[r4,#2]
00006e  e7d1              B        |L3.20|
                  |L3.112|
000070  1c91              ADDS     r1,r2,#2              ;424
000072  05c9              LSLS     r1,r1,#23             ;424
000074  0dc9              LSRS     r1,r1,#23             ;424
000076  5c69              LDRB     r1,[r5,r1]            ;424
000078  7031              STRB     r1,[r6,#0]            ;424
00007a  1d0f              ADDS     r7,r1,#4              ;426
00007c  42b8              CMP      r0,r7                 ;426
00007e  d3f2              BCC      |L3.102|
000080  1950              ADDS     r0,r2,r5              ;428
000082  1cc9              ADDS     r1,r1,#3              ;428
000084  f7fffffe          BL       app_CalcCRC8_cycle
000088  7832              LDRB     r2,[r6,#0]            ;428  ; len
00008a  8861              LDRH     r1,[r4,#2]            ;428  ; uart_st
00008c  1cd2              ADDS     r2,r2,#3              ;428
00008e  188a              ADDS     r2,r1,r2              ;428
000090  05d2              LSLS     r2,r2,#23             ;428
000092  0dd2              LSRS     r2,r2,#23             ;428
000094  5caa              LDRB     r2,[r5,r2]            ;428
000096  4290              CMP      r0,r2                 ;428
000098  d009              BEQ      |L3.174|
00009a  1c49              ADDS     r1,r1,#1              ;428
00009c  8061              STRH     r1,[r4,#2]            ;433
00009e  21ff              MOVS     r1,#0xff              ;434
0000a0  a30b              ADR      r3,|L3.208|
0000a2  2202              MOVS     r2,#2                 ;434
0000a4  31b3              ADDS     r1,r1,#0xb3           ;434
0000a6  4814              LDR      r0,|L3.248|
0000a8  f7fffffe          BL       LITE_syslog
0000ac  e7db              B        |L3.102|
                  |L3.174|
0000ae  4806              LDR      r0,|L3.200|
0000b0  f7fffffe          BL       app_RC_Receiver_cmd_pro
0000b4  7830              LDRB     r0,[r6,#0]            ;439  ; len
0000b6  8861              LDRH     r1,[r4,#2]            ;439  ; uart_st
0000b8  1d00              ADDS     r0,r0,#4              ;439
0000ba  1808              ADDS     r0,r1,r0              ;439
0000bc  05c0              LSLS     r0,r0,#23             ;440
0000be  0dc0              LSRS     r0,r0,#23             ;440
0000c0  8060              STRH     r0,[r4,#2]            ;440
0000c2  e7d0              B        |L3.102|
                  |L3.196|
;;;448    			}
;;;449    			continue;
;;;450    		}
;;;451    		break;
;;;452    
;;;453    	}
;;;454    #else
;;;455    	while (riflag) {
;;;456    		riflag--;
;;;457    		if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE >= 4) {
;;;458    			if (((st.rxBuf[st.pRead]) == 0x55)
;;;459    					&& ((st.rxBuf[(st.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
;;;460    				len = st.rxBuf[(st.pRead + 2) % RCV_BUFSIZE];
;;;461    				if ((st.pWrite + RCV_BUFSIZE - st.pRead) % RCV_BUFSIZE
;;;462    						>= (len + 4)) {
;;;463    					if (st.rxBuf[(st.pRead + len + 3) % RCV_BUFSIZE]
;;;464    							!= app_CalcCRC8_cycle(st.rxBuf + st.pRead,
;;;465    									len + 3, st.pRead, RCV_BUFSIZE)) {
;;;466    						st.pRead++;
;;;467    					} else {
;;;468    						uint8_t index = 0;
;;;469    						memset(sendBuf, 0, PAYLOAD_WIDTH);
;;;470    						switch (st.rxBuf[(st.pRead + 3) % RCV_BUFSIZE]) {
;;;471    							case BLINK_METHOD_CMD:  //闪法
;;;472    							{
;;;473    								uint8_t i = 0;
;;;474    								uint16_t index = 0;
;;;475    								index =
;;;476    								st.rxBuf[(st.pRead + 12) % RCV_BUFSIZE];
;;;477    
;;;478    								if (index
;;;479    										>= ((FMC_APROM_END - DOME_START_ADDR)
;;;480    												/ sizeof(DOME_DEFAULT_T) - 1)) {
;;;481    									break;
;;;482    								}
;;;483    								FMC_ENABLE_AP_UPDATE();
;;;484    								SYS_UnlockReg();
;;;485    								FMC_Open();
;;;486    
;;;487    								if (index == 0) {
;;;488    									u8_tmp = (FMC_APROM_END - DOME_START_ADDR)
;;;489    									/ FMC_FLASH_PAGE_SIZE;
;;;490    									for (i = 0; i < u8_tmp; i++) {
;;;491    										app_eeprom_erase(i * FMC_FLASH_PAGE_SIZE);
;;;492    									}
;;;493    								}
;;;494    #if 0
;;;495    								for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
;;;496    									uint16_t addr = i * sizeof(DOME_DEFAULT_T)
;;;497    									+ (&dome_blink.header.index
;;;498    											- &dome_blink);
;;;499    									app_eeprom_write_byte(addr, 0);
;;;500    									nop
;;;501    								}
;;;502    #endif
;;;503    #if 1
;;;504    								tmp = st.rxBuf[(st.pRead + 13) % RCV_BUFSIZE]
;;;505    								& 0x0F;  //sub mode number
;;;506    
;;;507    								uint8_t n = (tmp * sizeof(SUBDOME_T)
;;;508    										+ sizeof(DOME_HEADER_T));
;;;509    								uint8_t minSpaceBytes = sizeof(DOME_DEFAULT_T);
;;;510    								if (minSpaceBytes % 4) {
;;;511    									minSpaceBytes++;
;;;512    								}
;;;513    
;;;514    								for (i = 0; i < (n / 4); i++) {
;;;515    									uint32_t addr = index * minSpaceBytes + i * 4;
;;;516    									uint32_t dt = st.rxBuf[(st.pRead + 4 + i)
;;;517    									% RCV_BUFSIZE];
;;;518    									dt |= st.rxBuf[(st.pRead + 4 + i + 1)
;;;519    									% RCV_BUFSIZE] << 8;
;;;520    									dt |= st.rxBuf[(st.pRead + 4 + i + 2)
;;;521    									% RCV_BUFSIZE] << 16;
;;;522    									dt |= st.rxBuf[(st.pRead + 4 + i + 3)
;;;523    									% RCV_BUFSIZE] << 24;
;;;524    									app_eeprom_write_int(addr, dt);
;;;525    								}
;;;526    								for (i = 0; i < (n % 4); i++) {
;;;527    									uint32_t addr = index * minSpaceBytes + n / 4
;;;528    									+ 4;
;;;529    									uint32_t dt = 0;
;;;530    									switch (i) {
;;;531    										case 0:
;;;532    										dt = st.rxBuf[(st.pRead + 4 + n / 4)
;;;533    										% RCV_BUFSIZE];
;;;534    										break;
;;;535    										case 1:
;;;536    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;537    												+ i) % RCV_BUFSIZE] << 8;
;;;538    										break;
;;;539    										case 2:
;;;540    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;541    												+ i) % RCV_BUFSIZE] << 16;
;;;542    										break;
;;;543    										case 3:
;;;544    										dt |= st.rxBuf[(st.pRead + 4 + n / 4
;;;545    												+ i) % RCV_BUFSIZE] << 24;
;;;546    										break;
;;;547    									}
;;;548    									app_eeprom_write_int(addr, dt);
;;;549    								}
;;;550    
;;;551    								FMC_Close();
;;;552    								SYS_LockReg();
;;;553    								FMC_DISABLE_AP_UPDATE();
;;;554    #endif
;;;555    								u8_tmp = index & 0xFF;
;;;556    								app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
;;;557    							}
;;;558    							break;
;;;559    							case RCV_VOL_CMD:
;;;560    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;561    							sendBuf[index++] = len;
;;;562    							sendBuf[index++] = RCV_VOL_CMD;
;;;563    							for (i = 0; i < (len - 1); i++) {
;;;564    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;565    										+ i) % RCV_BUFSIZE];
;;;566    							}
;;;567    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;568    								sendBuf[index] += sendBuf[i + 1];
;;;569    							}
;;;570    							index++;
;;;571    							app_2d4_send(sendBuf, index);
;;;572    							break;
;;;573    							case RCV_POWER_STATUS_CMD:
;;;574    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;575    							sendBuf[index++] = len;
;;;576    							sendBuf[index++] = RCV_POWER_STATUS_CMD;
;;;577    							for (i = 0; i < (len - 1); i++) {
;;;578    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;579    										+ i) % RCV_BUFSIZE];
;;;580    							}
;;;581    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;582    								sendBuf[index] += sendBuf[i + 1];
;;;583    							}
;;;584    							index++;
;;;585    							app_2d4_send(sendBuf, index);
;;;586    							break;
;;;587    #if 0
;;;588    							case RCV_X_BOX_STATUS_CMD:
;;;589    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;590    							sendBuf[index++] = len;
;;;591    							sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
;;;592    							for (i = 0; i < (len - 1); i++) {
;;;593    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;594    										+ i) % RCV_BUFSIZE];
;;;595    							}
;;;596    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;597    								sendBuf[index] += sendBuf[i + 1];
;;;598    							}
;;;599    							index++;
;;;600    							app_2d4_send(sendBuf, index);
;;;601    							break;
;;;602    #endif
;;;603    							case RCV_BT_STATUS_CMD:
;;;604    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;605    							sendBuf[index++] = len;
;;;606    							sendBuf[index++] = RCV_BT_STATUS_CMD;
;;;607    							for (i = 0; i < (len - 1); i++) {
;;;608    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;609    										+ i) % RCV_BUFSIZE];
;;;610    							}
;;;611    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;612    								sendBuf[index] += sendBuf[i + 1];
;;;613    							}
;;;614    							index++;
;;;615    							if (g_tWork.status.bits.DOME == 0) {
;;;616    								app_2d4_send(sendBuf, index);
;;;617    							}
;;;618    							break;
;;;619    							case RCV_PREV_NEXT_CMD:
;;;620    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;621    							sendBuf[index++] = len;
;;;622    							sendBuf[index++] = RCV_PREV_NEXT_CMD;
;;;623    							for (i = 0; i < (len - 1); i++) {
;;;624    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;625    										+ i) % RCV_BUFSIZE];
;;;626    							}
;;;627    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;628    								sendBuf[index] += sendBuf[i + 1];
;;;629    							}
;;;630    							index++;
;;;631    							if (g_tWork.status.bits.DOME == 0) {
;;;632    								app_2d4_send(sendBuf, index);
;;;633    							}
;;;634    							break;
;;;635    							case RCV_USB_PLAY_TIME_CMD:
;;;636    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;637    							sendBuf[index++] = len;
;;;638    							sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
;;;639    							for (i = 0; i < (len - 1); i++) {
;;;640    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;641    										+ i) % RCV_BUFSIZE];
;;;642    							}
;;;643    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;644    								sendBuf[index] += sendBuf[i + 1];
;;;645    							}
;;;646    							index++;
;;;647    							if (g_tWork.status.bits.DOME == 0) {
;;;648    								app_2d4_send(sendBuf, index);
;;;649    							}
;;;650    							break;
;;;651    							case RCV_FM_HZ_CMD:
;;;652    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;653    							sendBuf[index++] = len;
;;;654    							sendBuf[index++] = RCV_FM_HZ_CMD;
;;;655    							for (i = 0; i < (len - 1); i++) {
;;;656    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;657    										+ i) % RCV_BUFSIZE];
;;;658    							}
;;;659    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;660    								sendBuf[index] += sendBuf[i + 1];
;;;661    							}
;;;662    							index++;
;;;663    
;;;664    							if (g_tWork.status.bits.DOME == 0) {
;;;665    								app_2d4_send(sendBuf, index);
;;;666    							}
;;;667    							break;
;;;668    							case MODE_CHANGE_CMD:   //MODE
;;;669    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;670    							sendBuf[index++] = len;
;;;671    							sendBuf[index++] = MODE_CHANGE_CMD;
;;;672    							for (i = 0; i < (len - 1); i++) {
;;;673    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;674    										+ i) % RCV_BUFSIZE];
;;;675    							}
;;;676    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;677    								sendBuf[index] += sendBuf[i + 1];
;;;678    							}
;;;679    							index++;
;;;680    							app_2d4_send(sendBuf, index);
;;;681    							break;
;;;682    							case RCV_PLAY_PAUSE_STATUS_CMD:
;;;683    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;684    							sendBuf[index++] = len;
;;;685    							sendBuf[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
;;;686    							for (i = 0; i < (len - 1); i++) {
;;;687    								sendBuf[index++] = st.rxBuf[(st.pRead + 4
;;;688    										+ i) % RCV_BUFSIZE];
;;;689    							}
;;;690    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;691    								sendBuf[index] += sendBuf[i + 1];
;;;692    							}
;;;693    							index++;
;;;694    							if (g_tWork.status.bits.DOME == 0) {
;;;695    								app_2d4_send(sendBuf, index);
;;;696    							}
;;;697    							break;
;;;698    							/// app --start
;;;699    							case KEY_CARD_POWER_CMD:
;;;700    							if (g_tWork.status.bits.blinkEnable == 0) {
;;;701    //								g_tWork.status.bits.pause = 0;
;;;702    								g_tWork.status.bits.blinkEnable = 1;
;;;703    								g_tWork.status.bits.DEMO = 1;
;;;704    								app_dome_start_current();
;;;705    							} else {
;;;706    //								g_tWork.status.bits.pause = 1;
;;;707    								g_tWork.status.bits.blinkEnable = 0;
;;;708    								g_tWork.status.bits.DEMO = 0;
;;;709    								app_dome_stop_current();
;;;710    							}
;;;711    							sendBuf[index++] = LAMP2LCD_HEADER;
;;;712    							sendBuf[index++] = 10;
;;;713    							sendBuf[index++] = KEY_POWER_SHORT_CMD;
;;;714    							sendBuf[index++] = g_tWork.status.bits.blinkEnable;
;;;715    							app_dome_get_current_Name(sendBuf + index, 8);
;;;716    							index += 8;
;;;717    							for (i = 0; i < (sendBuf[1] + 1); i++) {
;;;718    								sendBuf[index] += sendBuf[i + 1];
;;;719    							}
;;;720    							index++;
;;;721    							app_2d4_send(sendBuf, index);
;;;722    							break;
;;;723    							case KEY_CARD_DEMO_CMD:
;;;724    //							if (g_tWork.status.bits.DEMO) {
;;;725    //								g_tWork.status.bits.DEMO = 0;
;;;726    //							} else {
;;;727    							g_tWork.status.bits.DEMO = 1;
;;;728    //							}
;;;729    							app_dome_start(0, 0);
;;;730    
;;;731    							break;
;;;732    							case APP_COLOR_ATLA_CMD:
;;;733    #if 1
;;;734    							app_dome_rgb(
;;;735    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;736    									st.rxBuf[(st.pRead + 5) % RCV_BUFSIZE],
;;;737    									st.rxBuf[(st.pRead + 6) % RCV_BUFSIZE]);
;;;738    #else
;;;739    							app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
;;;740    #endif
;;;741    							break;
;;;742    							case APP_BRIGHT_CMD:
;;;743    							dome_running_param.bright = st.rxBuf[(st.pRead
;;;744    									+ 4) % RCV_BUFSIZE];
;;;745    							Light_bright_set(
;;;746    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE]);
;;;747    							break;
;;;748    							case APP_SPEED_CMD:
;;;749    							dome_running_param.speed = st.rxBuf[(st.pRead
;;;750    									+ 4) % RCV_BUFSIZE];
;;;751    							break;
;;;752    							case APP_FLASH_INDEX_CMD:
;;;753    							g_tWork.status.bits.DEMO = 0;
;;;754    							app_dome_start_current();
;;;755    							app_dome_start(
;;;756    									st.rxBuf[(st.pRead + 4) % RCV_BUFSIZE],
;;;757    									0);
;;;758    							break;
;;;759    							case APP_SWITCH_INDEX_CMD: {
;;;760    								uint8_t switchData = st.rxBuf[(st.pRead + 4)
;;;761    								% RCV_BUFSIZE];
;;;762    								if (((switchData >> 4) & 0x0F) == 0) {
;;;763    									Relay_set(switchData & 0x0F);
;;;764    								}
;;;765    							}
;;;766    							break;
;;;767    							/// app --end
;;;768    							default:
;;;769    							break;
;;;770    						}
;;;771    						st.pRead += len + 4;
;;;772    #if 1
;;;773    						st.pRead = st.pRead % RCV_BUFSIZE;
;;;774    //						break;
;;;775    						return;
;;;776    #endif
;;;777    					}
;;;778    				}
;;;779    			} else {
;;;780    				st.pRead++;
;;;781    			}
;;;782    			st.pRead = st.pRead % RCV_BUFSIZE;
;;;783    		}
;;;784    	}
;;;785    #endif
;;;786    }
0000c4  bdfe              POP      {r1-r7,pc}
                          ENDP

0000c6  0000              DCW      0x0000
                  |L3.200|
                          DCD      ||.bss||
                  |L3.204|
                          DCD      ||.data||
                  |L3.208|
0000d0  5b455252          DCB      "[ERROR]   remote control check error!\r\n",0
0000d4  4f525d20
0000d8  20207265
0000dc  6d6f7465
0000e0  20636f6e
0000e4  74726f6c
0000e8  20636865
0000ec  636b2065
0000f0  72726f72
0000f4  210d0a00
                  |L3.248|
                          DCD      ||.constdata||

                          AREA ||i.app_uart_send||, CODE, READONLY, ALIGN=2

                  app_uart_send PROC
;;;32     
;;;33     void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  4604              MOV      r4,r0
000004  b082              SUB      sp,sp,#8
;;;34     	uint8_t index = 0, i = 0;
;;;35     
;;;36     	memset(uart_st.txBuf, 0, sizeof(uart_st.txBuf));
000006  21ff              MOVS     r1,#0xff
000008  481a              LDR      r0,|L4.116|
00000a  4616              MOV      r6,r2                 ;33
00000c  2500              MOVS     r5,#0                 ;34
00000e  3101              ADDS     r1,#1
000010  9000              STR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_memclr
;;;37     
;;;38     	uart_st.txBuf[index++] = 0x55;
000016  9800              LDR      r0,[sp,#0]
000018  2155              MOVS     r1,#0x55
00001a  7001              STRB     r1,[r0,#0]
;;;39     	uart_st.txBuf[index++] = 0xAA;
00001c  4815              LDR      r0,|L4.116|
00001e  21aa              MOVS     r1,#0xaa
000020  1c40              ADDS     r0,r0,#1
000022  7001              STRB     r1,[r0,#0]
;;;40     	uart_st.txBuf[index++] = len + 1;
000024  4913              LDR      r1,|L4.116|
000026  1c70              ADDS     r0,r6,#1
000028  1c89              ADDS     r1,r1,#2
00002a  7008              STRB     r0,[r1,#0]
;;;41     	uart_st.txBuf[index++] = cmd;
00002c  1c48              ADDS     r0,r1,#1
00002e  7004              STRB     r4,[r0,#0]
000030  4f11              LDR      r7,|L4.120|
000032  2404              MOVS     r4,#4
;;;42     	for (i = 0; i < len; i++) {
000034  e00a              B        |L4.76|
                  |L4.54|
;;;43     		uart_st.txBuf[index++] = *(ptr + i);
000036  9803              LDR      r0,[sp,#0xc]
000038  5d41              LDRB     r1,[r0,r5]
00003a  1938              ADDS     r0,r7,r4
00003c  30ff              ADDS     r0,r0,#0xff
00003e  30ff              ADDS     r0,r0,#0xff
000040  3002              ADDS     r0,#2
000042  1c64              ADDS     r4,r4,#1
000044  1c6d              ADDS     r5,r5,#1
000046  7001              STRB     r1,[r0,#0]
000048  b2e4              UXTB     r4,r4
00004a  b2ed              UXTB     r5,r5                 ;42
                  |L4.76|
00004c  42b5              CMP      r5,r6                 ;42
00004e  d3f2              BCC      |L4.54|
000050  1d36              ADDS     r6,r6,#4              ;42
;;;44     	}
;;;45     	uart_st.txBuf[index++] = app_CalcCRC8(uart_st.txBuf, len + 4);
000052  b2f1              UXTB     r1,r6
000054  9800              LDR      r0,[sp,#0]
000056  f7fffffe          BL       app_CalcCRC8
00005a  1939              ADDS     r1,r7,r4
00005c  31ff              ADDS     r1,r1,#0xff
00005e  31ff              ADDS     r1,r1,#0xff
000060  3102              ADDS     r1,#2
000062  7008              STRB     r0,[r1,#0]
000064  1c64              ADDS     r4,r4,#1
000066  b2e2              UXTB     r2,r4
;;;46     	comSendBuf(COM1, uart_st.txBuf, index);
000068  2001              MOVS     r0,#1
00006a  9900              LDR      r1,[sp,#0]
00006c  f7fffffe          BL       comSendBuf
;;;47     
;;;48     //	for (i = 0; i < (len + 5); i++) {
;;;49     //		comSendChar(uart_st.txBuf[i]);
;;;50     //	}
;;;51     }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
;;;52     
                          ENDP

                  |L4.116|
                          DCD      ||.bss||+0x200
                  |L4.120|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  uart_st
                          %        772

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6170705f          DCB      0x61,0x70,0x70,0x5f
000004  75617274          DCB      0x75,0x61,0x72,0x74
000008  5f70726f          DCB      0x5f,0x70,0x72,0x6f
00000c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  len
000000  00                DCB      0x00
                  u8_tmp
000001  00                DCB      0x00
                  tmp
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\app_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_uart_c_fe162fbd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_uart_c_fe162fbd____REVSH|
#line 402
|__asm___10_app_uart_c_fe162fbd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
