; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_2d4.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bsp_2d4.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 --omf_browse=.\obj\bsp_2d4.crf ..\Bsp\src\bsp_2d4.c]
                          THUMB

                          AREA ||i.RF_Carrier||, CODE, READONLY, ALIGN=2

                  RF_Carrier PROC
;;;346    /******************************************************************************/
;;;347    void RF_Carrier(uint8_t ucChannel_Set) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;348    	uint8_t BB_cal_data[5] = { 0x0A, 0x6D, 0x67, 0x9C, 0x46 };
000004  a223              ADR      r2,|L1.148|
000006  ca09              LDM      r2!,{r0,r3}
000008  b088              SUB      sp,sp,#0x20           ;347
;;;349    	uint8_t RF_cal_data[3] = { 0xF6, 0x37, 0x5D };
00000a  9000              STR      r0,[sp,#0]
00000c  9301              STR      r3,[sp,#4]
00000e  a023              ADR      r0,|L1.156|
000010  6800              LDR      r0,[r0,#0]
;;;350    	uint8_t RF_cal2_data[6] = { 0x45, 0x21, 0xEF, 0xAC, 0x5A, 0x50 };
000012  a223              ADR      r2,|L1.160|
000014  9004              STR      r0,[sp,#0x10]
000016  ca03              LDM      r2!,{r0,r1}
;;;351    	uint8_t Dem_cal_data[1] = { 0xE1 };
000018  9103              STR      r1,[sp,#0xc]
00001a  9002              STR      r0,[sp,#8]
00001c  a022              ADR      r0,|L1.168|
00001e  6800              LDR      r0,[r0,#0]
;;;352    	uint8_t Dem_cal2_data[3] = { 0x0B, 0xDF, 0x02 };
000020  9005              STR      r0,[sp,#0x14]
000022  a022              ADR      r0,|L1.172|
000024  6800              LDR      r0,[r0,#0]
;;;353    
;;;354    	RF_WriteReg(RST_FSPI, 0x5A);								//Software Reset
000026  9006              STR      r0,[sp,#0x18]
000028  215a              MOVS     r1,#0x5a
00002a  2053              MOVS     r0,#0x53
00002c  f7fffffe          BL       RF_WriteReg
;;;355    	RF_WriteReg(RST_FSPI, 0XA5);
000030  21a5              MOVS     r1,#0xa5
000032  2053              MOVS     r0,#0x53
000034  f7fffffe          BL       RF_WriteReg
;;;356    	RF_WriteReg(W_REGISTER + FEATURE, 0x20);
000038  2120              MOVS     r1,#0x20
00003a  203d              MOVS     r0,#0x3d
00003c  f7fffffe          BL       RF_WriteReg
;;;357    	CE_LOW;
000040  2100              MOVS     r1,#0
000042  20fc              MOVS     r0,#0xfc
000044  f7fffffe          BL       RF_WriteReg
;;;358    //	delay_ms(200);
;;;359    	delay_2d4(220);
000048  20dc              MOVS     r0,#0xdc
00004a  f7fffffe          BL       delay_2d4
;;;360    
;;;361    	RF_WriteReg(W_REGISTER + RF_CH, ucChannel_Set);						//单载波频点
00004e  4621              MOV      r1,r4
000050  2025              MOVS     r0,#0x25
000052  f7fffffe          BL       RF_WriteReg
;;;362    	RF_WriteReg(W_REGISTER + RF_SETUP, RF_POWER);      					//13dbm
000056  213f              MOVS     r1,#0x3f
000058  2026              MOVS     r0,#0x26
00005a  f7fffffe          BL       RF_WriteReg
;;;363    	RF_WriteBuf(W_REGISTER + BB_CAL, BB_cal_data, sizeof(BB_cal_data));
00005e  2205              MOVS     r2,#5
000060  4669              MOV      r1,sp
000062  203f              MOVS     r0,#0x3f
000064  f7fffffe          BL       RF_WriteBuf
;;;364    	RF_WriteBuf(W_REGISTER + RF_CAL2, RF_cal2_data, sizeof(RF_cal2_data));
000068  2206              MOVS     r2,#6
00006a  a902              ADD      r1,sp,#8
00006c  203a              MOVS     r0,#0x3a
00006e  f7fffffe          BL       RF_WriteBuf
;;;365    	RF_WriteBuf(W_REGISTER + DEMOD_CAL, Dem_cal_data, sizeof(Dem_cal_data));
000072  2201              MOVS     r2,#1
000074  a905              ADD      r1,sp,#0x14
000076  2039              MOVS     r0,#0x39
000078  f7fffffe          BL       RF_WriteBuf
;;;366    	RF_WriteBuf(W_REGISTER + RF_CAL, RF_cal_data, sizeof(RF_cal_data));
00007c  2203              MOVS     r2,#3
00007e  a904              ADD      r1,sp,#0x10
000080  203e              MOVS     r0,#0x3e
000082  f7fffffe          BL       RF_WriteBuf
;;;367    	RF_WriteBuf(W_REGISTER + DEM_CAL2, Dem_cal2_data, sizeof(Dem_cal2_data));
000086  2203              MOVS     r2,#3
000088  a906              ADD      r1,sp,#0x18
00008a  203b              MOVS     r0,#0x3b
00008c  f7fffffe          BL       RF_WriteBuf
;;;368    }
000090  b008              ADD      sp,sp,#0x20
000092  bd10              POP      {r4,pc}
;;;369    
                          ENDP

                  |L1.148|
000094  0a6d679c          DCB      "\nmg",156,"F",0
000098  4600    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L1.156|
00009c  f6375d00          DCB      246,"7]",0
                  |L1.160|
0000a0  4521efac          DCB      "E!",239,172,"ZP",0
0000a4  5a5000  
0000a7  00                DCB      0
                  |L1.168|
0000a8  e100              DCB      225,0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L1.172|
0000ac  0bdf0200          DCB      "\v",223,2,0

                          AREA ||i.RF_ClearFIFO||, CODE, READONLY, ALIGN=1

                  RF_ClearFIFO PROC
;;;230    /******************************************************************************/
;;;231    void RF_ClearFIFO(void) {
000000  b510              PUSH     {r4,lr}
;;;232    	RF_WriteReg(FLUSH_TX, 0);			                        //清除RF 的 TX FIFO
000002  2100              MOVS     r1,#0
000004  20e1              MOVS     r0,#0xe1
000006  f7fffffe          BL       RF_WriteReg
;;;233    	RF_WriteReg(FLUSH_RX, 0);                                   //清除RF 的 RX FIFO
00000a  2100              MOVS     r1,#0
00000c  20e2              MOVS     r0,#0xe2
00000e  f7fffffe          BL       RF_WriteReg
;;;234    }
000012  bd10              POP      {r4,pc}
;;;235    
                          ENDP


                          AREA ||i.RF_ClearStatus||, CODE, READONLY, ALIGN=1

                  RF_ClearStatus PROC
;;;222    /******************************************************************************/
;;;223    void RF_ClearStatus(void) {
000000  b510              PUSH     {r4,lr}
;;;224    	RF_WriteReg(W_REGISTER + STATUS, 0x70);							//清除RF的IRQ标志
000002  2170              MOVS     r1,#0x70
000004  2027              MOVS     r0,#0x27
000006  f7fffffe          BL       RF_WriteReg
;;;225    }
00000a  bd10              POP      {r4,pc}
;;;226    
                          ENDP


                          AREA ||i.RF_Init||, CODE, READONLY, ALIGN=2

                  RF_Init PROC
;;;302    static uint8_t Dem_cal2_data[3] = { 0x0b, 0xDF, 0x02 };
;;;303    void RF_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;304    
;;;305    	SPI_init();
;;;306    	RF_WriteReg(RST_FSPI, 0x5A);								//Software Reset
000002  215a              MOVS     r1,#0x5a
000004  2053              MOVS     r0,#0x53
000006  f7fffffe          BL       RF_WriteReg
;;;307    	RF_WriteReg(RST_FSPI, 0XA5);
00000a  21a5              MOVS     r1,#0xa5
00000c  2053              MOVS     r0,#0x53
00000e  f7fffffe          BL       RF_WriteReg
;;;308    
;;;309    	if (PAYLOAD_WIDTH < 33) {
;;;310    		RF_WriteReg(W_REGISTER + FEATURE, 0x20);//FIFO_LEN=32 BYTE  and enable Software control ce
000012  2120              MOVS     r1,#0x20
000014  203d              MOVS     r0,#0x3d
000016  f7fffffe          BL       RF_WriteReg
;;;311    	} else {
;;;312    		RF_WriteReg(W_REGISTER + FEATURE, 0x38);//FIFO_LEN=64 BYTE  and enable Software control ce
;;;313    	}
;;;314    	CE_LOW;
00001a  2100              MOVS     r1,#0
00001c  20fc              MOVS     r0,#0xfc
00001e  f7fffffe          BL       RF_WriteReg
;;;315    	RF_WriteReg(FLUSH_TX, 0);									// CLEAR TXFIFO
000022  2100              MOVS     r1,#0
000024  20e1              MOVS     r0,#0xe1
000026  f7fffffe          BL       RF_WriteReg
;;;316    	RF_WriteReg(FLUSH_RX, 0);									// CLEAR  RXFIFO
00002a  2100              MOVS     r1,#0
00002c  20e2              MOVS     r0,#0xe2
00002e  f7fffffe          BL       RF_WriteReg
;;;317    	RF_WriteReg(W_REGISTER + STATUS, 0x70);						// CLEAR  STATUS
000032  2170              MOVS     r1,#0x70
000034  2027              MOVS     r0,#0x27
000036  f7fffffe          BL       RF_WriteReg
;;;318    	RF_WriteReg(W_REGISTER + EN_RXADDR, 0x01);					// Enable Pipe0
00003a  2101              MOVS     r1,#1
00003c  2022              MOVS     r0,#0x22
00003e  f7fffffe          BL       RF_WriteReg
;;;319    	RF_WriteReg(W_REGISTER + SETUP_AW, 0x03);		// address witdth is 5 bytes
000042  2103              MOVS     r1,#3
000044  2023              MOVS     r0,#0x23
000046  f7fffffe          BL       RF_WriteReg
;;;320    	RF_WriteReg(W_REGISTER + RF_CH, DEFAULT_CHANNEL);                // 2478M HZ
00004a  214e              MOVS     r1,#0x4e
00004c  2025              MOVS     r0,#0x25
00004e  f7fffffe          BL       RF_WriteReg
;;;321    	RF_WriteReg(W_REGISTER + RX_PW_P0, PAYLOAD_WIDTH);				// 8 bytes
000052  2110              MOVS     r1,#0x10
000054  2031              MOVS     r0,#0x31
000056  f7fffffe          BL       RF_WriteReg
;;;322    	RF_WriteBuf(W_REGISTER + TX_ADDR, (uint8_t*) TX_ADDRESS_DEF,
00005a  2205              MOVS     r2,#5
00005c  491b              LDR      r1,|L4.204|
00005e  2030              MOVS     r0,#0x30
000060  f7fffffe          BL       RF_WriteBuf
;;;323    			sizeof(TX_ADDRESS_DEF));	// Writes TX_Address to PN006
;;;324    	RF_WriteBuf(W_REGISTER + RX_ADDR_P0, (uint8_t*) TX_ADDRESS_DEF,
000064  2205              MOVS     r2,#5
000066  4919              LDR      r1,|L4.204|
000068  202a              MOVS     r0,#0x2a
00006a  f7fffffe          BL       RF_WriteBuf
;;;325    			sizeof(TX_ADDRESS_DEF));	// RX_Addr0 same as TX_Adr for Auto.Ack
;;;326    	RF_WriteBuf(W_REGISTER + BB_CAL, BB_cal_data, sizeof(BB_cal_data));
00006e  4917              LDR      r1,|L4.204|
000070  2205              MOVS     r2,#5
000072  1d49              ADDS     r1,r1,#5
000074  203f              MOVS     r0,#0x3f
000076  f7fffffe          BL       RF_WriteBuf
;;;327    	RF_WriteBuf(W_REGISTER + RF_CAL2, RF_cal2_data, sizeof(RF_cal2_data));
00007a  4914              LDR      r1,|L4.204|
00007c  2206              MOVS     r2,#6
00007e  310a              ADDS     r1,r1,#0xa
000080  203a              MOVS     r0,#0x3a
000082  f7fffffe          BL       RF_WriteBuf
;;;328    	RF_WriteBuf(W_REGISTER + DEMOD_CAL, Dem_cal_data, sizeof(Dem_cal_data));
000086  4911              LDR      r1,|L4.204|
000088  2201              MOVS     r2,#1
00008a  1fc9              SUBS     r1,r1,#7
00008c  2039              MOVS     r0,#0x39
00008e  f7fffffe          BL       RF_WriteBuf
;;;329    	RF_WriteBuf(W_REGISTER + RF_CAL, RF_cal_data, sizeof(RF_cal_data));
000092  490e              LDR      r1,|L4.204|
000094  2203              MOVS     r2,#3
000096  1f89              SUBS     r1,r1,#6
000098  203e              MOVS     r0,#0x3e
00009a  f7fffffe          BL       RF_WriteBuf
;;;330    	RF_WriteBuf(W_REGISTER + DEM_CAL2, Dem_cal2_data, sizeof(Dem_cal2_data));
00009e  490b              LDR      r1,|L4.204|
0000a0  2203              MOVS     r2,#3
0000a2  1ec9              SUBS     r1,r1,#3
0000a4  203b              MOVS     r0,#0x3b
0000a6  f7fffffe          BL       RF_WriteBuf
;;;331    	RF_WriteReg(W_REGISTER + DYNPD, 0x00);
0000aa  2100              MOVS     r1,#0
0000ac  203c              MOVS     r0,#0x3c
0000ae  f7fffffe          BL       RF_WriteReg
;;;332    	RF_WriteReg(W_REGISTER + RF_SETUP, RF_POWER);						// 13DBM
0000b2  213f              MOVS     r1,#0x3f
0000b4  2026              MOVS     r0,#0x26
0000b6  f7fffffe          BL       RF_WriteReg
;;;333    
;;;334    #if(TRANSMIT_TYPE == TRANS_ENHANCE_MODE)
;;;335    	RF_WriteReg(W_REGISTER + SETUP_RETR, 0x03);					//  3 retrans...
;;;336    	RF_WriteReg(W_REGISTER + EN_AA, 0x01);// Enable Auto.Ack:Pipe0
;;;337    #elif(TRANSMIT_TYPE == TRANS_BURST_MODE)
;;;338    	RF_WriteReg(W_REGISTER + SETUP_RETR, 0x00);	// Disable retrans...
0000ba  2100              MOVS     r1,#0
0000bc  2024              MOVS     r0,#0x24
0000be  f7fffffe          BL       RF_WriteReg
;;;339    	RF_WriteReg(W_REGISTER + EN_AA, 0x00);	// Disable AutoAck
0000c2  2100              MOVS     r1,#0
0000c4  2021              MOVS     r0,#0x21
0000c6  f7fffffe          BL       RF_WriteReg
;;;340    #endif
;;;341    
;;;342    }
0000ca  bd10              POP      {r4,pc}
;;;343    
                          ENDP

                  |L4.204|
                          DCD      ||.data||+0x7

                          AREA ||i.RF_ReadBuf||, CODE, READONLY, ALIGN=2

                  RF_ReadBuf PROC
;;;168    /******************************************************************************/
;;;169    void RF_ReadBuf(uint8_t reg, unsigned char *pBuf, uint8_t length) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  460e              MOV      r6,r1
;;;170    	uint8_t byte_ctr;
;;;171    
;;;172    	CSN_LOW;
000004  4f0b              LDR      r7,|L5.52|
000006  2100              MOVS     r1,#0
000008  4615              MOV      r5,r2                 ;169
00000a  6139              STR      r1,[r7,#0x10]
;;;173    	SPI_WR(reg);
00000c  f7fffffe          BL       SPI_WR
;;;174    	for (byte_ctr = 0; byte_ctr < length; byte_ctr++)
000010  2400              MOVS     r4,#0
000012  e004              B        |L5.30|
                  |L5.20|
;;;175    		pBuf[byte_ctr] = ucSPI_Read();
000014  f7fffffe          BL       ucSPI_Read
000018  5530              STRB     r0,[r6,r4]
00001a  1c64              ADDS     r4,r4,#1
00001c  b2e4              UXTB     r4,r4                 ;174
                  |L5.30|
00001e  42ac              CMP      r4,r5                 ;174
000020  d3f8              BCC      |L5.20|
;;;176    	SPI_DATA_OUTPUT_MODE
000022  2201              MOVS     r2,#1
000024  2120              MOVS     r1,#0x20
000026  4804              LDR      r0,|L5.56|
000028  f7fffffe          BL       GPIO_SetMode
;;;177    	;
;;;178    	CSN_HIGH;
00002c  2001              MOVS     r0,#1
00002e  6138              STR      r0,[r7,#0x10]
;;;179    }
000030  bdf8              POP      {r3-r7,pc}
;;;180    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      0x50004200
                  |L5.56|
                          DCD      0x50004000

                          AREA ||i.RF_RxMode||, CODE, READONLY, ALIGN=1

                  RF_RxMode PROC
;;;195    /******************************************************************************/
;;;196    void RF_RxMode(void) {
000000  b510              PUSH     {r4,lr}
;;;197    	CE_LOW;
000002  2100              MOVS     r1,#0
000004  20fc              MOVS     r0,#0xfc
000006  f7fffffe          BL       RF_WriteReg
;;;198    	RF_WriteReg(W_REGISTER + CONFIG, 0X8F);						// 将RF设置成RX模式
00000a  218f              MOVS     r1,#0x8f
00000c  2020              MOVS     r0,#0x20
00000e  f7fffffe          BL       RF_WriteReg
;;;199    	CE_HIGH;										// Set CE pin high 开始接收数据
000012  2100              MOVS     r1,#0
000014  20fd              MOVS     r0,#0xfd
000016  f7fffffe          BL       RF_WriteReg
;;;200    //	delay_ms(2);
;;;201    	delay_2d4(1000);
00001a  207d              MOVS     r0,#0x7d
00001c  00c0              LSLS     r0,r0,#3
00001e  f7fffffe          BL       delay_2d4
;;;202    
;;;203    }
000022  bd10              POP      {r4,pc}
;;;204    
                          ENDP


                          AREA ||i.RF_SetChannel||, CODE, READONLY, ALIGN=1

                  RF_SetChannel PROC
;;;239    /******************************************************************************/
;;;240    void RF_SetChannel(uint8_t Channel) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;241    	CE_LOW;
000004  2100              MOVS     r1,#0
000006  20fc              MOVS     r0,#0xfc
000008  f7fffffe          BL       RF_WriteReg
;;;242    	RF_WriteReg(W_REGISTER + RF_CH, Channel);
00000c  4621              MOV      r1,r4
00000e  2025              MOVS     r0,#0x25
000010  f7fffffe          BL       RF_WriteReg
;;;243    }
000014  bd10              POP      {r4,pc}
;;;244    
                          ENDP


                          AREA ||i.RF_TxData||, CODE, READONLY, ALIGN=2

                  RF_TxData PROC
;;;251    /******************************************************************************/
;;;252    void RF_TxData(uint8_t *ucPayload, uint8_t length) {
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;253    	uint8_t i = 0;
;;;254    	if (0 == ucRF_GetStatus()) {                             // rf free status
000006  f7fffffe          BL       ucRF_GetStatus
00000a  2800              CMP      r0,#0
00000c  d10f              BNE      |L8.46|
;;;255    		RF_WriteBuf(W_TX_PAYLOAD, ucPayload, length);
00000e  4622              MOV      r2,r4
000010  4629              MOV      r1,r5
000012  20a0              MOVS     r0,#0xa0
000014  f7fffffe          BL       RF_WriteBuf
;;;256    		CE_HIGH;                             //rf entery tx mode start send data
000018  2100              MOVS     r1,#0
00001a  20fd              MOVS     r0,#0xfd
00001c  f7fffffe          BL       RF_WriteReg
;;;257    //		delay_10us(60);                            //keep ce high at least 600us
;;;258    
;;;259    		delay_2d4(650);
000020  4803              LDR      r0,|L8.48|
000022  f7fffffe          BL       delay_2d4
;;;260    
;;;261    		CE_LOW;                                                 //rf entery stb3
000026  2100              MOVS     r1,#0
000028  20fc              MOVS     r0,#0xfc
00002a  f7fffffe          BL       RF_WriteReg
                  |L8.46|
;;;262    	}
;;;263    }
00002e  bd70              POP      {r4-r6,pc}
;;;264    
                          ENDP

                  |L8.48|
                          DCD      0x0000028a

                          AREA ||i.RF_TxMode||, CODE, READONLY, ALIGN=1

                  RF_TxMode PROC
;;;184    /******************************************************************************/
;;;185    void RF_TxMode(void) {
000000  b510              PUSH     {r4,lr}
;;;186    	CE_LOW;
000002  2100              MOVS     r1,#0
000004  20fc              MOVS     r0,#0xfc
000006  f7fffffe          BL       RF_WriteReg
;;;187    	RF_WriteReg(W_REGISTER + CONFIG, 0X8E);						// 将RF设置成TX模式
00000a  218e              MOVS     r1,#0x8e
00000c  2020              MOVS     r0,#0x20
00000e  f7fffffe          BL       RF_WriteReg
;;;188    //	delay_10us(1);
;;;189    	delay_2d4(12);
000012  200c              MOVS     r0,#0xc
000014  f7fffffe          BL       delay_2d4
;;;190    }
000018  bd10              POP      {r4,pc}
;;;191    
                          ENDP


                          AREA ||i.RF_WriteBuf||, CODE, READONLY, ALIGN=2

                  RF_WriteBuf PROC
;;;85     /******************************************************************************/
;;;86     void RF_WriteBuf(uint8_t reg, uint8_t *pBuf, uint8_t length) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  460e              MOV      r6,r1
;;;87     	uint8_t j;
;;;88     	CSN_LOW;
000004  4f08              LDR      r7,|L10.40|
000006  2100              MOVS     r1,#0
000008  4615              MOV      r5,r2                 ;86
00000a  6139              STR      r1,[r7,#0x10]
;;;89     	j = 0;
00000c  460c              MOV      r4,r1
;;;90     	SPI_WW(reg);
00000e  f7fffffe          BL       SPI_WW
;;;91     	for (j = 0; j < length; j++) {
000012  e004              B        |L10.30|
                  |L10.20|
;;;92     		SPI_WW(pBuf[j]);
000014  5d30              LDRB     r0,[r6,r4]
000016  f7fffffe          BL       SPI_WW
00001a  1c64              ADDS     r4,r4,#1
00001c  b2e4              UXTB     r4,r4                 ;91
                  |L10.30|
00001e  42ac              CMP      r4,r5                 ;91
000020  d3f8              BCC      |L10.20|
;;;93     	}
;;;94     	j = 0;
;;;95     	CSN_HIGH;
000022  2001              MOVS     r0,#1
000024  6138              STR      r0,[r7,#0x10]
;;;96     }
000026  bdf8              POP      {r3-r7,pc}
;;;97     
                          ENDP

                  |L10.40|
                          DCD      0x50004200

                          AREA ||i.RF_WriteReg||, CODE, READONLY, ALIGN=2

                  RF_WriteReg PROC
;;;72     /******************************************************************************/
;;;73     void RF_WriteReg(uint8_t reg, uint8_t wdata) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;74     	CSN_LOW;
000004  4c09              LDR      r4,|L11.44|
000006  2000              MOVS     r0,#0
000008  460e              MOV      r6,r1                 ;73
00000a  6120              STR      r0,[r4,#0x10]
;;;75     	delay_2d4(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       delay_2d4
;;;76     	SPI_WW(reg);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       SPI_WW
;;;77     	SPI_WW(wdata);
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       SPI_WW
;;;78     	delay_2d4(1);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       delay_2d4
;;;79     	CSN_HIGH;
000024  2001              MOVS     r0,#1
000026  6120              STR      r0,[r4,#0x10]
;;;80     }
000028  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      0x50004200

                          AREA ||i.SPI_WR||, CODE, READONLY, ALIGN=2

                  SPI_WR PROC
;;;101    /******************************************************************************/
;;;102    void SPI_WR(uint8_t R_REG) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;103    	uint8_t i;
;;;104    	for (i = 0; i < 8; i++) {
000002  2400              MOVS     r4,#0
;;;105    		SCK_LOW
000004  4e11              LDR      r6,|L12.76|
000006  4605              MOV      r5,r0                 ;102
000008  4627              MOV      r7,r4                 ;104
                  |L12.10|
00000a  61f7              STR      r7,[r6,#0x1c]
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       delay_2d4
;;;106    		;
;;;107    		if (R_REG & 0x80) {
000012  0628              LSLS     r0,r5,#24
000014  d502              BPL      |L12.28|
;;;108    			SPI_DATA_HIGH;
000016  2001              MOVS     r0,#1
000018  6170              STR      r0,[r6,#0x14]
00001a  e000              B        |L12.30|
                  |L12.28|
;;;109    		} else {
;;;110    			SPI_DATA_LOW;
00001c  6177              STR      r7,[r6,#0x14]
                  |L12.30|
;;;111    		}
;;;112    		R_REG <<= 1;
00001e  0668              LSLS     r0,r5,#25
000020  0e05              LSRS     r5,r0,#24
;;;113    		SCK_HIGH
000022  2001              MOVS     r0,#1
000024  61f0              STR      r0,[r6,#0x1c]
000026  f7fffffe          BL       delay_2d4
;;;114    		;
;;;115    		delay_2d4(1);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       delay_2d4
000030  1c64              ADDS     r4,r4,#1
000032  b2e4              UXTB     r4,r4                 ;104
000034  2c08              CMP      r4,#8                 ;104
000036  d3e8              BCC      |L12.10|
;;;116    	}
;;;117    	SPI_DATA_INPUT_MODE
000038  2200              MOVS     r2,#0
00003a  2120              MOVS     r1,#0x20
00003c  4804              LDR      r0,|L12.80|
00003e  f7fffffe          BL       GPIO_SetMode
;;;118    	;
;;;119    	SCK_LOW
000042  61f7              STR      r7,[r6,#0x1c]
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       delay_2d4
;;;120    	;
;;;121    
;;;122    }
00004a  bdf8              POP      {r3-r7,pc}
;;;123    
                          ENDP

                  |L12.76|
                          DCD      0x50004200
                  |L12.80|
                          DCD      0x50004000

                          AREA ||i.SPI_WW||, CODE, READONLY, ALIGN=2

                  SPI_WW PROC
;;;49     /******************************************************************************/
;;;50     void SPI_WW(uint8_t R_REG) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;51     	uint8_t i;
;;;52     	for (i = 0; i < 8; i++) {
000002  2400              MOVS     r4,#0
;;;53     		SCK_LOW
000004  4e0f              LDR      r6,|L13.68|
000006  4605              MOV      r5,r0                 ;50
000008  4627              MOV      r7,r4                 ;52
                  |L13.10|
00000a  61f7              STR      r7,[r6,#0x1c]
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       delay_2d4
;;;54     		;
;;;55     		if (R_REG & 0x80) {
000012  0628              LSLS     r0,r5,#24
000014  d502              BPL      |L13.28|
;;;56     			SPI_DATA_HIGH;
000016  2001              MOVS     r0,#1
000018  6170              STR      r0,[r6,#0x14]
00001a  e000              B        |L13.30|
                  |L13.28|
;;;57     		} else {
;;;58     			SPI_DATA_LOW;
00001c  6177              STR      r7,[r6,#0x14]
                  |L13.30|
;;;59     		}
;;;60     		R_REG <<= 1;
00001e  0668              LSLS     r0,r5,#25
000020  0e05              LSRS     r5,r0,#24
;;;61     		SCK_HIGH
000022  2001              MOVS     r0,#1
000024  61f0              STR      r0,[r6,#0x1c]
000026  f7fffffe          BL       delay_2d4
;;;62     		;
;;;63     		delay_2d4(1);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       delay_2d4
000030  1c64              ADDS     r4,r4,#1
000032  b2e4              UXTB     r4,r4                 ;52
000034  2c08              CMP      r4,#8                 ;52
000036  d3e8              BCC      |L13.10|
;;;64     	}
;;;65     	SCK_LOW
000038  61f7              STR      r7,[r6,#0x1c]
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       delay_2d4
;;;66     	;
;;;67     }
000040  bdf8              POP      {r3-r7,pc}
;;;68     
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      0x50004200

                          AREA ||i.SPI_init||, CODE, READONLY, ALIGN=1

                  SPI_init PROC
;;;30     /******************************************************************************/
;;;31     void SPI_init(void) {
000000  4770              BX       lr
;;;32     //	GPIO_Init(GPIOB, GPIO_Pin_4, GPIO_Mode_Out_PP_High_Fast); //CSN PIN output High pulling push
;;;33     //	GPIO_Init(GPIOB, GPIO_Pin_5, GPIO_Mode_Out_PP_Low_Fast); //SCK PIN output Low  pulling push
;;;34     //	GPIO_Init(GPIOB, GPIO_Pin_6, GPIO_Mode_Out_PP_High_Fast); //DATA PIN output  DEFAULT  High pulling push
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.Wireless2d4_InitHard||, CODE, READONLY, ALIGN=2

                  Wireless2d4_InitHard PROC
;;;12     
;;;13     void Wireless2d4_InitHard(void) {
000000  b510              PUSH     {r4,lr}
;;;14     
;;;15     	memcpy(TX_ADDRESS_DEF, PUBLIC_ADDRESS_DEF, 5);
000002  2205              MOVS     r2,#5
000004  490a              LDR      r1,|L15.48|
000006  480b              LDR      r0,|L15.52|
000008  f7fffffe          BL       __aeabi_memcpy
;;;16     
;;;17     	//SCK
;;;18     	GPIO_SetMode(P0, BIT7, GPIO_MODE_OUTPUT);
00000c  4c0a              LDR      r4,|L15.56|
00000e  2201              MOVS     r2,#1
000010  2180              MOVS     r1,#0x80
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;19     
;;;20     	//CSN
;;;21     	GPIO_SetMode(P0, BIT4, GPIO_MODE_OUTPUT);
000018  2201              MOVS     r2,#1
00001a  2110              MOVS     r1,#0x10
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_SetMode
;;;22     
;;;23     	//TX
;;;24     	GPIO_SetMode(P0, BIT5, GPIO_MODE_OUTPUT);
000022  2201              MOVS     r2,#1
000024  2120              MOVS     r1,#0x20
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       GPIO_SetMode
;;;25     }
00002c  bd10              POP      {r4,pc}
;;;26     
                          ENDP

00002e  0000              DCW      0x0000
                  |L15.48|
                          DCD      ||.constdata||
                  |L15.52|
                          DCD      ||.data||+0x7
                  |L15.56|
                          DCD      0x50004000

                          AREA ||i.delay_2d4||, CODE, READONLY, ALIGN=1

                  delay_2d4 PROC
;;;36     
;;;37     static void delay_2d4(uint16_t n) {
000000  2200              MOVS     r2,#0
000002  e006              B        |L16.18|
                  |L16.4|
;;;38     	uint16_t i = 0, j = 0;
;;;39     
;;;40     	for (i = 0; i < n; i++) {
;;;41     		for (j = 0; j < 7; j++)
000004  2100              MOVS     r1,#0
                  |L16.6|
000006  1c49              ADDS     r1,r1,#1
000008  b289              UXTH     r1,r1
00000a  2907              CMP      r1,#7
00000c  d3fb              BCC      |L16.6|
00000e  1c52              ADDS     r2,r2,#1
000010  b292              UXTH     r2,r2                 ;40
                  |L16.18|
000012  4282              CMP      r2,r0                 ;40
000014  d3f6              BCC      |L16.4|
;;;42     			;
;;;43     	}
;;;44     }
000016  4770              BX       lr
;;;45     
                          ENDP


                          AREA ||i.ucRF_DumpRxData||, CODE, READONLY, ALIGN=1

                  ucRF_DumpRxData PROC
;;;276    /******************************************************************************/
;;;277    uint8_t ucRF_DumpRxData(uint8_t *ucPayload, uint8_t length) {
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;278    	if (ucRF_GetStatus() & RX_DR_FLAG) {
000006  f7fffffe          BL       ucRF_GetStatus
00000a  0640              LSLS     r0,r0,#25
00000c  d512              BPL      |L17.52|
;;;279    
;;;280    		CE_LOW;
00000e  2100              MOVS     r1,#0
000010  20fc              MOVS     r0,#0xfc
000012  f7fffffe          BL       RF_WriteReg
;;;281    		RF_ReadBuf(R_RX_PAYLOAD, ucPayload, length); //将接收到的数据读出到ucPayload，且清除rxfifo
000016  4622              MOV      r2,r4
000018  4629              MOV      r1,r5
00001a  2061              MOVS     r0,#0x61
00001c  f7fffffe          BL       RF_ReadBuf
;;;282    		RF_ClearFIFO();
000020  f7fffffe          BL       RF_ClearFIFO
;;;283    		RF_ClearStatus();                              		          //清除Status
000024  f7fffffe          BL       RF_ClearStatus
;;;284    		CE_HIGH;                                                         //继续开始接
000028  2100              MOVS     r1,#0
00002a  20fd              MOVS     r0,#0xfd
00002c  f7fffffe          BL       RF_WriteReg
;;;285    		return 1;
000030  2001              MOVS     r0,#1
;;;286    	}
;;;287    	return 0;
;;;288    }
000032  bd70              POP      {r4-r6,pc}
                  |L17.52|
000034  2000              MOVS     r0,#0                 ;287
000036  bd70              POP      {r4-r6,pc}
;;;289    
                          ENDP


                          AREA ||i.ucRF_GetRSSI||, CODE, READONLY, ALIGN=1

                  ucRF_GetRSSI PROC
;;;215    /******************************************************************************/
;;;216    uint8_t ucRF_GetRSSI(void) {
000000  b510              PUSH     {r4,lr}
;;;217    	return (ucRF_ReadReg(DATAOUT));								//读取RF RSSI
000002  2009              MOVS     r0,#9
000004  f7fffffe          BL       ucRF_ReadReg
;;;218    }
000008  bd10              POP      {r4,pc}
;;;219    /******************************************************************************/
                          ENDP


                          AREA ||i.ucRF_GetStatus||, CODE, READONLY, ALIGN=1

                  ucRF_GetStatus PROC
;;;208    /******************************************************************************/
;;;209    uint8_t ucRF_GetStatus(void) {
000000  b510              PUSH     {r4,lr}
;;;210    	return ucRF_ReadReg(STATUS) & 0x70;								//读取RF的状态
000002  2007              MOVS     r0,#7
000004  f7fffffe          BL       ucRF_ReadReg
000008  2170              MOVS     r1,#0x70
00000a  4008              ANDS     r0,r0,r1
;;;211    }
00000c  bd10              POP      {r4,pc}
;;;212    /******************************************************************************/
                          ENDP


                          AREA ||i.ucRF_ReadReg||, CODE, READONLY, ALIGN=2

                  ucRF_ReadReg PROC
;;;149    /******************************************************************************/
;;;150    uint8_t ucRF_ReadReg(uint8_t reg) {
000000  b570              PUSH     {r4-r6,lr}
;;;151    	uint8_t dt;
;;;152    
;;;153    	CSN_LOW;
000002  4c0c              LDR      r4,|L20.52|
000004  2100              MOVS     r1,#0
000006  4605              MOV      r5,r0                 ;150
000008  6121              STR      r1,[r4,#0x10]
;;;154    	delay_2d4(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       delay_2d4
;;;155    	SPI_WR(reg);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       SPI_WR
;;;156    	dt = ucSPI_Read();
000016  f7fffffe          BL       ucSPI_Read
00001a  4605              MOV      r5,r0
;;;157    	SPI_DATA_OUTPUT_MODE
00001c  2201              MOVS     r2,#1
00001e  2120              MOVS     r1,#0x20
000020  4805              LDR      r0,|L20.56|
000022  f7fffffe          BL       GPIO_SetMode
;;;158    	;
;;;159    	delay_2d4(1);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       delay_2d4
;;;160    	CSN_HIGH;
00002c  2101              MOVS     r1,#1
00002e  6121              STR      r1,[r4,#0x10]
;;;161    
;;;162    	return dt;
000030  4628              MOV      r0,r5
;;;163    }
000032  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  |L20.52|
                          DCD      0x50004200
                  |L20.56|
                          DCD      0x50004000

                          AREA ||i.ucSPI_Read||, CODE, READONLY, ALIGN=2

                  ucSPI_Read PROC
;;;127    /******************************************************************************/
;;;128    uint8_t ucSPI_Read(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;129    	uint8_t i, dt;
;;;130    	dt = 0;
000002  2400              MOVS     r4,#0
;;;131    	for (i = 0; i < 8; i++) {
;;;132    		SCK_LOW
000004  4e0e              LDR      r6,|L21.64|
000006  4625              MOV      r5,r4                 ;131
000008  2701              MOVS     r7,#1
                  |L21.10|
00000a  2000              MOVS     r0,#0
00000c  61f0              STR      r0,[r6,#0x1c]
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       delay_2d4
;;;133    		;
;;;134    		dt = dt << 1;
000014  0660              LSLS     r0,r4,#25
000016  0e04              LSRS     r4,r0,#24
;;;135    		SCK_HIGH
000018  61f7              STR      r7,[r6,#0x1c]
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       delay_2d4
;;;136    		;
;;;137    		if (SPI_DATA_STATUS) {
000020  6970              LDR      r0,[r6,#0x14]
000022  2800              CMP      r0,#0
000024  d000              BEQ      |L21.40|
;;;138    			dt |= 0x01;
000026  433c              ORRS     r4,r4,r7
                  |L21.40|
000028  1c6d              ADDS     r5,r5,#1
00002a  b2ed              UXTB     r5,r5                 ;131
00002c  2d08              CMP      r5,#8                 ;131
00002e  d3ec              BCC      |L21.10|
;;;139    		}
;;;140    	}
;;;141    	SCK_LOW
000030  2000              MOVS     r0,#0
000032  61f0              STR      r0,[r6,#0x1c]
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       delay_2d4
;;;142    	;
;;;143    	return dt;
00003a  4620              MOV      r0,r4
;;;144    }
00003c  bdf8              POP      {r3-r7,pc}
;;;145    
                          ENDP

00003e  0000              DCW      0x0000
                  |L21.64|
                          DCD      0x50004200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  PUBLIC_ADDRESS_DEF
000000  1262acb3          DCB      0x12,0x62,0xac,0xb3
000004  66                DCB      0x66

                          AREA ||.data||, DATA, ALIGN=0

                  Dem_cal_data
000000  01                DCB      0x01
                  RF_cal_data
000001  f6375d            DCB      0xf6,0x37,0x5d
                  Dem_cal2_data
000004  0bdf02            DCB      0x0b,0xdf,0x02
                  TX_ADDRESS_DEF
000007  cc                DCB      0xcc
000008  cccccccc          DCB      0xcc,0xcc,0xcc,0xcc
                  BB_cal_data
00000c  0a6d679c          DCB      0x0a,0x6d,0x67,0x9c
000010  46                DCB      0x46
                  RF_cal2_data
000011  4521ef            DCB      0x45,0x21,0xef
000014  ac5a50            DCB      0xac,0x5a,0x50

;*** Start embedded assembler ***

#line 1 "..\\Bsp\\src\\bsp_2d4.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_2d4_c_cb27f54d____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_bsp_2d4_c_cb27f54d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_2d4_c_cb27f54d____REVSH|
#line 402
|__asm___9_bsp_2d4_c_cb27f54d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
