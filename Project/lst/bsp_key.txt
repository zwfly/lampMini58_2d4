; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_key.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bsp_key.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\bsp_key.crf ..\Bsp\src\bsp_key.c]
                          THUMB

                          AREA ||i.IsKeyDown1||, CODE, READONLY, ALIGN=2

                  IsKeyDown1 PROC
;;;33     
;;;34     static uint8_t IsKeyDown1(void) {
000000  4903              LDR      r1,|L1.16|
;;;35     	uint8_t sta = 0;
000002  2000              MOVS     r0,#0
;;;36     	if (P31) {
000004  6a49              LDR      r1,[r1,#0x24]
000006  2900              CMP      r1,#0
000008  d100              BNE      |L1.12|
;;;37     		sta = 0;
;;;38     	} else {
;;;39     		sta = 1;
00000a  2001              MOVS     r0,#1
                  |L1.12|
;;;40     	}
;;;41     	return sta;
;;;42     }
00000c  4770              BX       lr
;;;43     
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x50004240

                          AREA ||i.IsKeyDown2||, CODE, READONLY, ALIGN=2

                  IsKeyDown2 PROC
;;;43     
;;;44     static uint8_t IsKeyDown2(void) {
000000  4903              LDR      r1,|L2.16|
;;;45     	uint8_t sta = 0;
000002  2000              MOVS     r0,#0
;;;46     	if (P32) {
000004  6a89              LDR      r1,[r1,#0x28]
000006  2900              CMP      r1,#0
000008  d100              BNE      |L2.12|
;;;47     		sta = 0;
;;;48     	} else {
;;;49     		sta = 1;
00000a  2001              MOVS     r0,#1
                  |L2.12|
;;;50     	}
;;;51     	return sta;
;;;52     }
00000c  4770              BX       lr
;;;53     /*
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x50004240

                          AREA ||i.bsp_ClearKey||, CODE, READONLY, ALIGN=2

                  bsp_ClearKey PROC
;;;163     */
;;;164    void bsp_ClearKey(void) {
000000  4801              LDR      r0,|L3.8|
;;;165    	s_tKey.Read = s_tKey.Write;
000002  7ac1              LDRB     r1,[r0,#0xb]  ; s_tKey
000004  7281              STRB     r1,[r0,#0xa]
;;;166    }
000006  4770              BX       lr
;;;167    
                          ENDP

                  |L3.8|
                          DCD      ||.bss||+0x20

                          AREA ||i.bsp_DetectKey||, CODE, READONLY, ALIGN=2

                  bsp_DetectKey PROC
;;;229    uint8_t sta = 0;
;;;230    static void bsp_DetectKey(uint8_t i) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;231    
;;;232    	pBtn = &s_tBtn[i];
000004  492a              LDR      r1,|L4.176|
000006  0100              LSLS     r0,r0,#4
000008  4d2a              LDR      r5,|L4.180|
00000a  1840              ADDS     r0,r0,r1
;;;233    	sta = pBtn->IsKeyDownFunc();
00000c  6068              STR      r0,[r5,#4]  ; pBtn
00000e  6800              LDR      r0,[r0,#0]
000010  4780              BLX      r0
;;;234    	if (sta) {
;;;235    		if (pBtn->Count < KEY_FILTER_TIME) {
;;;236    			pBtn->Count = KEY_FILTER_TIME;
;;;237    		} else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
;;;238    			pBtn->Count++;
;;;239    		} else {
;;;240    			if (pBtn->State == 0) {
;;;241    				pBtn->State = 1;
;;;242    
;;;243    				/* 发送按钮按下的消息 */
;;;244    				bsp_PutKey((uint8_t)(3 * i + 1));
000012  0062              LSLS     r2,r4,#1
000014  2105              MOVS     r1,#5                 ;236
000016  18a3              ADDS     r3,r4,r2
000018  2600              MOVS     r6,#0
00001a  7028              STRB     r0,[r5,#0]            ;233
00001c  2800              CMP      r0,#0                 ;234
;;;245    			}
;;;246    
;;;247    			if (pBtn->LongTime > 0) {
;;;248    				if (pBtn->LongCount < pBtn->LongTime) {
;;;249    					/* 发送按钮持续按下的消息 */
;;;250    					if (++pBtn->LongCount == pBtn->LongTime) {
;;;251    						/* 键值放入按键FIFO */
;;;252    						bsp_PutKey((uint8_t)(3 * i + 3));
;;;253    					}
;;;254    				} else {
;;;255    					if (pBtn->RepeatSpeed > 0) {
;;;256    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
;;;257    							pBtn->RepeatCount = 0;
;;;258    							/* 常按键后，每隔10ms发送1个按键 */
;;;259    							bsp_PutKey((uint8_t)(3 * i + 1));
;;;260    						}
;;;261    					}
;;;262    				}
;;;263    			}
;;;264    		}
;;;265    	} else {
;;;266    		if (pBtn->Count > KEY_FILTER_TIME) {
00001e  6868              LDR      r0,[r5,#4]  ; pBtn
000020  7902              LDRB     r2,[r0,#4]
000022  d030              BEQ      |L4.134|
000024  2a05              CMP      r2,#5                 ;235
000026  d201              BCS      |L4.44|
000028  7101              STRB     r1,[r0,#4]            ;236
;;;267    			pBtn->Count = KEY_FILTER_TIME;
;;;268    		} else if (pBtn->Count != 0) {
;;;269    			pBtn->Count--;
;;;270    		} else {
;;;271    			if (pBtn->State == 1) {
;;;272    				pBtn->State = 0;
;;;273    
;;;274    				/* 发送按钮弹起的消息 */
;;;275    				bsp_PutKey((uint8_t)(3 * i + 2));
;;;276    			}
;;;277    		}
;;;278    		pBtn->LongCount = 0;
;;;279    		pBtn->RepeatCount = 0;
;;;280    	}
;;;281    }
00002a  bd70              POP      {r4-r6,pc}
                  |L4.44|
00002c  2a0a              CMP      r2,#0xa               ;237
00002e  d202              BCS      |L4.54|
000030  1c52              ADDS     r2,r2,#1              ;237
000032  7102              STRB     r2,[r0,#4]            ;238
                  |L4.52|
000034  bd70              POP      {r4-r6,pc}
                  |L4.54|
000036  0062              LSLS     r2,r4,#1              ;244
000038  7a81              LDRB     r1,[r0,#0xa]          ;240
00003a  18a4              ADDS     r4,r4,r2              ;244
00003c  1c64              ADDS     r4,r4,#1              ;244
00003e  2900              CMP      r1,#0                 ;240
000040  d104              BNE      |L4.76|
000042  2101              MOVS     r1,#1                 ;241
000044  7281              STRB     r1,[r0,#0xa]          ;241
000046  b2e0              UXTB     r0,r4                 ;244
000048  f7fffffe          BL       bsp_PutKey
                  |L4.76|
00004c  6868              LDR      r0,[r5,#4]            ;247  ; pBtn
00004e  8901              LDRH     r1,[r0,#8]            ;247
000050  2900              CMP      r1,#0                 ;247
000052  d0ef              BEQ      |L4.52|
000054  88c2              LDRH     r2,[r0,#6]            ;248
000056  428a              CMP      r2,r1                 ;248
000058  d207              BCS      |L4.106|
00005a  1c52              ADDS     r2,r2,#1              ;248
00005c  b292              UXTH     r2,r2                 ;250
00005e  80c2              STRH     r2,[r0,#6]            ;250
000060  428a              CMP      r2,r1                 ;250
000062  d1e7              BNE      |L4.52|
000064  1cdb              ADDS     r3,r3,#3              ;250
000066  b2d8              UXTB     r0,r3                 ;252
000068  e00a              B        |L4.128|
                  |L4.106|
00006a  7ac1              LDRB     r1,[r0,#0xb]          ;255
00006c  2900              CMP      r1,#0                 ;255
00006e  d0e1              BEQ      |L4.52|
000070  7b02              LDRB     r2,[r0,#0xc]          ;256
000072  1c52              ADDS     r2,r2,#1              ;256
000074  b2d2              UXTB     r2,r2                 ;256
000076  7302              STRB     r2,[r0,#0xc]          ;256
000078  428a              CMP      r2,r1                 ;256
00007a  d3db              BCC      |L4.52|
00007c  7306              STRB     r6,[r0,#0xc]          ;257
00007e  b2e0              UXTB     r0,r4                 ;259
                  |L4.128|
000080  f7fffffe          BL       bsp_PutKey
000084  bd70              POP      {r4-r6,pc}
                  |L4.134|
000086  2a05              CMP      r2,#5                 ;266
000088  d901              BLS      |L4.142|
00008a  7101              STRB     r1,[r0,#4]            ;267
00008c  e00c              B        |L4.168|
                  |L4.142|
00008e  2a00              CMP      r2,#0                 ;268
000090  d002              BEQ      |L4.152|
000092  1e52              SUBS     r2,r2,#1              ;268
000094  7102              STRB     r2,[r0,#4]            ;269
000096  e007              B        |L4.168|
                  |L4.152|
000098  7a81              LDRB     r1,[r0,#0xa]          ;271
00009a  2901              CMP      r1,#1                 ;271
00009c  d104              BNE      |L4.168|
00009e  7286              STRB     r6,[r0,#0xa]          ;272
0000a0  1c9b              ADDS     r3,r3,#2              ;272
0000a2  b2d8              UXTB     r0,r3                 ;275
0000a4  f7fffffe          BL       bsp_PutKey
                  |L4.168|
0000a8  6868              LDR      r0,[r5,#4]            ;278  ; pBtn
0000aa  80c6              STRH     r6,[r0,#6]            ;278
0000ac  7306              STRB     r6,[r0,#0xc]          ;279
0000ae  bd70              POP      {r4-r6,pc}
;;;282    
                          ENDP

                  |L4.176|
                          DCD      ||.bss||
                  |L4.180|
                          DCD      ||.data||

                          AREA ||i.bsp_GetKey||, CODE, READONLY, ALIGN=2

                  bsp_GetKey PROC
;;;89      */
;;;90     uint8_t bsp_GetKey(void) {
000000  4a07              LDR      r2,|L5.32|
;;;91     	uint8_t ret;
;;;92     
;;;93     	if (s_tKey.Read == s_tKey.Write) {
000002  7a91              LDRB     r1,[r2,#0xa]  ; s_tKey
000004  7ad0              LDRB     r0,[r2,#0xb]  ; s_tKey
000006  4281              CMP      r1,r0
000008  d101              BNE      |L5.14|
;;;94     		return KEY_NONE;
00000a  2000              MOVS     r0,#0
                  |L5.12|
;;;95     	} else {
;;;96     		ret = s_tKey.Buf[s_tKey.Read];
;;;97     
;;;98     		if (++s_tKey.Read >= KEY_FIFO_SIZE) {
;;;99     			s_tKey.Read = 0;
;;;100    		}
;;;101    		return ret;
;;;102    	}
;;;103    }
00000c  4770              BX       lr
                  |L5.14|
00000e  5c50              LDRB     r0,[r2,r1]            ;96
000010  1c49              ADDS     r1,r1,#1              ;96
000012  b2c9              UXTB     r1,r1                 ;98
000014  7291              STRB     r1,[r2,#0xa]          ;98
000016  290a              CMP      r1,#0xa               ;98
000018  d3f8              BCC      |L5.12|
00001a  2100              MOVS     r1,#0                 ;99
00001c  7291              STRB     r1,[r2,#0xa]          ;99
00001e  4770              BX       lr
;;;104    
                          ENDP

                  |L5.32|
                          DCD      ||.bss||+0x20

                          AREA ||i.bsp_GetKey2||, CODE, READONLY, ALIGN=2

                  bsp_GetKey2 PROC
;;;112     */
;;;113    uint8_t bsp_GetKey2(void) {
000000  4a07              LDR      r2,|L6.32|
;;;114    	uint8_t ret;
;;;115    
;;;116    	if (s_tKey.Read2 == s_tKey.Write) {
000002  7b11              LDRB     r1,[r2,#0xc]  ; s_tKey
000004  7ad0              LDRB     r0,[r2,#0xb]  ; s_tKey
000006  4281              CMP      r1,r0
000008  d101              BNE      |L6.14|
;;;117    		return KEY_NONE;
00000a  2000              MOVS     r0,#0
                  |L6.12|
;;;118    	} else {
;;;119    		ret = s_tKey.Buf[s_tKey.Read2];
;;;120    
;;;121    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
;;;122    			s_tKey.Read2 = 0;
;;;123    		}
;;;124    		return ret;
;;;125    	}
;;;126    }
00000c  4770              BX       lr
                  |L6.14|
00000e  5c50              LDRB     r0,[r2,r1]            ;119
000010  1c49              ADDS     r1,r1,#1              ;119
000012  b2c9              UXTB     r1,r1                 ;121
000014  7311              STRB     r1,[r2,#0xc]          ;121
000016  290a              CMP      r1,#0xa               ;121
000018  d3f8              BCC      |L6.12|
00001a  2100              MOVS     r1,#0                 ;122
00001c  7311              STRB     r1,[r2,#0xc]          ;122
00001e  4770              BX       lr
;;;127    
                          ENDP

                  |L6.32|
                          DCD      ||.bss||+0x20

                          AREA ||i.bsp_GetKeyState||, CODE, READONLY, ALIGN=2

                  bsp_GetKeyState PROC
;;;135     */
;;;136    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
000000  4902              LDR      r1,|L7.12|
;;;137    	return s_tBtn[_ucKeyID].State;
000002  0100              LSLS     r0,r0,#4
000004  1840              ADDS     r0,r0,r1
000006  7a80              LDRB     r0,[r0,#0xa]
;;;138    }
000008  4770              BX       lr
;;;139    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      ||.bss||

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=2

                  bsp_InitKey PROC
;;;60      */
;;;61     void bsp_InitKey(void) {
000000  b510              PUSH     {r4,lr}
;;;62     	bsp_InitKeyVar(); /* 初始化按键变量 */
000002  f7fffffe          BL       bsp_InitKeyVar
000006  4c08              LDR      r4,|L8.40|
000008  2203              MOVS     r2,#3
00000a  2102              MOVS     r1,#2
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GPIO_SetMode
000012  2203              MOVS     r2,#3
000014  2104              MOVS     r1,#4
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       GPIO_SetMode
00001c  4803              LDR      r0,|L8.44|
00001e  2101              MOVS     r1,#1
000020  6241              STR      r1,[r0,#0x24]
000022  6281              STR      r1,[r0,#0x28]
;;;63     	bsp_InitKeyHard(); /* 初始化按键硬件 */
;;;64     }
000024  bd10              POP      {r4,pc}
;;;65     
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      0x500040c0
                  |L8.44|
                          DCD      0x50004240

                          AREA ||i.bsp_InitKeyVar||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyVar PROC
;;;193     */
;;;194    static void bsp_InitKeyVar(void) {
000000  b530              PUSH     {r4,r5,lr}
;;;195    	uint8_t i;
;;;196    
;;;197    	/* 对按键FIFO读写指针清零 */
;;;198    	s_tKey.Read = 0;
000002  480d              LDR      r0,|L9.56|
000004  2200              MOVS     r2,#0
000006  7282              STRB     r2,[r0,#0xa]
;;;199    	s_tKey.Write = 0;
;;;200    	s_tKey.Read2 = 0;
;;;201    
;;;202    	/* 给每个按键结构体成员变量赋一组缺省值 */
;;;203    	for (i = 0; i < KEY_COUNT; i++) {
;;;204    		s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
000008  4603              MOV      r3,r0
00000a  72c2              STRB     r2,[r0,#0xb]          ;199
00000c  2464              MOVS     r4,#0x64
00000e  3b20              SUBS     r3,r3,#0x20
000010  7302              STRB     r2,[r0,#0xc]          ;200
000012  4611              MOV      r1,r2                 ;203
;;;205    		s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
000014  2502              MOVS     r5,#2
                  |L9.22|
000016  0108              LSLS     r0,r1,#4              ;204
000018  18c0              ADDS     r0,r0,r3              ;204
00001a  8104              STRH     r4,[r0,#8]            ;204
00001c  7105              STRB     r5,[r0,#4]
;;;206    		s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
00001e  7282              STRB     r2,[r0,#0xa]
;;;207    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 按键按下的键值代码 */
;;;208    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* 按键弹起的键值代码 */
;;;209    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 按键被持续按下的键值代码 */
;;;210    		s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
;;;211    		s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
000020  1c49              ADDS     r1,r1,#1
000022  72c2              STRB     r2,[r0,#0xb]          ;210
000024  b2c9              UXTB     r1,r1                 ;203
000026  7302              STRB     r2,[r0,#0xc]
000028  2902              CMP      r1,#2                 ;203
00002a  d3f4              BCC      |L9.22|
;;;212    	}
;;;213    
;;;214    	/* 判断按键按下的函数 */
;;;215    	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
00002c  4803              LDR      r0,|L9.60|
;;;216    	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
00002e  6018              STR      r0,[r3,#0]  ; s_tBtn
000030  4803              LDR      r0,|L9.64|
000032  6118              STR      r0,[r3,#0x10]  ; s_tBtn
;;;217    
;;;218    }
000034  bd30              POP      {r4,r5,pc}
;;;219    
                          ENDP

000036  0000              DCW      0x0000
                  |L9.56|
                          DCD      ||.bss||+0x20
                  |L9.60|
                          DCD      IsKeyDown1
                  |L9.64|
                          DCD      IsKeyDown2

                          AREA ||i.bsp_KeyScan||, CODE, READONLY, ALIGN=1

                  bsp_KeyScan PROC
;;;290     */
;;;291    void bsp_KeyScan(void) {
000000  b510              PUSH     {r4,lr}
;;;292    	uint8_t i;
;;;293    
;;;294    	for (i = 0; i < KEY_COUNT; i++) {
000002  2400              MOVS     r4,#0
                  |L10.4|
;;;295    		bsp_DetectKey(i);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       bsp_DetectKey
00000a  1c64              ADDS     r4,r4,#1
00000c  b2e4              UXTB     r4,r4                 ;294
00000e  2c02              CMP      r4,#2                 ;294
000010  d3f8              BCC      |L10.4|
;;;296    	}
;;;297    }
000012  bd10              POP      {r4,pc}
;;;298    
                          ENDP


                          AREA ||i.bsp_PutKey||, CODE, READONLY, ALIGN=2

                  bsp_PutKey PROC
;;;73      */
;;;74     void bsp_PutKey(uint8_t _KeyCode) {
000000  4905              LDR      r1,|L11.24|
;;;75     	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000002  7aca              LDRB     r2,[r1,#0xb]  ; s_tKey
000004  5488              STRB     r0,[r1,r2]
;;;76     
;;;77     	if (++s_tKey.Write >= KEY_FIFO_SIZE) {
000006  7ac8              LDRB     r0,[r1,#0xb]  ; s_tKey
000008  1c40              ADDS     r0,r0,#1
00000a  b2c0              UXTB     r0,r0
00000c  72c8              STRB     r0,[r1,#0xb]
00000e  280a              CMP      r0,#0xa
000010  d301              BCC      |L11.22|
;;;78     		s_tKey.Write = 0;
000012  2000              MOVS     r0,#0
000014  72c8              STRB     r0,[r1,#0xb]
                  |L11.22|
;;;79     	}
;;;80     }
000016  4770              BX       lr
;;;81     
                          ENDP

                  |L11.24|
                          DCD      ||.bss||+0x20

                          AREA ||i.bsp_SetKeyParam||, CODE, READONLY, ALIGN=2

                  bsp_SetKeyParam PROC
;;;149     */
;;;150    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
000000  0103              LSLS     r3,r0,#4
;;;151    	s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
000002  4803              LDR      r0,|L12.16|
000004  1818              ADDS     r0,r3,r0
000006  8101              STRH     r1,[r0,#8]
;;;152    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
000008  72c2              STRB     r2,[r0,#0xb]
;;;153    	s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
00000a  2100              MOVS     r1,#0
00000c  7301              STRB     r1,[r0,#0xc]
;;;154    }
00000e  4770              BX       lr
;;;155    
                          ENDP

                  |L12.16|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tBtn
                          %        32
                  s_tKey
                          %        13

                          AREA ||.data||, DATA, ALIGN=2

                  ||sta||
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  pBtn
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Bsp\\src\\bsp_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_bsp_key_c_dc6aca1d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REVSH|
#line 402
|__asm___9_bsp_key_c_dc6aca1d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
