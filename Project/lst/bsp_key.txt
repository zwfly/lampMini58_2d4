; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_key.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bsp_key.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\bsp_key.crf ..\Bsp\src\bsp_key.c]
                          THUMB

                          AREA ||i.IsKeyDown1||, CODE, READONLY, ALIGN=2

                  IsKeyDown1 PROC
;;;33     
;;;34     static uint8_t IsKeyDown1(void) {
000000  4802              LDR      r0,|L1.12|
;;;35     	return ~P31;
000002  6a40              LDR      r0,[r0,#0x24]
000004  43c0              MVNS     r0,r0
000006  b2c0              UXTB     r0,r0
;;;36     }
000008  4770              BX       lr
;;;37     
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x50004240

                          AREA ||i.IsKeyDown2||, CODE, READONLY, ALIGN=2

                  IsKeyDown2 PROC
;;;37     
;;;38     static uint8_t IsKeyDown2(void) {
000000  4802              LDR      r0,|L2.12|
;;;39     	return ~P32;
000002  6a80              LDR      r0,[r0,#0x28]
000004  43c0              MVNS     r0,r0
000006  b2c0              UXTB     r0,r0
;;;40     }
000008  4770              BX       lr
;;;41     /*
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x50004240

                          AREA ||i.bsp_ClearKey||, CODE, READONLY, ALIGN=2

                  bsp_ClearKey PROC
;;;151     */
;;;152    void bsp_ClearKey(void) {
000000  4801              LDR      r0,|L3.8|
;;;153    	s_tKey.Read = s_tKey.Write;
000002  7ac1              LDRB     r1,[r0,#0xb]  ; s_tKey
000004  7281              STRB     r1,[r0,#0xa]
;;;154    }
000006  4770              BX       lr
;;;155    
                          ENDP

                  |L3.8|
                          DCD      ||.bss||+0x20

                          AREA ||i.bsp_DetectKey||, CODE, READONLY, ALIGN=2

                  bsp_DetectKey PROC
;;;213    KEY_T *pBtn;
;;;214    static void bsp_DetectKey(uint8_t i) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;215    	pBtn = &s_tBtn[i];
000004  492a              LDR      r1,|L4.176|
000006  0100              LSLS     r0,r0,#4
000008  4d2a              LDR      r5,|L4.180|
00000a  1840              ADDS     r0,r0,r1
;;;216    	if (pBtn->IsKeyDownFunc()) {
00000c  6028              STR      r0,[r5,#0]  ; pBtn
00000e  6800              LDR      r0,[r0,#0]
000010  4780              BLX      r0
;;;217    		if (pBtn->Count < KEY_FILTER_TIME) {
;;;218    			pBtn->Count = KEY_FILTER_TIME;
;;;219    		} else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
;;;220    			pBtn->Count++;
;;;221    		} else {
;;;222    			if (pBtn->State == 0) {
;;;223    				pBtn->State = 1;
;;;224    
;;;225    				/* 发送按钮按下的消息 */
;;;226    				bsp_PutKey((uint8_t)(3 * i + 1));
000012  0062              LSLS     r2,r4,#1
000014  2105              MOVS     r1,#5                 ;218
000016  18a3              ADDS     r3,r4,r2
000018  2600              MOVS     r6,#0
00001a  2800              CMP      r0,#0                 ;216
;;;227    			}
;;;228    
;;;229    			if (pBtn->LongTime > 0) {
;;;230    				if (pBtn->LongCount < pBtn->LongTime) {
;;;231    					/* 发送按钮持续按下的消息 */
;;;232    					if (++pBtn->LongCount == pBtn->LongTime) {
;;;233    						/* 键值放入按键FIFO */
;;;234    						bsp_PutKey((uint8_t)(3 * i + 3));
;;;235    					}
;;;236    				} else {
;;;237    					if (pBtn->RepeatSpeed > 0) {
;;;238    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
;;;239    							pBtn->RepeatCount = 0;
;;;240    							/* 常按键后，每隔10ms发送1个按键 */
;;;241    							bsp_PutKey((uint8_t)(3 * i + 1));
;;;242    						}
;;;243    					}
;;;244    				}
;;;245    			}
;;;246    		}
;;;247    	} else {
;;;248    		if (pBtn->Count > KEY_FILTER_TIME) {
00001c  6828              LDR      r0,[r5,#0]  ; pBtn
00001e  7902              LDRB     r2,[r0,#4]
000020  d030              BEQ      |L4.132|
000022  2a05              CMP      r2,#5                 ;217
000024  d201              BCS      |L4.42|
000026  7101              STRB     r1,[r0,#4]            ;218
;;;249    			pBtn->Count = KEY_FILTER_TIME;
;;;250    		} else if (pBtn->Count != 0) {
;;;251    			pBtn->Count--;
;;;252    		} else {
;;;253    			if (pBtn->State == 1) {
;;;254    				pBtn->State = 0;
;;;255    
;;;256    				/* 发送按钮弹起的消息 */
;;;257    				bsp_PutKey((uint8_t)(3 * i + 2));
;;;258    			}
;;;259    		}
;;;260    		pBtn->LongCount = 0;
;;;261    		pBtn->RepeatCount = 0;
;;;262    	}
;;;263    }
000028  bd70              POP      {r4-r6,pc}
                  |L4.42|
00002a  2a0a              CMP      r2,#0xa               ;219
00002c  d202              BCS      |L4.52|
00002e  1c52              ADDS     r2,r2,#1              ;219
000030  7102              STRB     r2,[r0,#4]            ;220
                  |L4.50|
000032  bd70              POP      {r4-r6,pc}
                  |L4.52|
000034  0062              LSLS     r2,r4,#1              ;226
000036  7a81              LDRB     r1,[r0,#0xa]          ;222
000038  18a4              ADDS     r4,r4,r2              ;226
00003a  1c64              ADDS     r4,r4,#1              ;226
00003c  2900              CMP      r1,#0                 ;222
00003e  d104              BNE      |L4.74|
000040  2101              MOVS     r1,#1                 ;223
000042  7281              STRB     r1,[r0,#0xa]          ;223
000044  b2e0              UXTB     r0,r4                 ;226
000046  f7fffffe          BL       bsp_PutKey
                  |L4.74|
00004a  6828              LDR      r0,[r5,#0]            ;229  ; pBtn
00004c  8901              LDRH     r1,[r0,#8]            ;229
00004e  2900              CMP      r1,#0                 ;229
000050  d0ef              BEQ      |L4.50|
000052  88c2              LDRH     r2,[r0,#6]            ;230
000054  428a              CMP      r2,r1                 ;230
000056  d207              BCS      |L4.104|
000058  1c52              ADDS     r2,r2,#1              ;230
00005a  b292              UXTH     r2,r2                 ;232
00005c  80c2              STRH     r2,[r0,#6]            ;232
00005e  428a              CMP      r2,r1                 ;232
000060  d1e7              BNE      |L4.50|
000062  1cdb              ADDS     r3,r3,#3              ;232
000064  b2d8              UXTB     r0,r3                 ;234
000066  e00a              B        |L4.126|
                  |L4.104|
000068  7ac1              LDRB     r1,[r0,#0xb]          ;237
00006a  2900              CMP      r1,#0                 ;237
00006c  d0e1              BEQ      |L4.50|
00006e  7b02              LDRB     r2,[r0,#0xc]          ;238
000070  1c52              ADDS     r2,r2,#1              ;238
000072  b2d2              UXTB     r2,r2                 ;238
000074  7302              STRB     r2,[r0,#0xc]          ;238
000076  428a              CMP      r2,r1                 ;238
000078  d3db              BCC      |L4.50|
00007a  7306              STRB     r6,[r0,#0xc]          ;239
00007c  b2e0              UXTB     r0,r4                 ;241
                  |L4.126|
00007e  f7fffffe          BL       bsp_PutKey
000082  bd70              POP      {r4-r6,pc}
                  |L4.132|
000084  2a05              CMP      r2,#5                 ;248
000086  d901              BLS      |L4.140|
000088  7101              STRB     r1,[r0,#4]            ;249
00008a  e00c              B        |L4.166|
                  |L4.140|
00008c  2a00              CMP      r2,#0                 ;250
00008e  d002              BEQ      |L4.150|
000090  1e52              SUBS     r2,r2,#1              ;250
000092  7102              STRB     r2,[r0,#4]            ;251
000094  e007              B        |L4.166|
                  |L4.150|
000096  7a81              LDRB     r1,[r0,#0xa]          ;253
000098  2901              CMP      r1,#1                 ;253
00009a  d104              BNE      |L4.166|
00009c  7286              STRB     r6,[r0,#0xa]          ;254
00009e  1c9b              ADDS     r3,r3,#2              ;254
0000a0  b2d8              UXTB     r0,r3                 ;257
0000a2  f7fffffe          BL       bsp_PutKey
                  |L4.166|
0000a6  6828              LDR      r0,[r5,#0]            ;260  ; pBtn
0000a8  80c6              STRH     r6,[r0,#6]            ;260
0000aa  7306              STRB     r6,[r0,#0xc]          ;261
0000ac  bd70              POP      {r4-r6,pc}
;;;264    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      ||.bss||
                  |L4.180|
                          DCD      ||.data||

                          AREA ||i.bsp_GetKey||, CODE, READONLY, ALIGN=2

                  bsp_GetKey PROC
;;;77      */
;;;78     uint8_t bsp_GetKey(void) {
000000  4a07              LDR      r2,|L5.32|
;;;79     	uint8_t ret;
;;;80     
;;;81     	if (s_tKey.Read == s_tKey.Write) {
000002  7a91              LDRB     r1,[r2,#0xa]  ; s_tKey
000004  7ad0              LDRB     r0,[r2,#0xb]  ; s_tKey
000006  4281              CMP      r1,r0
000008  d101              BNE      |L5.14|
;;;82     		return KEY_NONE;
00000a  2000              MOVS     r0,#0
                  |L5.12|
;;;83     	} else {
;;;84     		ret = s_tKey.Buf[s_tKey.Read];
;;;85     
;;;86     		if (++s_tKey.Read >= KEY_FIFO_SIZE) {
;;;87     			s_tKey.Read = 0;
;;;88     		}
;;;89     		return ret;
;;;90     	}
;;;91     }
00000c  4770              BX       lr
                  |L5.14|
00000e  5c50              LDRB     r0,[r2,r1]            ;84
000010  1c49              ADDS     r1,r1,#1              ;84
000012  b2c9              UXTB     r1,r1                 ;86
000014  7291              STRB     r1,[r2,#0xa]          ;86
000016  290a              CMP      r1,#0xa               ;86
000018  d3f8              BCC      |L5.12|
00001a  2100              MOVS     r1,#0                 ;87
00001c  7291              STRB     r1,[r2,#0xa]          ;87
00001e  4770              BX       lr
;;;92     
                          ENDP

                  |L5.32|
                          DCD      ||.bss||+0x20

                          AREA ||i.bsp_GetKey2||, CODE, READONLY, ALIGN=2

                  bsp_GetKey2 PROC
;;;100     */
;;;101    uint8_t bsp_GetKey2(void) {
000000  4a07              LDR      r2,|L6.32|
;;;102    	uint8_t ret;
;;;103    
;;;104    	if (s_tKey.Read2 == s_tKey.Write) {
000002  7b11              LDRB     r1,[r2,#0xc]  ; s_tKey
000004  7ad0              LDRB     r0,[r2,#0xb]  ; s_tKey
000006  4281              CMP      r1,r0
000008  d101              BNE      |L6.14|
;;;105    		return KEY_NONE;
00000a  2000              MOVS     r0,#0
                  |L6.12|
;;;106    	} else {
;;;107    		ret = s_tKey.Buf[s_tKey.Read2];
;;;108    
;;;109    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
;;;110    			s_tKey.Read2 = 0;
;;;111    		}
;;;112    		return ret;
;;;113    	}
;;;114    }
00000c  4770              BX       lr
                  |L6.14|
00000e  5c50              LDRB     r0,[r2,r1]            ;107
000010  1c49              ADDS     r1,r1,#1              ;107
000012  b2c9              UXTB     r1,r1                 ;109
000014  7311              STRB     r1,[r2,#0xc]          ;109
000016  290a              CMP      r1,#0xa               ;109
000018  d3f8              BCC      |L6.12|
00001a  2100              MOVS     r1,#0                 ;110
00001c  7311              STRB     r1,[r2,#0xc]          ;110
00001e  4770              BX       lr
;;;115    
                          ENDP

                  |L6.32|
                          DCD      ||.bss||+0x20

                          AREA ||i.bsp_GetKeyState||, CODE, READONLY, ALIGN=2

                  bsp_GetKeyState PROC
;;;123     */
;;;124    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
000000  4902              LDR      r1,|L7.12|
;;;125    	return s_tBtn[_ucKeyID].State;
000002  0100              LSLS     r0,r0,#4
000004  1840              ADDS     r0,r0,r1
000006  7a80              LDRB     r0,[r0,#0xa]
;;;126    }
000008  4770              BX       lr
;;;127    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      ||.bss||

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=2

                  bsp_InitKey PROC
;;;48      */
;;;49     void bsp_InitKey(void) {
000000  b510              PUSH     {r4,lr}
;;;50     	bsp_InitKeyVar(); /* 初始化按键变量 */
000002  f7fffffe          BL       bsp_InitKeyVar
000006  4c06              LDR      r4,|L8.32|
000008  2200              MOVS     r2,#0
00000a  2102              MOVS     r1,#2
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GPIO_SetMode
000012  2200              MOVS     r2,#0
000014  2104              MOVS     r1,#4
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       GPIO_SetMode
;;;51     	bsp_InitKeyHard(); /* 初始化按键硬件 */
;;;52     }
00001c  bd10              POP      {r4,pc}
;;;53     
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      0x500040c0

                          AREA ||i.bsp_InitKeyVar||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyVar PROC
;;;178     */
;;;179    static void bsp_InitKeyVar(void) {
000000  b530              PUSH     {r4,r5,lr}
;;;180    	uint8_t i;
;;;181    
;;;182    	/* 对按键FIFO读写指针清零 */
;;;183    	s_tKey.Read = 0;
000002  480d              LDR      r0,|L9.56|
000004  2200              MOVS     r2,#0
000006  7282              STRB     r2,[r0,#0xa]
;;;184    	s_tKey.Write = 0;
;;;185    	s_tKey.Read2 = 0;
;;;186    
;;;187    	/* 给每个按键结构体成员变量赋一组缺省值 */
;;;188    	for (i = 0; i < KEY_COUNT; i++) {
;;;189    		s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
000008  4603              MOV      r3,r0
00000a  72c2              STRB     r2,[r0,#0xb]          ;184
00000c  2464              MOVS     r4,#0x64
00000e  3b20              SUBS     r3,r3,#0x20
000010  7302              STRB     r2,[r0,#0xc]          ;185
000012  4611              MOV      r1,r2                 ;188
;;;190    		s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
000014  2502              MOVS     r5,#2
                  |L9.22|
000016  0108              LSLS     r0,r1,#4              ;189
000018  18c0              ADDS     r0,r0,r3              ;189
00001a  8104              STRH     r4,[r0,#8]            ;189
00001c  7105              STRB     r5,[r0,#4]
;;;191    		s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
00001e  7282              STRB     r2,[r0,#0xa]
;;;192    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 按键按下的键值代码 */
;;;193    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* 按键弹起的键值代码 */
;;;194    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 按键被持续按下的键值代码 */
;;;195    		s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
;;;196    		s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
000020  1c49              ADDS     r1,r1,#1
000022  72c2              STRB     r2,[r0,#0xb]          ;195
000024  b2c9              UXTB     r1,r1                 ;188
000026  7302              STRB     r2,[r0,#0xc]
000028  2902              CMP      r1,#2                 ;188
00002a  d3f4              BCC      |L9.22|
;;;197    	}
;;;198    
;;;199    	/* 判断按键按下的函数 */
;;;200    	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
00002c  4803              LDR      r0,|L9.60|
;;;201    	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
00002e  6018              STR      r0,[r3,#0]  ; s_tBtn
000030  4803              LDR      r0,|L9.64|
000032  6118              STR      r0,[r3,#0x10]  ; s_tBtn
;;;202    
;;;203    }
000034  bd30              POP      {r4,r5,pc}
;;;204    
                          ENDP

000036  0000              DCW      0x0000
                  |L9.56|
                          DCD      ||.bss||+0x20
                  |L9.60|
                          DCD      IsKeyDown1
                  |L9.64|
                          DCD      IsKeyDown2

                          AREA ||i.bsp_KeyScan||, CODE, READONLY, ALIGN=1

                  bsp_KeyScan PROC
;;;272     */
;;;273    void bsp_KeyScan(void) {
000000  b510              PUSH     {r4,lr}
;;;274    	uint8_t i;
;;;275    
;;;276    	for (i = 0; i < KEY_COUNT; i++) {
000002  2400              MOVS     r4,#0
                  |L10.4|
;;;277    		bsp_DetectKey(i);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       bsp_DetectKey
00000a  1c64              ADDS     r4,r4,#1
00000c  b2e4              UXTB     r4,r4                 ;276
00000e  2c02              CMP      r4,#2                 ;276
000010  d3f8              BCC      |L10.4|
;;;278    	}
;;;279    }
000012  bd10              POP      {r4,pc}
;;;280    
                          ENDP


                          AREA ||i.bsp_PutKey||, CODE, READONLY, ALIGN=2

                  bsp_PutKey PROC
;;;61      */
;;;62     void bsp_PutKey(uint8_t _KeyCode) {
000000  4905              LDR      r1,|L11.24|
;;;63     	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000002  7aca              LDRB     r2,[r1,#0xb]  ; s_tKey
000004  5488              STRB     r0,[r1,r2]
;;;64     
;;;65     	if (++s_tKey.Write >= KEY_FIFO_SIZE) {
000006  7ac8              LDRB     r0,[r1,#0xb]  ; s_tKey
000008  1c40              ADDS     r0,r0,#1
00000a  b2c0              UXTB     r0,r0
00000c  72c8              STRB     r0,[r1,#0xb]
00000e  280a              CMP      r0,#0xa
000010  d301              BCC      |L11.22|
;;;66     		s_tKey.Write = 0;
000012  2000              MOVS     r0,#0
000014  72c8              STRB     r0,[r1,#0xb]
                  |L11.22|
;;;67     	}
;;;68     }
000016  4770              BX       lr
;;;69     
                          ENDP

                  |L11.24|
                          DCD      ||.bss||+0x20

                          AREA ||i.bsp_SetKeyParam||, CODE, READONLY, ALIGN=2

                  bsp_SetKeyParam PROC
;;;137     */
;;;138    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
000000  0103              LSLS     r3,r0,#4
;;;139    	s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
000002  4803              LDR      r0,|L12.16|
000004  1818              ADDS     r0,r3,r0
000006  8101              STRH     r1,[r0,#8]
;;;140    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
000008  72c2              STRB     r2,[r0,#0xb]
;;;141    	s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
00000a  2100              MOVS     r1,#0
00000c  7301              STRB     r1,[r0,#0xc]
;;;142    }
00000e  4770              BX       lr
;;;143    
                          ENDP

                  |L12.16|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tBtn
                          %        32
                  s_tKey
                          %        13

                          AREA ||.data||, DATA, ALIGN=2

                  pBtn
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Bsp\\src\\bsp_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_bsp_key_c_dc6aca1d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REVSH|
#line 402
|__asm___9_bsp_key_c_dc6aca1d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
