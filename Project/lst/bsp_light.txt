; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_light.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bsp_light.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 --omf_browse=.\obj\bsp_light.crf ..\Bsp\src\bsp_light.c]
                          THUMB

                          AREA ||i.Light_InitHard||, CODE, READONLY, ALIGN=2

                  Light_InitHard PROC
;;;10     
;;;11     void Light_InitHard(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;12     
;;;13     	SYS_ResetModule(PWM0_RST);
000002  4837              LDR      r0,|L1.224|
000004  f7fffffe          BL       SYS_ResetModule
;;;14     
;;;15     	/* Enable IP clock */
;;;16     	CLK_EnableModuleClock(PWMCH01_MODULE);
000008  4c36              LDR      r4,|L1.228|
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       CLK_EnableModuleClock
;;;17     	CLK_EnableModuleClock(PWMCH45_MODULE);
000010  4d35              LDR      r5,|L1.232|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       CLK_EnableModuleClock
;;;18     
;;;19     	/* Select IP clock source */
;;;20     	CLK_SetModuleClock(PWMCH01_MODULE, CLK_CLKSEL1_PWMCH01SEL_HCLK, 0);
000018  2101              MOVS     r1,#1
00001a  2200              MOVS     r2,#0
00001c  0749              LSLS     r1,r1,#29
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       CLK_SetModuleClock
;;;21     	CLK_SetModuleClock(PWMCH45_MODULE, CLK_CLKSEL2_PWMCH45SEL_HCLK, 0);
000024  2200              MOVS     r2,#0
000026  2120              MOVS     r1,#0x20
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       CLK_SetModuleClock
;;;22     
;;;23     	SYS->P1_MFP |= SYS_MFP_P12_PWM0_CH0 | SYS_MFP_P13_PWM0_CH1
00002e  06a0              LSLS     r0,r4,#26
000030  6b41              LDR      r1,[r0,#0x34]
000032  2207              MOVS     r2,#7
000034  0692              LSLS     r2,r2,#26
000036  4311              ORRS     r1,r1,r2
000038  6341              STR      r1,[r0,#0x34]
;;;24     			| SYS_MFP_P14_PWM0_CH4;
;;;25     
;;;26     	// PWM-Timer 0 enable and Auto-reload
;;;27     	PWM->CTL = PWM_CTL_CNTEN0_Msk | PWM_CTL_CNTMODE0_Msk | PWM_CTL_CNTEN1_Msk
00003a  4c2d              LDR      r4,|L1.240|
00003c  482b              LDR      r0,|L1.236|
00003e  60a0              STR      r0,[r4,#8]
;;;28     			| PWM_CTL_CNTMODE1_Msk | PWM_CTL_CNTEN4_Msk | PWM_CTL_CNTMODE4_Msk;
;;;29     //	PWM->CTL = PWM_CTL_CNTEN1_Msk | PWM_CTL_CNTMODE1_Msk;
;;;30     //	PWM->CTL = PWM_CTL_CNTEN4_Msk | PWM_CTL_CNTMODE4_Msk;
;;;31     
;;;32     	PWM_SET_PRESCALER(PWM, 0, 3);
000040  6820              LDR      r0,[r4,#0]
000042  0a00              LSRS     r0,r0,#8
000044  0200              LSLS     r0,r0,#8
000046  1cc0              ADDS     r0,r0,#3
000048  6020              STR      r0,[r4,#0]
;;;33     	PWM_SET_DIVIDER(PWM, 0, PWM_CLK_DIV_1);
00004a  6860              LDR      r0,[r4,#4]
00004c  08c0              LSRS     r0,r0,#3
00004e  00c0              LSLS     r0,r0,#3
000050  1d00              ADDS     r0,r0,#4
000052  6060              STR      r0,[r4,#4]
;;;34     
;;;35     	PWM_SET_PRESCALER(PWM, 1, 3);
000054  6820              LDR      r0,[r4,#0]
000056  0a00              LSRS     r0,r0,#8
000058  0200              LSLS     r0,r0,#8
00005a  1cc0              ADDS     r0,r0,#3
00005c  6020              STR      r0,[r4,#0]
;;;36     	PWM_SET_DIVIDER(PWM, 1, PWM_CLK_DIV_1);
00005e  6860              LDR      r0,[r4,#4]
000060  2170              MOVS     r1,#0x70
000062  4388              BICS     r0,r0,r1
000064  3040              ADDS     r0,r0,#0x40
000066  6060              STR      r0,[r4,#4]
;;;37     
;;;38     	PWM_SET_PRESCALER(PWM, 4, 3);
000068  6820              LDR      r0,[r4,#0]
00006a  21ff              MOVS     r1,#0xff
00006c  0409              LSLS     r1,r1,#16
00006e  4388              BICS     r0,r0,r1
000070  2103              MOVS     r1,#3
000072  0409              LSLS     r1,r1,#16
000074  1840              ADDS     r0,r0,r1
000076  6020              STR      r0,[r4,#0]
;;;39     	PWM_SET_DIVIDER(PWM, 4, PWM_CLK_DIV_1);
000078  6860              LDR      r0,[r4,#4]
00007a  1291              ASRS     r1,r2,#10
00007c  4388              BICS     r0,r0,r1
00007e  2101              MOVS     r1,#1
000080  0489              LSLS     r1,r1,#18
000082  1840              ADDS     r0,r0,r1
000084  6060              STR      r0,[r4,#4]
;;;40     
;;;41     	// Set the PWM aligned type
;;;42     	PWM_SET_ALIGNED_TYPE(PWM, 0, PWM_CENTER_ALIGNED);
000086  68a1              LDR      r1,[r4,#8]
000088  0150              LSLS     r0,r2,#5
00008a  4301              ORRS     r1,r1,r0
00008c  60a1              STR      r1,[r4,#8]
;;;43     	PWM_SET_ALIGNED_TYPE(PWM, 1, PWM_CENTER_ALIGNED);
00008e  68a1              LDR      r1,[r4,#8]
000090  4301              ORRS     r1,r1,r0
000092  60a1              STR      r1,[r4,#8]
;;;44     	PWM_SET_ALIGNED_TYPE(PWM, 4, PWM_CENTER_ALIGNED);
000094  68a1              LDR      r1,[r4,#8]
000096  4301              ORRS     r1,r1,r0
000098  60a1              STR      r1,[r4,#8]
;;;45     
;;;46     	// Enable PWM channel 0 output
;;;47     	PWM_EnableOutput(PWM, BIT0);
00009a  2101              MOVS     r1,#1
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       PWM_EnableOutput
;;;48     	PWM_EnableOutput(PWM, BIT1);
0000a2  2102              MOVS     r1,#2
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       PWM_EnableOutput
;;;49     	PWM_EnableOutput(PWM, BIT4);
0000aa  2110              MOVS     r1,#0x10
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       PWM_EnableOutput
;;;50     	// Start
;;;51     	PWM_Start(PWM, BIT0);
0000b2  2101              MOVS     r1,#1
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       PWM_Start
;;;52     	PWM_Start(PWM, BIT1);
0000ba  2102              MOVS     r1,#2
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       PWM_Start
;;;53     	PWM_Start(PWM, BIT4);
0000c2  2110              MOVS     r1,#0x10
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       PWM_Start
;;;54     
;;;55     	PWM_SET_CMR(PWM, 0, 10000);
0000ca  480a              LDR      r0,|L1.244|
0000cc  6260              STR      r0,[r4,#0x24]
;;;56     	PWM_SET_CNR(PWM, 0, 0xFFFF);
0000ce  480a              LDR      r0,|L1.248|
0000d0  60e0              STR      r0,[r4,#0xc]
;;;57     
;;;58     	PWM_SET_CMR(PWM, 1, 20000);
0000d2  490a              LDR      r1,|L1.252|
0000d4  62a1              STR      r1,[r4,#0x28]
;;;59     	PWM_SET_CNR(PWM, 1, 0xFFFF);
0000d6  6120              STR      r0,[r4,#0x10]
;;;60     
;;;61     	PWM_SET_CMR(PWM, 4, 50000);
0000d8  4909              LDR      r1,|L1.256|
0000da  6361              STR      r1,[r4,#0x34]
;;;62     	PWM_SET_CNR(PWM, 4, 0xFFFF);
0000dc  61e0              STR      r0,[r4,#0x1c]
;;;63     
;;;64     	///////////////
;;;65     //	Light_bright_set(95);
;;;66     //	Light_RGB_set(0,50000,0);
;;;67     }
0000de  bd70              POP      {r4-r6,pc}
;;;68     static void Light_Red_set(uint16_t duty) {
                          ENDP

                  |L1.224|
                          DCD      0x04000014
                  |L1.228|
                          DCD      0xa7c00014
                  |L1.232|
                          DCD      0xe6400016
                  |L1.236|
                          DCD      0x00090099
                  |L1.240|
                          DCD      0x40040000
                  |L1.244|
                          DCD      0x00002710
                  |L1.248|
                          DCD      0x0000ffff
                  |L1.252|
                          DCD      0x00004e20
                  |L1.256|
                          DCD      0x0000c350

                          AREA ||i.Light_RGB_set||, CODE, READONLY, ALIGN=2

                  Light_RGB_set PROC
;;;77     
;;;78     void Light_RGB_set(uint16_t r, uint16_t g, uint16_t b) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  460f              MOV      r7,r1
;;;79     	uint32_t tmp = 0;
;;;80     #if 1
;;;81     	tmp = r;
;;;82     	tmp *= dome_running_param.bright;
000004  490c              LDR      r1,|L2.56|
000006  4616              MOV      r6,r2                 ;78
000008  780c              LDRB     r4,[r1,#0]  ; dome_running_param
;;;83     	tmp /= 100;
00000a  2164              MOVS     r1,#0x64
00000c  4360              MULS     r0,r4,r0              ;82
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  4d0a              LDR      r5,|L2.60|
;;;84     	Light_Red_set(tmp & 0xFFFF);
000014  b280              UXTH     r0,r0
000016  62a8              STR      r0,[r5,#0x28]
000018  4620              MOV      r0,r4
;;;85     
;;;86     	tmp = g;
;;;87     	tmp *= dome_running_param.bright;
00001a  4378              MULS     r0,r7,r0
;;;88     	tmp /= 100;
00001c  2164              MOVS     r1,#0x64
00001e  f7fffffe          BL       __aeabi_uidivmod
;;;89     	Light_Green_set(tmp & 0xFFFF);
000022  b280              UXTH     r0,r0
000024  6268              STR      r0,[r5,#0x24]
000026  4620              MOV      r0,r4
;;;90     
;;;91     	tmp = b;
;;;92     	tmp *= dome_running_param.bright;
000028  4370              MULS     r0,r6,r0
;;;93     	tmp /= 100;
00002a  2164              MOVS     r1,#0x64
00002c  f7fffffe          BL       __aeabi_uidivmod
;;;94     	Light_Blue_set(tmp & 0xFFFF);
000030  b280              UXTH     r0,r0
000032  6368              STR      r0,[r5,#0x34]
;;;95     #else
;;;96     	Light_Red_set(0xFFFF);
;;;97     	Light_Green_set(0xFFFF);
;;;98     	Light_Blue_set(0xFFFF);
;;;99     #endif
;;;100    }
000034  bdf8              POP      {r3-r7,pc}
;;;101    void Light_bright_set(uint8_t br) {
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      dome_running_param
                  |L2.60|
                          DCD      0x40040000

                          AREA ||i.Light_bright_set||, CODE, READONLY, ALIGN=2

                  Light_bright_set PROC
;;;100    }
;;;101    void Light_bright_set(uint8_t br) {
000000  b510              PUSH     {r4,lr}
;;;102    //	uint16_t tmp = 0;
;;;103    #if 1
;;;104    	dome_running_param.bright = br;
000002  4b0a              LDR      r3,|L3.44|
;;;105    
;;;106    	if (dome_running_param.bright < 10) {
000004  280a              CMP      r0,#0xa
000006  7018              STRB     r0,[r3,#0]            ;104
000008  d201              BCS      |L3.14|
;;;107    		dome_running_param.bright = 10;
00000a  200a              MOVS     r0,#0xa
00000c  7018              STRB     r0,[r3,#0]
                  |L3.14|
;;;108    	}
;;;109    	Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
00000e  79d8              LDRB     r0,[r3,#7]  ; dome_running_param
000010  7999              LDRB     r1,[r3,#6]  ; dome_running_param
000012  0202              LSLS     r2,r0,#8
000014  7958              LDRB     r0,[r3,#5]  ; dome_running_param
000016  430a              ORRS     r2,r2,r1
000018  0201              LSLS     r1,r0,#8
00001a  791c              LDRB     r4,[r3,#4]  ; dome_running_param
00001c  78d8              LDRB     r0,[r3,#3]  ; dome_running_param
00001e  789b              LDRB     r3,[r3,#2]  ; dome_running_param
000020  0200              LSLS     r0,r0,#8
000022  4321              ORRS     r1,r1,r4
000024  4318              ORRS     r0,r0,r3
000026  f7fffffe          BL       Light_RGB_set
;;;110    			dome_running_param.color.B);
;;;111    #endif
;;;112    }
00002a  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  |L3.44|
                          DCD      dome_running_param

;*** Start embedded assembler ***

#line 1 "..\\Bsp\\src\\bsp_light.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_light_c_59940f01____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_bsp_light_c_59940f01____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_light_c_59940f01____REVSH|
#line 402
|__asm___11_bsp_light_c_59940f01____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
