; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_light.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bsp_light.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\bsp_light.crf ..\Bsp\src\bsp_light.c]
                          THUMB

                          AREA ||i.Light_InitHard||, CODE, READONLY, ALIGN=2

                  Light_InitHard PROC
;;;10     
;;;11     void Light_InitHard(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;12     
;;;13     	SYS_ResetModule(PWM0_RST);
000002  483a              LDR      r0,|L1.236|
000004  f7fffffe          BL       SYS_ResetModule
;;;14     
;;;15     	/* Enable IP clock */
;;;16     	CLK_EnableModuleClock(PWMCH01_MODULE);
000008  4c39              LDR      r4,|L1.240|
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       CLK_EnableModuleClock
;;;17     	CLK_EnableModuleClock(PWMCH45_MODULE);
000010  4d38              LDR      r5,|L1.244|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       CLK_EnableModuleClock
;;;18     
;;;19     	/* Select IP clock source */
;;;20     	CLK_SetModuleClock(PWMCH01_MODULE, CLK_CLKSEL1_PWMCH01SEL_HCLK, 0);
000018  2101              MOVS     r1,#1
00001a  2200              MOVS     r2,#0
00001c  0749              LSLS     r1,r1,#29
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       CLK_SetModuleClock
;;;21     	CLK_SetModuleClock(PWMCH45_MODULE, CLK_CLKSEL2_PWMCH45SEL_HCLK, 0);
000024  2200              MOVS     r2,#0
000026  2120              MOVS     r1,#0x20
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       CLK_SetModuleClock
;;;22     
;;;23     
;;;24     	SYS->P1_MFP |= SYS_MFP_P12_PWM0_CH0 | SYS_MFP_P13_PWM0_CH1
00002e  06a0              LSLS     r0,r4,#26
000030  6b41              LDR      r1,[r0,#0x34]
000032  2207              MOVS     r2,#7
000034  0692              LSLS     r2,r2,#26
000036  4311              ORRS     r1,r1,r2
000038  6341              STR      r1,[r0,#0x34]
;;;25     			| SYS_MFP_P14_PWM0_CH4;
;;;26     
;;;27     	// PWM-Timer 0 enable and Auto-reload
;;;28     	PWM->CTL = PWM_CTL_CNTEN0_Msk | PWM_CTL_CNTMODE0_Msk;
00003a  4c2f              LDR      r4,|L1.248|
00003c  2009              MOVS     r0,#9
00003e  60a0              STR      r0,[r4,#8]
;;;29     		PWM->CTL = PWM_CTL_CNTEN1_Msk | PWM_CTL_CNTMODE1_Msk;
000040  2090              MOVS     r0,#0x90
000042  60a0              STR      r0,[r4,#8]
;;;30     		PWM->CTL = PWM_CTL_CNTEN4_Msk | PWM_CTL_CNTMODE4_Msk;
000044  0300              LSLS     r0,r0,#12
000046  60a0              STR      r0,[r4,#8]
;;;31     	
;;;32     	
;;;33     	PWM_SET_PRESCALER(PWM, 0, 3);
000048  6820              LDR      r0,[r4,#0]
00004a  0a00              LSRS     r0,r0,#8
00004c  0200              LSLS     r0,r0,#8
00004e  1cc0              ADDS     r0,r0,#3
000050  6020              STR      r0,[r4,#0]
;;;34     	PWM_SET_DIVIDER(PWM, 0, PWM_CLK_DIV_1);
000052  6860              LDR      r0,[r4,#4]
000054  08c0              LSRS     r0,r0,#3
000056  00c0              LSLS     r0,r0,#3
000058  1d00              ADDS     r0,r0,#4
00005a  6060              STR      r0,[r4,#4]
;;;35     
;;;36     	PWM_SET_PRESCALER(PWM, 1, 3);
00005c  6820              LDR      r0,[r4,#0]
00005e  0a00              LSRS     r0,r0,#8
000060  0200              LSLS     r0,r0,#8
000062  1cc0              ADDS     r0,r0,#3
000064  6020              STR      r0,[r4,#0]
;;;37     	PWM_SET_DIVIDER(PWM, 1, PWM_CLK_DIV_1);
000066  6860              LDR      r0,[r4,#4]
000068  2170              MOVS     r1,#0x70
00006a  4388              BICS     r0,r0,r1
00006c  3040              ADDS     r0,r0,#0x40
00006e  6060              STR      r0,[r4,#4]
;;;38     
;;;39     	PWM_SET_PRESCALER(PWM, 4, 3);
000070  6820              LDR      r0,[r4,#0]
000072  21ff              MOVS     r1,#0xff
000074  0409              LSLS     r1,r1,#16
000076  4388              BICS     r0,r0,r1
000078  2103              MOVS     r1,#3
00007a  0409              LSLS     r1,r1,#16
00007c  1840              ADDS     r0,r0,r1
00007e  6020              STR      r0,[r4,#0]
;;;40     	PWM_SET_DIVIDER(PWM, 4, PWM_CLK_DIV_1);
000080  6860              LDR      r0,[r4,#4]
000082  1291              ASRS     r1,r2,#10
000084  4388              BICS     r0,r0,r1
000086  2101              MOVS     r1,#1
000088  0489              LSLS     r1,r1,#18
00008a  1840              ADDS     r0,r0,r1
00008c  6060              STR      r0,[r4,#4]
;;;41     
;;;42     	// Set the PWM aligned type
;;;43     	PWM_SET_ALIGNED_TYPE(PWM, 0, PWM_CENTER_ALIGNED);
00008e  68a1              LDR      r1,[r4,#8]
000090  0150              LSLS     r0,r2,#5
000092  4301              ORRS     r1,r1,r0
000094  60a1              STR      r1,[r4,#8]
;;;44     	PWM_SET_ALIGNED_TYPE(PWM, 1, PWM_CENTER_ALIGNED);
000096  68a1              LDR      r1,[r4,#8]
000098  4301              ORRS     r1,r1,r0
00009a  60a1              STR      r1,[r4,#8]
;;;45     	PWM_SET_ALIGNED_TYPE(PWM, 4, PWM_CENTER_ALIGNED);
00009c  68a1              LDR      r1,[r4,#8]
00009e  4301              ORRS     r1,r1,r0
0000a0  60a1              STR      r1,[r4,#8]
;;;46     
;;;47     	// Enable PWM channel 0 output
;;;48     	PWM_EnableOutput(PWM, BIT0);
0000a2  2101              MOVS     r1,#1
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       PWM_EnableOutput
;;;49     	PWM_EnableOutput(PWM, BIT1);
0000aa  2102              MOVS     r1,#2
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       PWM_EnableOutput
;;;50     	PWM_EnableOutput(PWM, BIT4);
0000b2  2110              MOVS     r1,#0x10
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       PWM_EnableOutput
;;;51     	// Start
;;;52     	PWM_Start(PWM, BIT0);
0000ba  2101              MOVS     r1,#1
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       PWM_Start
;;;53     	PWM_Start(PWM, BIT1);
0000c2  2102              MOVS     r1,#2
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       PWM_Start
;;;54     	PWM_Start(PWM, BIT4);
0000ca  2110              MOVS     r1,#0x10
0000cc  4620              MOV      r0,r4
0000ce  f7fffffe          BL       PWM_Start
;;;55     
;;;56     	PWM_SET_CMR(PWM, 0, 1000);
0000d2  207d              MOVS     r0,#0x7d
0000d4  00c0              LSLS     r0,r0,#3
0000d6  6260              STR      r0,[r4,#0x24]
;;;57     	PWM_SET_CNR(PWM, 0, 0xFFFF);
0000d8  4808              LDR      r0,|L1.252|
0000da  60e0              STR      r0,[r4,#0xc]
;;;58     
;;;59     	PWM_SET_CMR(PWM, 1, 20000);
0000dc  4908              LDR      r1,|L1.256|
0000de  62a1              STR      r1,[r4,#0x28]
;;;60     	PWM_SET_CNR(PWM, 1, 0xFFFF);
0000e0  6120              STR      r0,[r4,#0x10]
;;;61     
;;;62     	PWM_SET_CMR(PWM, 4, 50000);
0000e2  4908              LDR      r1,|L1.260|
0000e4  6361              STR      r1,[r4,#0x34]
;;;63     	PWM_SET_CNR(PWM, 4, 0xFFFF);
0000e6  61e0              STR      r0,[r4,#0x1c]
;;;64     
;;;65     //	Light_RGB_set(0, 0, 0);
;;;66     }
0000e8  bd70              POP      {r4-r6,pc}
;;;67     static void Light_Red_set(uint16_t duty) {
                          ENDP

0000ea  0000              DCW      0x0000
                  |L1.236|
                          DCD      0x04000014
                  |L1.240|
                          DCD      0xa7c00014
                  |L1.244|
                          DCD      0xe6400016
                  |L1.248|
                          DCD      0x40040000
                  |L1.252|
                          DCD      0x0000ffff
                  |L1.256|
                          DCD      0x00004e20
                  |L1.260|
                          DCD      0x0000c350

                          AREA ||i.Light_RGB_set||, CODE, READONLY, ALIGN=2

                  Light_RGB_set PROC
;;;76     
;;;77     void Light_RGB_set(uint16_t r, uint16_t g, uint16_t b) {
000000  4803              LDR      r0,|L2.16|
;;;78     	uint32_t tmp = 0;
;;;79     #if 0
;;;80     	tmp = r;
;;;81     	tmp *= dome_running_param.bright;
;;;82     	tmp /= 100;
;;;83     	Light_Red_set(tmp & 0xFFFF);
;;;84     
;;;85     	tmp = g;
;;;86     	tmp *= dome_running_param.bright;
;;;87     	tmp /= 100;
;;;88     	Light_Green_set(tmp & 0xFFFF);
;;;89     
;;;90     	tmp = b;
;;;91     	tmp *= dome_running_param.bright;
;;;92     	tmp /= 100;
;;;93     	Light_Blue_set(tmp & 0xFFFF);
;;;94     #else
;;;95     	Light_Red_set(0xFFFF);
000002  4902              LDR      r1,|L2.12|
000004  6281              STR      r1,[r0,#0x28]
000006  6241              STR      r1,[r0,#0x24]
000008  6341              STR      r1,[r0,#0x34]
;;;96     	Light_Green_set(0xFFFF);
;;;97     	Light_Blue_set(0xFFFF);
;;;98     #endif
;;;99     }
00000a  4770              BX       lr
;;;100    void Light_bright_set(uint8_t br) {
                          ENDP

                  |L2.12|
                          DCD      0x0000ffff
                  |L2.16|
                          DCD      0x40040000

                          AREA ||i.Light_bright_set||, CODE, READONLY, ALIGN=1

                  Light_bright_set PROC
;;;99     }
;;;100    void Light_bright_set(uint8_t br) {
000000  4770              BX       lr
;;;101    //	uint16_t tmp = 0;
;;;102    #if 0
;;;103    	dome_running_param.bright = br;
;;;104    
;;;105    	if (dome_running_param.bright < 10) {
;;;106    		dome_running_param.bright = 10;
;;;107    	}
;;;108    
;;;109    	Light_RGB_set(dome_running_param.color.R, dome_running_param.color.G,
;;;110    			dome_running_param.color.B);
;;;111    #endif
;;;112    }
;;;113    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Bsp\\src\\bsp_light.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_light_c_59940f01____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_bsp_light_c_59940f01____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_light_c_59940f01____REVSH|
#line 402
|__asm___11_bsp_light_c_59940f01____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
