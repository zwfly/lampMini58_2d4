; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_timer0.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bsp_timer0.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\bsp_timer0.crf ..\Bsp\src\bsp_timer0.c]
                          THUMB

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;47     
;;;48     void TMR0_IRQHandler(void) {
000000  b510              PUSH     {r4,lr}
;;;49     
;;;50     	taskTime.flag_1ms = 1;
000002  4b15              LDR      r3,|L1.88|
000004  2001              MOVS     r0,#1
000006  7018              STRB     r0,[r3,#0]
;;;51     
;;;52     	if (++taskTime.cnt_10ms >= 10) {
000008  7859              LDRB     r1,[r3,#1]  ; taskTime
00000a  2200              MOVS     r2,#0
00000c  1c49              ADDS     r1,r1,#1
00000e  b2c9              UXTB     r1,r1
000010  7059              STRB     r1,[r3,#1]
000012  290a              CMP      r1,#0xa
000014  d301              BCC      |L1.26|
;;;53     		taskTime.cnt_10ms = 0;
000016  705a              STRB     r2,[r3,#1]
;;;54     		taskTime.flag_10ms = 1;
000018  7098              STRB     r0,[r3,#2]
                  |L1.26|
;;;55     	}
;;;56     	if (++taskTime.cnt_100ms >= 100) {
00001a  78d9              LDRB     r1,[r3,#3]  ; taskTime
00001c  1c49              ADDS     r1,r1,#1
00001e  b2c9              UXTB     r1,r1
000020  70d9              STRB     r1,[r3,#3]
000022  2964              CMP      r1,#0x64
000024  d301              BCC      |L1.42|
;;;57     		taskTime.cnt_100ms = 0;
000026  70da              STRB     r2,[r3,#3]
;;;58     		taskTime.flag_100ms = 1;
000028  7118              STRB     r0,[r3,#4]
                  |L1.42|
;;;59     
;;;60     	}
;;;61     	if (++taskTime.cnt_500ms >= 500) {
00002a  88d9              LDRH     r1,[r3,#6]  ; taskTime
00002c  24ff              MOVS     r4,#0xff
00002e  1c49              ADDS     r1,r1,#1
000030  b289              UXTH     r1,r1
000032  34f5              ADDS     r4,r4,#0xf5
000034  80d9              STRH     r1,[r3,#6]
000036  42a1              CMP      r1,r4
000038  d301              BCC      |L1.62|
;;;62     		taskTime.cnt_500ms = 0;
00003a  80da              STRH     r2,[r3,#6]
;;;63     		taskTime.flag_500ms = 1;
00003c  7218              STRB     r0,[r3,#8]
                  |L1.62|
;;;64     	}
;;;65     
;;;66     	if (++taskTime.cnt_1s >= 1000) {
00003e  8959              LDRH     r1,[r3,#0xa]  ; taskTime
000040  247d              MOVS     r4,#0x7d
000042  1c49              ADDS     r1,r1,#1
000044  b289              UXTH     r1,r1
000046  00e4              LSLS     r4,r4,#3
000048  8159              STRH     r1,[r3,#0xa]
00004a  42a1              CMP      r1,r4
00004c  d301              BCC      |L1.82|
;;;67     		taskTime.cnt_1s = 0;
00004e  815a              STRH     r2,[r3,#0xa]
;;;68     		taskTime.flag_1s = 1;
000050  7318              STRB     r0,[r3,#0xc]
                  |L1.82|
000052  4902              LDR      r1,|L1.92|
000054  6088              STR      r0,[r1,#8]
;;;69     
;;;70     	}
;;;71     
;;;72     	// clear timer interrupt flag
;;;73     	TIMER_ClearIntFlag(TIMER0);
;;;74     }
000056  bd10              POP      {r4,pc}
;;;75     
                          ENDP

                  |L1.88|
                          DCD      ||.bss||
                  |L1.92|
                          DCD      0x40010000

                          AREA ||i.Timer0_InitHard||, CODE, READONLY, ALIGN=2

                  Timer0_InitHard PROC
;;;14     static void timer0_ParamInit(void);
;;;15     void Timer0_InitHard(void) {
000000  b510              PUSH     {r4,lr}
000002  210e              MOVS     r1,#0xe
000004  4811              LDR      r0,|L2.76|
000006  f7fffffe          BL       __aeabi_memclr
;;;16     
;;;17     	timer0_ParamInit();
;;;18     
;;;19     	SYS_ResetModule(TMR0_RST);
00000a  4811              LDR      r0,|L2.80|
00000c  f7fffffe          BL       SYS_ResetModule
;;;20     
;;;21     	/* Enable IP clock */
;;;22     	CLK_EnableModuleClock(TMR0_MODULE);
000010  4c10              LDR      r4,|L2.84|
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       CLK_EnableModuleClock
;;;23     
;;;24     	/* Select IP clock source */
;;;25     	CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HIRC, 0);
000018  2107              MOVS     r1,#7
00001a  2200              MOVS     r2,#0
00001c  0209              LSLS     r1,r1,#8
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       CLK_SetModuleClock
;;;26     
;;;27     	// Set timer 0 working 1Hz in periodic mode
;;;28     	TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 1000);
000024  06a1              LSLS     r1,r4,#26
000026  4c0c              LDR      r4,|L2.88|
000028  227d              MOVS     r2,#0x7d
00002a  00d2              LSLS     r2,r2,#3
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       TIMER_Open
000032  6820              LDR      r0,[r4,#0]
000034  0361              LSLS     r1,r4,#13
000036  4308              ORRS     r0,r0,r1
000038  6020              STR      r0,[r4,#0]
00003a  1548              ASRS     r0,r1,#21
00003c  4907              LDR      r1,|L2.92|
00003e  6008              STR      r0,[r1,#0]
000040  6820              LDR      r0,[r4,#0]
000042  0589              LSLS     r1,r1,#22
000044  4308              ORRS     r0,r0,r1
000046  6020              STR      r0,[r4,#0]
;;;29     
;;;30     	// Enable timer interrupt
;;;31     	TIMER_EnableInt(TIMER0);
;;;32     	NVIC_EnableIRQ(TMR0_IRQn);
;;;33     
;;;34     	// Start Timer 0
;;;35     	TIMER_Start(TIMER0);
;;;36     }
000048  bd10              POP      {r4,pc}
;;;37     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      ||.bss||
                  |L2.80|
                          DCD      0x04000002
                  |L2.84|
                          DCD      0xae800002
                  |L2.88|
                          DCD      0x40010000
                  |L2.92|
                          DCD      0xe000e100

                          AREA ||i.timer0_taskTimer_get||, CODE, READONLY, ALIGN=2

                  timer0_taskTimer_get PROC
;;;37     
;;;38     Task_time* timer0_taskTimer_get(void) {
000000  4800              LDR      r0,|L3.4|
;;;39     	return &taskTime;
;;;40     }
000002  4770              BX       lr
;;;41     
                          ENDP

                  |L3.4|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  taskTime
                          %        14

;*** Start embedded assembler ***

#line 1 "..\\Bsp\\src\\bsp_timer0.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_bsp_timer0_c_e5542d59____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_bsp_timer0_c_e5542d59____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_bsp_timer0_c_e5542d59____REVSH|
#line 402
|__asm___12_bsp_timer0_c_e5542d59____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
