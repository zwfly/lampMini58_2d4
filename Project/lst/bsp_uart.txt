; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bsp_uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\bsp_uart.crf ..\Bsp\src\bsp_uart.c]
                          THUMB

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART1_IRQHandler PROC
;;;63     /*---------------------------------------------------------------------------------------------------------*/
;;;64     void UART1_IRQHandler(void) {
000000  4907              LDR      r1,|L1.32|
;;;65     
;;;66     	uint8_t u8InChar = 0xFF;
000002  20ff              MOVS     r0,#0xff
;;;67     	uint32_t u32IntSts = UART1->INTSTS;
000004  69cb              LDR      r3,[r1,#0x1c]
;;;68     
;;;69     	if (u32IntSts & UART_INTSTS_RDAINT_Msk) {
000006  05da              LSLS     r2,r3,#23
000008  d402              BMI      |L1.16|
00000a  e004              B        |L1.22|
                  |L1.12|
;;;70     
;;;71     		/* Get all the input characters */
;;;72     		while (UART_IS_RX_READY(UART1)) {
;;;73     			/* Get the character from UART Buffer */
;;;74     			u8InChar = UART_READ(UART1); /* Rx trigger level is 1 byte*/
00000c  6808              LDR      r0,[r1,#0]
00000e  b2c0              UXTB     r0,r0
                  |L1.16|
000010  69ca              LDR      r2,[r1,#0x1c]         ;72
000012  07d2              LSLS     r2,r2,#31             ;72
000014  d1fa              BNE      |L1.12|
                  |L1.22|
;;;75     
;;;76     		}
;;;77     	}
;;;78     
;;;79     	if (u32IntSts & UART_INTSTS_THREINT_Msk) {
000016  059a              LSLS     r2,r3,#22
000018  d500              BPL      |L1.28|
;;;80     
;;;81     
;;;82     			UART_WRITE(UART1, u8InChar);
00001a  6008              STR      r0,[r1,#0]
                  |L1.28|
;;;83     
;;;84     		
;;;85     	}
;;;86     
;;;87     }
00001c  4770              BX       lr
;;;88     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x40150000

                          AREA ||i.Uart_InitHard||, CODE, READONLY, ALIGN=2

                  Uart_InitHard PROC
;;;12     
;;;13     void Uart_InitHard(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;14     
;;;15     	/* Enable IP clock */
;;;16     	CLK_EnableModuleClock(UART0_MODULE);
000002  4d1a              LDR      r5,|L2.108|
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CLK_EnableModuleClock
;;;17     
;;;18     	/* Select IP clock source */
;;;19     	CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HIRC,
00000a  2401              MOVS     r4,#1
00000c  0664              LSLS     r4,r4,#25
00000e  2200              MOVS     r2,#0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       CLK_SetModuleClock
;;;20     			CLK_CLKDIV_UART(1));
;;;21     
;;;22     	/*---------------------------------------------------------------------------------------------------------*/
;;;23     	/* Init I/O Multi-function                                                                                 */
;;;24     	/*---------------------------------------------------------------------------------------------------------*/
;;;25     	/* Set P1 multi-function pins for UART RXD, TXD */
;;;26     	SYS->P5_MFP = SYS_MFP_P51_UART0_RXD | SYS_MFP_P50_UART0_TXD;
000018  4a16              LDR      r2,|L2.116|
00001a  4815              LDR      r0,|L2.112|
00001c  6050              STR      r0,[r2,#4]
;;;27     
;;;28     	/* Reset IP */
;;;29     	SYS_ResetModule(SYS_IPRST1_UART0RST_Msk);
00001e  0290              LSLS     r0,r2,#10
000020  f7fffffe          BL       SYS_ResetModule
;;;30     
;;;31     	/* Configure UART and set UART Baudrate */
;;;32     	UART_Open(UART0, 115200);
000024  21e1              MOVS     r1,#0xe1
000026  0249              LSLS     r1,r1,#9
000028  4813              LDR      r0,|L2.120|
00002a  f7fffffe          BL       UART_Open
;;;33     
;;;34     ///////////
;;;35     	/* Init UART1 */
;;;36     
;;;37     	/* Enable IP clock */
;;;38     	CLK_EnableModuleClock(UART1_MODULE);
00002e  1c6d              ADDS     r5,r5,#1
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;39     
;;;40     	/* Select IP clock source */
;;;41     	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HIRC,
000036  2200              MOVS     r2,#0
000038  4621              MOV      r1,r4
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       CLK_SetModuleClock
;;;42     			CLK_CLKDIV_UART(1));
;;;43     
;;;44     	/*---------------------------------------------------------------------------------------------------------*/
;;;45     	/* Init I/O Multi-function                                                                                 */
;;;46     	/*---------------------------------------------------------------------------------------------------------*/
;;;47     	/* Set P1 multi-function pins for UART RXD, TXD */
;;;48     	SYS->P2_MFP = SYS_MFP_P24_UART1_RXD | SYS_MFP_P25_UART1_TXD;
000040  2030              MOVS     r0,#0x30
000042  2105              MOVS     r1,#5
000044  0709              LSLS     r1,r1,#28
000046  6388              STR      r0,[r1,#0x38]
;;;49     
;;;50     	/* Reset IP */
;;;51     	SYS_ResetModule(SYS_IPRST1_UART1RST_Msk);
000048  1220              ASRS     r0,r4,#8
00004a  f7fffffe          BL       SYS_ResetModule
;;;52     
;;;53     	/* Configure UART and set UART Baudrate */
;;;54     	UART_Open(UART1, 19200);
00004e  4c0b              LDR      r4,|L2.124|
000050  214b              MOVS     r1,#0x4b
000052  0209              LSLS     r1,r1,#8
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       UART_Open
;;;55     
;;;56         /* Enable Interrupt and install the call back function */
;;;57         UART_ENABLE_INT(UART1, (UART_INTEN_RDAIEN_Msk | UART_INTEN_THREIEN_Msk | UART_INTEN_RXTOIEN_Msk));
00005a  6861              LDR      r1,[r4,#4]
00005c  2213              MOVS     r2,#0x13
00005e  4311              ORRS     r1,r1,r2
000060  6061              STR      r1,[r4,#4]
000062  2001              MOVS     r0,#1
000064  4906              LDR      r1,|L2.128|
000066  0340              LSLS     r0,r0,#13
000068  6008              STR      r0,[r1,#0]
;;;58         NVIC_EnableIRQ(UART1_IRQn);
;;;59     }
00006a  bd70              POP      {r4-r6,pc}
;;;60     
                          ENDP

                  |L2.108|
                          DCD      0xa7803d10
                  |L2.112|
                          DCD      0x00000303
                  |L2.116|
                          DCD      0x50000040
                  |L2.120|
                          DCD      0x40050000
                  |L2.124|
                          DCD      0x40150000
                  |L2.128|
                          DCD      0xe000e100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  rcv_T
                          %        162

;*** Start embedded assembler ***

#line 1 "..\\Bsp\\src\\bsp_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_bsp_uart_c_d2b03be3____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_bsp_uart_c_d2b03be3____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_bsp_uart_c_d2b03be3____REVSH|
#line 402
|__asm___10_bsp_uart_c_d2b03be3____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
