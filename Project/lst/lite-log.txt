; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\lite-log.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lite-log.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 --omf_browse=.\obj\lite-log.crf ..\utils\src\lite-log.c]
                          THUMB

                          AREA ||i.LITE_closelog||, CODE, READONLY, ALIGN=2

                  LITE_closelog PROC
;;;130    
;;;131    void LITE_closelog(void) {
000000  b510              PUSH     {r4,lr}
;;;132    	strncpy(logcb.name, "", LOG_MOD_NAME_LEN);
000002  2207              MOVS     r2,#7
000004  a104              ADR      r1,|L1.24|
000006  4805              LDR      r0,|L1.28|
000008  f7fffffe          BL       strncpy
;;;133    	logcb.name[LOG_MOD_NAME_LEN] = 0;
00000c  4803              LDR      r0,|L1.28|
00000e  2100              MOVS     r1,#0
000010  71c1              STRB     r1,[r0,#7]
;;;134    	logcb.priority = 0;
000012  6081              STR      r1,[r0,#8]  ; logcb
;;;135    }
000014  bd10              POP      {r4,pc}
;;;136    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
000018  00                DCB      0
000019  00                DCB      0
00001a  00                DCB      0
00001b  00                DCB      0
                  |L1.28|
                          DCD      ||.bss||

                          AREA ||i.LITE_get_loglevel||, CODE, READONLY, ALIGN=2

                  LITE_get_loglevel PROC
;;;140    
;;;141    int LITE_get_loglevel(void) {
000000  4801              LDR      r0,|L2.8|
;;;142    	return logcb.priority;
000002  6880              LDR      r0,[r0,#8]  ; logcb
;;;143    }
000004  4770              BX       lr
;;;144    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.bss||

                          AREA ||i.LITE_get_logname||, CODE, READONLY, ALIGN=2

                  LITE_get_logname PROC
;;;136    
;;;137    char *LITE_get_logname(void) {
000000  4800              LDR      r0,|L3.4|
;;;138    	return logcb.name;
;;;139    }
000002  4770              BX       lr
;;;140    
                          ENDP

                  |L3.4|
                          DCD      ||.bss||

                          AREA ||i.LITE_hexdump||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  LITE_hexdump PROC
;;;32     
;;;33     int LITE_hexdump(const char *title, const void *buff, const int len) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  b096              SUB      sp,sp,#0x58
000004  460f              MOV      r7,r1
000006  4604              MOV      r4,r0
;;;34     	int i, j, written;
;;;35     	unsigned char ascii[16 + 1] = { 0 };
000008  2114              MOVS     r1,#0x14
00000a  a811              ADD      r0,sp,#0x44
00000c  f7fffffe          BL       __aeabi_memclr4
;;;36     	char header[64] = { 0 };
000010  2140              MOVS     r1,#0x40
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       __aeabi_memclr4
;;;37     	unsigned char *buf = (unsigned char *) buff;
;;;38     
;;;39     	LITE_snprintf(header, sizeof(header), "| %s: (len=%d) |\r\n", title,
000018  9818              LDR      r0,[sp,#0x60]
00001a  9000              STR      r0,[sp,#0]
00001c  4623              MOV      r3,r4
00001e  a23b              ADR      r2,|L4.268|
000020  2140              MOVS     r1,#0x40
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       __2snprintf
;;;40     			(int) len);
;;;41     
;;;42     	LITE_HEXDUMP_DRAWLINE("+", strlen(header) - 4, "+");
000028  a13d              ADR      r1,|L4.288|
00002a  a03e              ADR      r0,|L4.292|
00002c  f7fffffe          BL       __2printf
000030  2400              MOVS     r4,#0
000032  e003              B        |L4.60|
                  |L4.52|
000034  a03c              ADR      r0,|L4.296|
000036  f7fffffe          BL       __2printf
00003a  1c64              ADDS     r4,r4,#1
                  |L4.60|
00003c  a801              ADD      r0,sp,#4
00003e  f7fffffe          BL       strlen
000042  1f00              SUBS     r0,r0,#4
000044  42a0              CMP      r0,r4
000046  d8f5              BHI      |L4.52|
000048  a135              ADR      r1,|L4.288|
00004a  a036              ADR      r0,|L4.292|
00004c  f7fffffe          BL       __2printf
000050  a032              ADR      r0,|L4.284|
000052  f7fffffe          BL       __2printf
;;;43     	LITE_printf("%s", header);
000056  a901              ADD      r1,sp,#4
000058  a032              ADR      r0,|L4.292|
00005a  f7fffffe          BL       __2printf
;;;44     	LITE_printf("%s\r\n", HEXDUMP_SEP_LINE);
00005e  4933              LDR      r1,|L4.300|
000060  a033              ADR      r0,|L4.304|
000062  f7fffffe          BL       __2printf
;;;45     
;;;46     	written = 0;
000066  2500              MOVS     r5,#0
;;;47     	for (i = 0; i < len; ++i) {
000068  462c              MOV      r4,r5
00006a  e044              B        |L4.246|
                  |L4.108|
;;;48     		if (i % 16 == 0) {
00006c  0720              LSLS     r0,r4,#28
00006e  d104              BNE      |L4.122|
;;;49     			LITE_printf("| %08X: ", (unsigned int) (i + (long) buff));
000070  19e1              ADDS     r1,r4,r7
000072  a031              ADR      r0,|L4.312|
000074  f7fffffe          BL       __2printf
000078  3508              ADDS     r5,r5,#8
                  |L4.122|
;;;50     			written += 8;
;;;51     		}
;;;52     
;;;53     		LITE_printf("%02X", buf[i]);
00007a  5d39              LDRB     r1,[r7,r4]
00007c  a031              ADR      r0,|L4.324|
00007e  f7fffffe          BL       __2printf
;;;54     		written += 2;
;;;55     
;;;56     		if (i % 2 == 1) {
000082  4832              LDR      r0,|L4.332|
000084  1cad              ADDS     r5,r5,#2
000086  4020              ANDS     r0,r0,r4
000088  2801              CMP      r0,#1
00008a  d103              BNE      |L4.148|
;;;57     			LITE_printf(" ");
00008c  a030              ADR      r0,|L4.336|
00008e  f7fffffe          BL       __2printf
000092  1c6d              ADDS     r5,r5,#1
                  |L4.148|
;;;58     			written += 1;
;;;59     		}
;;;60     		LITE_sprintf((char *) ascii + i % 16, "%c",
000094  5d3a              LDRB     r2,[r7,r4]
000096  4610              MOV      r0,r2
000098  3820              SUBS     r0,r0,#0x20
00009a  285e              CMP      r0,#0x5e
00009c  d900              BLS      |L4.160|
;;;61     				((buf[i] >= ' ' && buf[i] <= '~') ? buf[i] : '.'));
00009e  222e              MOVS     r2,#0x2e
                  |L4.160|
0000a0  17e0              ASRS     r0,r4,#31
0000a2  0f01              LSRS     r1,r0,#28
0000a4  1908              ADDS     r0,r1,r4
0000a6  0901              LSRS     r1,r0,#4
0000a8  0109              LSLS     r1,r1,#4
0000aa  1a60              SUBS     r0,r4,r1
0000ac  a911              ADD      r1,sp,#0x44
0000ae  1840              ADDS     r0,r0,r1
0000b0  a128              ADR      r1,|L4.340|
0000b2  f7fffffe          BL       __2sprintf
;;;62     
;;;63     		if (((i + 1) % 16 == 0) || (i == len - 1)) {
0000b6  2101              MOVS     r1,#1
0000b8  0720              LSLS     r0,r4,#28
0000ba  0709              LSLS     r1,r1,#28
0000bc  42c8              CMN      r0,r1
0000be  d003              BEQ      |L4.200|
0000c0  9818              LDR      r0,[sp,#0x60]
0000c2  1e40              SUBS     r0,r0,#1
0000c4  4284              CMP      r4,r0
0000c6  d115              BNE      |L4.244|
                  |L4.200|
;;;64     			for (j = 0; j < 48 - written; ++j) {
0000c8  2600              MOVS     r6,#0
0000ca  2030              MOVS     r0,#0x30
0000cc  1b45              SUBS     r5,r0,r5
0000ce  e003              B        |L4.216|
                  |L4.208|
;;;65     				LITE_printf(" ");
0000d0  a01f              ADR      r0,|L4.336|
0000d2  f7fffffe          BL       __2printf
0000d6  1c76              ADDS     r6,r6,#1
                  |L4.216|
0000d8  42b5              CMP      r5,r6                 ;64
0000da  dcf9              BGT      |L4.208|
;;;66     			}
;;;67     
;;;68     			LITE_printf(" %s", ascii);
0000dc  a911              ADD      r1,sp,#0x44
0000de  a01e              ADR      r0,|L4.344|
0000e0  f7fffffe          BL       __2printf
;;;69     			LITE_printf("\r\n");
0000e4  a00d              ADR      r0,|L4.284|
0000e6  f7fffffe          BL       __2printf
;;;70     
;;;71     			written = 0;
0000ea  2500              MOVS     r5,#0
;;;72     			memset(ascii, 0, sizeof(ascii));
0000ec  2114              MOVS     r1,#0x14
0000ee  a811              ADD      r0,sp,#0x44
0000f0  f7fffffe          BL       __aeabi_memclr4
                  |L4.244|
0000f4  1c64              ADDS     r4,r4,#1
                  |L4.246|
0000f6  9818              LDR      r0,[sp,#0x60]         ;47
0000f8  4284              CMP      r4,r0                 ;47
0000fa  dbb7              BLT      |L4.108|
;;;73     		}
;;;74     	}
;;;75     	LITE_printf("%s\r\n", HEXDUMP_SEP_LINE);
0000fc  490b              LDR      r1,|L4.300|
0000fe  a00c              ADR      r0,|L4.304|
000100  f7fffffe          BL       __2printf
;;;76     
;;;77     	return 0;
000104  2000              MOVS     r0,#0
;;;78     }
000106  b019              ADD      sp,sp,#0x64
000108  bdf0              POP      {r4-r7,pc}
;;;79     
                          ENDP

00010a  0000              DCW      0x0000
                  |L4.268|
00010c  7c202573          DCB      "| %s: (len=%d) |"
000110  3a20286c
000114  656e3d25
000118  6429207c
                  |L4.284|
00011c  0d0a00            DCB      "\r\n",0
00011f  00                DCB      0
                  |L4.288|
000120  2b00              DCB      "+",0
000122  00                DCB      0
000123  00                DCB      0
                  |L4.292|
000124  257300            DCB      "%s",0
000127  00                DCB      0
                  |L4.296|
000128  2d00              DCB      "-",0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L4.300|
                          DCD      ||.conststring||+0x18
                  |L4.304|
000130  25730d0a          DCB      "%s\r\n",0
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L4.312|
000138  7c202530          DCB      "| %08X: ",0
00013c  38583a20
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L4.324|
000144  25303258          DCB      "%02X",0
000148  00      
000149  00                DCB      0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L4.332|
                          DCD      0x80000001
                  |L4.336|
000150  2000              DCB      " ",0
000152  00                DCB      0
000153  00                DCB      0
                  |L4.340|
000154  256300            DCB      "%c",0
000157  00                DCB      0
                  |L4.344|
000158  20257300          DCB      " %s",0

                          AREA ||i.LITE_log_enabled||, CODE, READONLY, ALIGN=1

                  LITE_log_enabled PROC
;;;120    
;;;121    int LITE_log_enabled(void) {
000000  2001              MOVS     r0,#1
;;;122    	return 1;
;;;123    }
000002  4770              BX       lr
;;;124    
                          ENDP


                          AREA ||i.LITE_openlog||, CODE, READONLY, ALIGN=2

                  LITE_openlog PROC
;;;124    
;;;125    void LITE_openlog(const char *ident) {
000000  b510              PUSH     {r4,lr}
;;;126    	strncpy(logcb.name, ident, LOG_MOD_NAME_LEN);
000002  4601              MOV      r1,r0
000004  2207              MOVS     r2,#7
000006  4804              LDR      r0,|L6.24|
000008  f7fffffe          BL       strncpy
;;;127    	logcb.name[LOG_MOD_NAME_LEN] = 0;
00000c  4802              LDR      r0,|L6.24|
00000e  2100              MOVS     r1,#0
000010  71c1              STRB     r1,[r0,#7]
;;;128    	logcb.priority = 0;
000012  6081              STR      r1,[r0,#8]  ; logcb
;;;129    }
000014  bd10              POP      {r4,pc}
;;;130    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      ||.bss||

                          AREA ||i.LITE_rich_hexdump||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_p
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  LITE_rich_hexdump PROC
;;;148    
;;;149    void LITE_rich_hexdump(const char *f, const int l, const int level,
000000  b5f8              PUSH     {r3-r7,lr}
;;;150    		const char *buf_str, const void *buf_ptr, const int buf_len) {
000002  4607              MOV      r7,r0
000004  480d              LDR      r0,|L7.60|
000006  9d06              LDR      r5,[sp,#0x18]
000008  6880              LDR      r0,[r0,#8]  ; logcb
00000a  9c07              LDR      r4,[sp,#0x1c]
00000c  461e              MOV      r6,r3
;;;151    	if (LITE_get_loglevel() < level) {
00000e  4290              CMP      r0,r2
000010  db13              BLT      |L7.58|
;;;152    		return;
;;;153    	}
;;;154    
;;;155    	LITE_printf(LOG_PREFIX_FMT, lvl_names[LITE_get_loglevel()], f, l);
000012  4a0b              LDR      r2,|L7.64|
000014  0080              LSLS     r0,r0,#2
000016  5810              LDR      r0,[r2,r0]
000018  460b              MOV      r3,r1
00001a  4601              MOV      r1,r0
00001c  463a              MOV      r2,r7
00001e  a009              ADR      r0,|L7.68|
000020  f7fffffe          BL       __2printf
;;;156    	LITE_printf("HEXDUMP %s @ %p[%d]\r\n", buf_str, buf_ptr, buf_len);
000024  4623              MOV      r3,r4
000026  462a              MOV      r2,r5
000028  4631              MOV      r1,r6
00002a  a00a              ADR      r0,|L7.84|
00002c  f7fffffe          BL       __2printf
;;;157    	LITE_hexdump(buf_str, buf_ptr, buf_len);
000030  4622              MOV      r2,r4
000032  4629              MOV      r1,r5
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       LITE_hexdump
                  |L7.58|
;;;158    
;;;159    	return;
;;;160    }
00003a  bdf8              POP      {r3-r7,pc}
;;;161    
                          ENDP

                  |L7.60|
                          DCD      ||.bss||
                  |L7.64|
                          DCD      ||.data||
                  |L7.68|
000044  5b25735d          DCB      "[%s] %s(%d): ",0
000048  20257328
00004c  2564293a
000050  2000    
000052  00                DCB      0
000053  00                DCB      0
                  |L7.84|
000054  48455844          DCB      "HEXDUMP %s @ %p[%d]\r\n",0
000058  554d5020
00005c  25732040
000060  2025705b
000064  25645d0d
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.LITE_set_loglevel||, CODE, READONLY, ALIGN=2

                  LITE_set_loglevel PROC
;;;144    
;;;145    void LITE_set_loglevel(int pri) {
000000  4901              LDR      r1,|L8.8|
;;;146    	logcb.priority = pri;
000002  6088              STR      r0,[r1,#8]  ; logcb
;;;147    }
000004  4770              BX       lr
;;;148    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.bss||

                          AREA ||i.LITE_syslog||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  LITE_syslog PROC
;;;84     
;;;85     void LITE_syslog(const char *f, const int l, const int level, const char *fmt,
000000  b40f              PUSH     {r0-r3}
;;;86     		...) {
000002  b5f8              PUSH     {r3-r7,lr}
;;;87     	char *tmpbuf = logcb.text_buf;
000004  4d20              LDR      r5,|L9.136|
000006  4616              MOV      r6,r2                 ;86
000008  4628              MOV      r0,r5                 ;86
00000a  460f              MOV      r7,r1                 ;86
;;;88     	char *o = tmpbuf;
;;;89     	int truncated = 0;
00000c  2400              MOVS     r4,#0
00000e  380c              SUBS     r0,r0,#0xc
;;;90     	va_list ap;
;;;91     
;;;92     	if (!strlen(LITE_get_logname()) || LITE_get_loglevel() < level
000010  f7fffffe          BL       strlen
000014  2800              CMP      r0,#0
000016  d033              BEQ      |L9.128|
000018  4628              MOV      r0,r5
00001a  380c              SUBS     r0,r0,#0xc
00001c  6880              LDR      r0,[r0,#8]  ; logcb
00001e  42b0              CMP      r0,r6
000020  db2e              BLT      |L9.128|
;;;93     			|| level < LOG_EMERG_LEVEL) {
000022  2e00              CMP      r6,#0
000024  db2c              BLT      |L9.128|
;;;94     		return;
;;;95     	}
;;;96     
;;;97     	LITE_printf(LOG_PREFIX_FMT, lvl_names[level], f, l);
000026  4919              LDR      r1,|L9.140|
000028  00b0              LSLS     r0,r6,#2
00002a  5809              LDR      r1,[r1,r0]
00002c  463b              MOV      r3,r7
00002e  a018              ADR      r0,|L9.144|
000030  9a06              LDR      r2,[sp,#0x18]
000032  f7fffffe          BL       __2printf
;;;98     
;;;99     	memset(tmpbuf, 0, sizeof(logcb.text_buf));
000036  21ff              MOVS     r1,#0xff
000038  3101              ADDS     r1,#1
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       __aeabi_memclr
;;;100    	va_start(ap, fmt);
000040  aa0a              ADD      r2,sp,#0x28
;;;101    	o += vsprintf(o, fmt, ap);
000042  4628              MOV      r0,r5
000044  9909              LDR      r1,[sp,#0x24]
000046  f7fffffe          BL       vsprintf
00004a  1940              ADDS     r0,r0,r5
;;;102    	va_end(ap);
;;;103    
;;;104    	if (o - tmpbuf > LOG_MSG_MAXLEN) {
00004c  1b40              SUBS     r0,r0,r5
00004e  4629              MOV      r1,r5                 ;101
000050  28ff              CMP      r0,#0xff
000052  dd03              BLE      |L9.92|
;;;105    		o = tmpbuf + strlen(tmpbuf);
000054  4608              MOV      r0,r1
000056  f7fffffe          BL       strlen
;;;106    		truncated = 1;
00005a  2401              MOVS     r4,#1
                  |L9.92|
;;;107    	}
;;;108    	if (strlen(tmpbuf) == LOG_MSG_MAXLEN) {
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       strlen
000062  28ff              CMP      r0,#0xff
000064  d100              BNE      |L9.104|
;;;109    		truncated = 1;
000066  2401              MOVS     r4,#1
                  |L9.104|
;;;110    	}
;;;111    
;;;112    	LITE_printf("%s", tmpbuf);
000068  4629              MOV      r1,r5
00006a  a00d              ADR      r0,|L9.160|
00006c  f7fffffe          BL       __2printf
;;;113    	if (truncated) {
000070  2c00              CMP      r4,#0
000072  d002              BEQ      |L9.122|
;;;114    		LITE_printf(" ...");
000074  a00b              ADR      r0,|L9.164|
000076  f7fffffe          BL       __2printf
                  |L9.122|
;;;115    	}
;;;116    
;;;117    	LITE_printf("\r\n");
00007a  a00c              ADR      r0,|L9.172|
00007c  f7fffffe          BL       __2printf
                  |L9.128|
;;;118    	return;
;;;119    }
000080  bcf8              POP      {r3-r7}
000082  bc08              POP      {r3}
000084  b004              ADD      sp,sp,#0x10
000086  4718              BX       r3
;;;120    
                          ENDP

                  |L9.136|
                          DCD      ||.bss||+0xc
                  |L9.140|
                          DCD      ||.data||
                  |L9.144|
000090  5b25735d          DCB      "[%s] %s(%d): ",0
000094  20257328
000098  2564293a
00009c  2000    
00009e  00                DCB      0
00009f  00                DCB      0
                  |L9.160|
0000a0  257300            DCB      "%s",0
0000a3  00                DCB      0
                  |L9.164|
0000a4  202e2e2e          DCB      " ...",0
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L9.172|
0000ac  0d0a00            DCB      "\r\n",0
0000af  00                DCB      0

                          AREA ||i.log_multi_line_internal||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  log_multi_line_internal PROC
;;;161    
;;;162    int log_multi_line_internal(const char *f, const int l, const char *title,
000000  b5ff              PUSH     {r0-r7,lr}
000002  4f26              LDR      r7,|L10.156|
;;;163    		int level, char *payload, const char *mark) {
000004  b083              SUB      sp,sp,#0xc
;;;164    	const char *pos;
;;;165    	const char *endl;
;;;166    	int i;
;;;167    
;;;168    	if (LITE_get_loglevel() < level) {
000006  68b8              LDR      r0,[r7,#8]  ; logcb
000008  9c0c              LDR      r4,[sp,#0x30]
00000a  4615              MOV      r5,r2                 ;163
00000c  460e              MOV      r6,r1                 ;163
00000e  4298              CMP      r0,r3
000010  da02              BGE      |L10.24|
;;;169    		return 1;
000012  2001              MOVS     r0,#1
                  |L10.20|
;;;170    	}
;;;171    
;;;172    	LITE_printf("[%s] %s(%d): %s (Length: %d Bytes)\r\n",
;;;173    			lvl_names[LITE_get_loglevel()], f, l, title, (int) strlen(payload));
;;;174    
;;;175    	pos = payload;
;;;176    	while (pos && *pos) {
;;;177    		LITE_printf("%s ", mark);
;;;178    
;;;179    		if (*pos == '\r') {
;;;180    			LITE_printf("\r\n");
;;;181    			pos += 2;
;;;182    			continue;
;;;183    		}
;;;184    
;;;185    		endl = strchr(pos + 1, '\r');
;;;186    		if (endl == NULL) {
;;;187    			endl = pos;
;;;188    			do {
;;;189    				++endl;
;;;190    			} while (*endl);
;;;191    		}
;;;192    
;;;193    		for (i = 0; i < endl - pos; ++i) {
;;;194    			LITE_printf("%c", pos[i]);
;;;195    		}
;;;196    		LITE_printf("\r\n");
;;;197    
;;;198    		pos = *endl ? endl + 2 : 0;
;;;199    	}
;;;200    
;;;201    	return 0;
;;;202    }
000014  b007              ADD      sp,sp,#0x1c
000016  bdf0              POP      {r4-r7,pc}
                  |L10.24|
000018  4620              MOV      r0,r4                 ;172
00001a  f7fffffe          BL       strlen
00001e  68b9              LDR      r1,[r7,#8]            ;172  ; logcb
000020  4a1f              LDR      r2,|L10.160|
000022  0089              LSLS     r1,r1,#2              ;172
000024  5851              LDR      r1,[r2,r1]            ;172
000026  9001              STR      r0,[sp,#4]            ;172
000028  4633              MOV      r3,r6                 ;172
00002a  9500              STR      r5,[sp,#0]            ;172
00002c  a01d              ADR      r0,|L10.164|
00002e  9a03              LDR      r2,[sp,#0xc]          ;172
000030  f7fffffe          BL       __2printf
000034  e02a              B        |L10.140|
                  |L10.54|
000036  a025              ADR      r0,|L10.204|
000038  990d              LDR      r1,[sp,#0x34]         ;177
00003a  f7fffffe          BL       __2printf
00003e  7820              LDRB     r0,[r4,#0]            ;179
000040  280d              CMP      r0,#0xd               ;179
000042  d006              BEQ      |L10.82|
000044  210d              MOVS     r1,#0xd               ;185
000046  1c60              ADDS     r0,r4,#1              ;185
000048  f7fffffe          BL       strchr
00004c  0005              MOVS     r5,r0                 ;185
00004e  d005              BEQ      |L10.92|
000050  e009              B        |L10.102|
                  |L10.82|
000052  a01f              ADR      r0,|L10.208|
000054  f7fffffe          BL       __2printf
000058  1ca4              ADDS     r4,r4,#2              ;180
00005a  e017              B        |L10.140|
                  |L10.92|
00005c  4625              MOV      r5,r4                 ;187
                  |L10.94|
00005e  7868              LDRB     r0,[r5,#1]            ;190
000060  1c6d              ADDS     r5,r5,#1              ;190
000062  2800              CMP      r0,#0                 ;190
000064  d1fb              BNE      |L10.94|
                  |L10.102|
000066  2600              MOVS     r6,#0                 ;193
000068  1b2f              SUBS     r7,r5,r4              ;193
00006a  e004              B        |L10.118|
                  |L10.108|
00006c  5da1              LDRB     r1,[r4,r6]            ;194
00006e  a019              ADR      r0,|L10.212|
000070  f7fffffe          BL       __2printf
000074  1c76              ADDS     r6,r6,#1              ;194
                  |L10.118|
000076  42b7              CMP      r7,r6                 ;193
000078  dcf8              BGT      |L10.108|
00007a  a015              ADR      r0,|L10.208|
00007c  f7fffffe          BL       __2printf
000080  7828              LDRB     r0,[r5,#0]            ;198
000082  2800              CMP      r0,#0                 ;198
000084  d001              BEQ      |L10.138|
000086  1cac              ADDS     r4,r5,#2              ;198
000088  e000              B        |L10.140|
                  |L10.138|
00008a  2400              MOVS     r4,#0                 ;198
                  |L10.140|
00008c  2c00              CMP      r4,#0                 ;176
00008e  d002              BEQ      |L10.150|
000090  7820              LDRB     r0,[r4,#0]            ;176
000092  2800              CMP      r0,#0                 ;176
000094  d1cf              BNE      |L10.54|
                  |L10.150|
000096  2000              MOVS     r0,#0                 ;201
000098  e7bc              B        |L10.20|
;;;203    
                          ENDP

00009a  0000              DCW      0x0000
                  |L10.156|
                          DCD      ||.bss||
                  |L10.160|
                          DCD      ||.data||
                  |L10.164|
0000a4  5b25735d          DCB      "[%s] %s(%d): %s (Length: %d Bytes)\r\n",0
0000a8  20257328
0000ac  2564293a
0000b0  20257320
0000b4  284c656e
0000b8  6774683a
0000bc  20256420
0000c0  42797465
0000c4  73290d0a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L10.204|
0000cc  25732000          DCB      "%s ",0
                  |L10.208|
0000d0  0d0a00            DCB      "\r\n",0
0000d3  00                DCB      0
                  |L10.212|
0000d4  256300            DCB      "%c",0
0000d7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  logcb
                          %        268

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  656d6700          DCB      "emg",0
000004  63727400          DCB      "crt",0
000008  65727200          DCB      "err",0
00000c  77726e00          DCB      "wrn",0
000010  696e6600          DCB      "inf",0
000014  64626700          DCB      "dbg",0
000018  2b2d2d2d          DCB      "+------------------------------------------------------"
00001c  2d2d2d2d
000020  2d2d2d2d
000024  2d2d2d2d
000028  2d2d2d2d
00002c  2d2d2d2d
000030  2d2d2d2d
000034  2d2d2d2d
000038  2d2d2d2d
00003c  2d2d2d2d
000040  2d2d2d2d
000044  2d2d2d2d
000048  2d2d2d2d
00004c  2d2d2d  
00004f  2d2d2d2d          DCB      "---------------",0
000053  2d2d2d2d
000057  2d2d2d2d
00005b  2d2d2d00

                          AREA ||.data||, DATA, ALIGN=2

                  lvl_names
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x4
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x14
