; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\main.crf ..\App\src\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;15     
;;;16     void SYS_Init(void) {
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0d              LDR      r4,|L1.60|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;17     	/* Unlock protected registers */
;;;18     	SYS_UnlockReg();
;;;19     #if 0
;;;20     	/* Set P5 multi-function pins for XTAL1 and XTAL2 */
;;;21     	SYS->P5_MFP &= ~(SYS_MFP_P50_Msk | SYS_MFP_P51_Msk);
;;;22     	SYS->P5_MFP |= (SYS_MFP_P50_XT1_IN | SYS_MFP_P51_XT1_OUT);
;;;23     
;;;24     	/*---------------------------------------------------------------------------------------------------------*/
;;;25     	/* Init System Clock                                                                                       */
;;;26     	/*---------------------------------------------------------------------------------------------------------*/
;;;27     
;;;28     	/* Enable external 12MHz XTAL, HIRC */
;;;29     	CLK->PWRCTL |= CLK_PWRCTL_XTL12M | CLK_PWRCTL_HIRCEN_Msk;
;;;30     
;;;31     	/* Waiting for clock ready */
;;;32     	CLK_WaitClockReady(CLK_STATUS_XTLSTB_Msk | CLK_STATUS_HIRCSTB_Msk);
;;;33     
;;;34     	/* Switch HCLK clock source to XTL */
;;;35     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_XTAL,CLK_CLKDIV_HCLK(1));
;;;36     
;;;37     	/* STCLK to XTL STCLK to XTL */
;;;38     	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_XTAL);
;;;39     #else
;;;40     
;;;41     	/* Enable  HIRC */
;;;42     //	CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
;;;43     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;44     	CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;45     
;;;46     	/* Wait for HIRC clock ready */
;;;47     	CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;48     
;;;49     	/* Select HCLK clock source as HIRC and and HCLK source divider as 1 */
;;;50     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;51     
;;;52     #endif
;;;53     
;;;54     	/* Set core clock as PLL_CLOCK from PLL */
;;;55     	CLK_SetCoreClock(PLL_CLOCK);
00002a  4805              LDR      r0,|L1.64|
00002c  f7fffffe          BL       CLK_SetCoreClock
;;;56     	/* To update the variable SystemCoreClock */
;;;57     	SystemCoreClockUpdate();
000030  f7fffffe          BL       SystemCoreClockUpdate
000034  2000              MOVS     r0,#0
000036  6020              STR      r0,[r4,#0]
;;;58     
;;;59     	/* Lock protected registers */
;;;60     	SYS_LockReg();
;;;61     }
000038  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x50000100
                  |L1.64|
                          DCD      0x02faf080

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     int main(void) {
000000  b09e              SUB      sp,sp,#0x78
;;;67     	uint8_t ucKeyCode;
;;;68     	uint8_t dome_cnt = 0;
;;;69     
;;;70     	/* Init System */
;;;71     	SYS_Init();
000002  f7fffffe          BL       SYS_Init
;;;72     
;;;73     	bsp_Init();
000006  f7fffffe          BL       bsp_Init
;;;74     
;;;75     #if 1
;;;76     	LITE_openlog("lamp");
00000a  a041              ADR      r0,|L2.272|
00000c  f7fffffe          BL       LITE_openlog
;;;77     	LITE_set_loglevel(LOG_DEBUG_LEVEL);
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       LITE_set_loglevel
;;;78     #else
;;;79     	LITE_closelog();
;;;80     #endif
;;;81     
;;;82     	log_debug(" CPU @ %dHz\r\n", SystemCoreClock);
000016  4840              LDR      r0,|L2.280|
000018  a340              ADR      r3,|L2.284|
00001a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001c  9000              STR      r0,[sp,#0]
00001e  2205              MOVS     r2,#5
000020  2152              MOVS     r1,#0x52
000022  4842              LDR      r0,|L2.300|
000024  f7fffffe          BL       LITE_syslog
;;;83     
;;;84     	log_debug("+-------------------------------------+ ");
000028  a341              ADR      r3,|L2.304|
00002a  2205              MOVS     r2,#5
00002c  2154              MOVS     r1,#0x54
00002e  483f              LDR      r0,|L2.300|
000030  f7fffffe          BL       LITE_syslog
;;;85     	log_debug("+-------------------------------------+ ");
000034  a33e              ADR      r3,|L2.304|
000036  2205              MOVS     r2,#5
000038  2155              MOVS     r1,#0x55
00003a  483c              LDR      r0,|L2.300|
00003c  f7fffffe          BL       LITE_syslog
;;;86     
;;;87     	log_debug("default size: %d", sizeof(DOME_DEFAULT_T));
000040  2072              MOVS     r0,#0x72
000042  9000              STR      r0,[sp,#0]
000044  a345              ADR      r3,|L2.348|
000046  2205              MOVS     r2,#5
000048  2157              MOVS     r1,#0x57
00004a  4838              LDR      r0,|L2.300|
00004c  f7fffffe          BL       LITE_syslog
;;;88     	log_debug("dome size: %d", sizeof(DOME_RUNNING_T));
000050  2008              MOVS     r0,#8
000052  9000              STR      r0,[sp,#0]
000054  a346              ADR      r3,|L2.368|
000056  2205              MOVS     r2,#5
000058  2158              MOVS     r1,#0x58
00005a  4834              LDR      r0,|L2.300|
00005c  f7fffffe          BL       LITE_syslog
;;;89     	log_debug("header size: %d", sizeof(DOME_HEADER_T));
000060  200a              MOVS     r0,#0xa
000062  9000              STR      r0,[sp,#0]
000064  a346              ADR      r3,|L2.384|
000066  2205              MOVS     r2,#5
000068  2159              MOVS     r1,#0x59
00006a  4830              LDR      r0,|L2.300|
00006c  f7fffffe          BL       LITE_syslog
;;;90     	log_debug("submode size: %d", sizeof(SUBDOME_T));
000070  200d              MOVS     r0,#0xd
000072  9000              STR      r0,[sp,#0]
000074  a346              ADR      r3,|L2.400|
000076  2205              MOVS     r2,#5
000078  215a              MOVS     r1,#0x5a
00007a  482c              LDR      r0,|L2.300|
00007c  f7fffffe          BL       LITE_syslog
;;;91     	log_debug("color size: %d", sizeof(COLOR_T));
000080  2003              MOVS     r0,#3
000082  9000              STR      r0,[sp,#0]
000084  a347              ADR      r3,|L2.420|
000086  2205              MOVS     r2,#5
000088  215b              MOVS     r1,#0x5b
00008a  4828              LDR      r0,|L2.300|
00008c  f7fffffe          BL       LITE_syslog
;;;92     
;;;93     	int i = 0;
000090  2000              MOVS     r0,#0
;;;94     
;;;95     	DOME_DEFAULT_T def;
;;;96     	uint8_t *def_p = (uint8_t *) &def;
000092  a901              ADD      r1,sp,#4
000094  4604              MOV      r4,r0
                  |L2.150|
;;;97     	for (i = 0; i < sizeof(DOME_DEFAULT_T); ++i) {
;;;98     		*(def_p + i) = i;
000096  5408              STRB     r0,[r1,r0]
000098  1c40              ADDS     r0,r0,#1
00009a  2872              CMP      r0,#0x72              ;97
00009c  d3fb              BCC      |L2.150|
                  |L2.158|
;;;99     	}
;;;100    
;;;101    	while (1) {
;;;102    		if (timer0_taskTimer_get()->flag_1ms) {
00009e  f7fffffe          BL       timer0_taskTimer_get
0000a2  7800              LDRB     r0,[r0,#0]
0000a4  2800              CMP      r0,#0
0000a6  d002              BEQ      |L2.174|
;;;103    			timer0_taskTimer_get()->flag_1ms = 0;
0000a8  f7fffffe          BL       timer0_taskTimer_get
0000ac  7004              STRB     r4,[r0,#0]
                  |L2.174|
;;;104    			//////////////////
;;;105    #if 0
;;;106    			dome_cnt++;
;;;107    			if (dome_running_param.speed >= 50) {
;;;108    				if (dome_cnt > (10 + (dome_running_param.speed - 50) / 3)) {
;;;109    					dome_cnt = 0;
;;;110    					app_dome_interrupter();
;;;111    				}
;;;112    			} else {
;;;113    				if (dome_cnt > (10 - (50 - dome_running_param.speed) / 6)) {
;;;114    					dome_cnt = 0;
;;;115    					app_dome_interrupter();
;;;116    				}
;;;117    			}
;;;118    #endif
;;;119    		}
;;;120    
;;;121    		if (timer0_taskTimer_get()->flag_10ms) {
0000ae  f7fffffe          BL       timer0_taskTimer_get
0000b2  7880              LDRB     r0,[r0,#2]
0000b4  2800              CMP      r0,#0
0000b6  d004              BEQ      |L2.194|
;;;122    			timer0_taskTimer_get()->flag_10ms = 0;
0000b8  f7fffffe          BL       timer0_taskTimer_get
0000bc  7084              STRB     r4,[r0,#2]
;;;123    			//////////////////
;;;124    			bsp_KeyScan();
0000be  f7fffffe          BL       bsp_KeyScan
                  |L2.194|
;;;125    
;;;126    		}
;;;127    		if (timer0_taskTimer_get()->flag_100ms) {
0000c2  f7fffffe          BL       timer0_taskTimer_get
0000c6  7900              LDRB     r0,[r0,#4]
0000c8  2800              CMP      r0,#0
0000ca  d002              BEQ      |L2.210|
;;;128    			timer0_taskTimer_get()->flag_100ms = 0;
0000cc  f7fffffe          BL       timer0_taskTimer_get
0000d0  7104              STRB     r4,[r0,#4]
                  |L2.210|
;;;129    			//////////////////
;;;130    //			app_uart_pro();
;;;131    //			app_2d4_pro();
;;;132    			//			app_work_100ms_pro();
;;;133    			//			Repeat_Pro();
;;;134    
;;;135    		}
;;;136    		if (timer0_taskTimer_get()->flag_500ms) {
0000d2  f7fffffe          BL       timer0_taskTimer_get
0000d6  7980              LDRB     r0,[r0,#6]
0000d8  2800              CMP      r0,#0
0000da  d002              BEQ      |L2.226|
;;;137    			timer0_taskTimer_get()->flag_500ms = 0;
0000dc  f7fffffe          BL       timer0_taskTimer_get
0000e0  7184              STRB     r4,[r0,#6]
                  |L2.226|
;;;138    			//////////////////
;;;139    
;;;140    		}
;;;141    		if (timer0_taskTimer_get()->flag_1s) {
0000e2  f7fffffe          BL       timer0_taskTimer_get
0000e6  7a80              LDRB     r0,[r0,#0xa]
0000e8  2800              CMP      r0,#0
0000ea  d00d              BEQ      |L2.264|
;;;142    			timer0_taskTimer_get()->flag_1s = 0;
0000ec  f7fffffe          BL       timer0_taskTimer_get
;;;143    			//////////////////
;;;144    			static uint32_t cnt = 0;
;;;145    			cnt++;
0000f0  4930              LDR      r1,|L2.436|
0000f2  7284              STRB     r4,[r0,#0xa]          ;142
0000f4  6808              LDR      r0,[r1,#0]  ; cnt
;;;146    			log_debug("I am alive %d", cnt);
0000f6  a330              ADR      r3,|L2.440|
0000f8  1c40              ADDS     r0,r0,#1              ;145
0000fa  6008              STR      r0,[r1,#0]  ; cnt
0000fc  9000              STR      r0,[sp,#0]
0000fe  2205              MOVS     r2,#5
000100  2192              MOVS     r1,#0x92
000102  480a              LDR      r0,|L2.300|
000104  f7fffffe          BL       LITE_syslog
                  |L2.264|
;;;147    
;;;148    			//			app_work_1s_pro();
;;;149    
;;;150    		}
;;;151    
;;;152    		//////
;;;153    		ucKeyCode = bsp_GetKey();
000108  f7fffffe          BL       bsp_GetKey
;;;154    		if (ucKeyCode != KEY_NONE) {
00010c  e7c7              B        |L2.158|
;;;155    			switch (ucKeyCode) {
;;;156    			case KEY_UP_K1:   //
;;;157    				break;
;;;158    			case KEY_DOWN_K1: {
;;;159    
;;;160    			}
;;;161    				break;
;;;162    			case KEY_LONG_K1:
;;;163    				break;
;;;164    			case KEY_UP_K2:   //
;;;165    				break;
;;;166    			case KEY_DOWN_K2:
;;;167    
;;;168    //				Relay_toggle();
;;;169    				break;
;;;170    			case KEY_LONG_K2:
;;;171    				break;
;;;172    			}
;;;173    		}
;;;174    
;;;175    	}
;;;176    
;;;177    }
;;;178    
                          ENDP

00010e  0000              DCW      0x0000
                  |L2.272|
000110  6c616d70          DCB      "lamp",0
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L2.280|
                          DCD      SystemCoreClock
                  |L2.284|
00011c  20435055          DCB      " CPU @ %dHz\r\n",0
000120  20402025
000124  64487a0d
000128  0a00    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L2.300|
                          DCD      ||.constdata||
                  |L2.304|
000130  2b2d2d2d          DCB      "+-------------------------------------+ ",0
000134  2d2d2d2d
000138  2d2d2d2d
00013c  2d2d2d2d
000140  2d2d2d2d
000144  2d2d2d2d
000148  2d2d2d2d
00014c  2d2d2d2d
000150  2d2d2d2d
000154  2d2d2b20
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L2.348|
00015c  64656661          DCB      "default size: %d",0
000160  756c7420
000164  73697a65
000168  3a202564
00016c  00      
00016d  00                DCB      0
00016e  00                DCB      0
00016f  00                DCB      0
                  |L2.368|
000170  646f6d65          DCB      "dome size: %d",0
000174  2073697a
000178  653a2025
00017c  6400    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L2.384|
000180  68656164          DCB      "header size: %d",0
000184  65722073
000188  697a653a
00018c  20256400
                  |L2.400|
000190  7375626d          DCB      "submode size: %d",0
000194  6f646520
000198  73697a65
00019c  3a202564
0001a0  00      
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L2.420|
0001a4  636f6c6f          DCB      "color size: %d",0
0001a8  72207369
0001ac  7a653a20
0001b0  256400  
0001b3  00                DCB      0
                  |L2.436|
                          DCD      ||.data||
                  |L2.440|
0001b8  4920616d          DCB      "I am alive %d",0
0001bc  20616c69
0001c0  76652025
0001c4  6400    
0001c6  00                DCB      0
0001c7  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000004  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ||cnt||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
