; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\main.crf ..\App\src\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;15     
;;;16     void SYS_Init(void) {
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0d              LDR      r4,|L1.60|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;17     	/* Unlock protected registers */
;;;18     	SYS_UnlockReg();
;;;19     #if 0
;;;20     	/* Set P5 multi-function pins for XTAL1 and XTAL2 */
;;;21     	SYS->P5_MFP &= ~(SYS_MFP_P50_Msk | SYS_MFP_P51_Msk);
;;;22     	SYS->P5_MFP |= (SYS_MFP_P50_XT1_IN | SYS_MFP_P51_XT1_OUT);
;;;23     
;;;24     	/*---------------------------------------------------------------------------------------------------------*/
;;;25     	/* Init System Clock                                                                                       */
;;;26     	/*---------------------------------------------------------------------------------------------------------*/
;;;27     
;;;28     	/* Enable external 12MHz XTAL, HIRC */
;;;29     	CLK->PWRCTL |= CLK_PWRCTL_XTL12M | CLK_PWRCTL_HIRCEN_Msk;
;;;30     
;;;31     	/* Waiting for clock ready */
;;;32     	CLK_WaitClockReady(CLK_STATUS_XTLSTB_Msk | CLK_STATUS_HIRCSTB_Msk);
;;;33     
;;;34     	/* Switch HCLK clock source to XTL */
;;;35     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_XTAL,CLK_CLKDIV_HCLK(1));
;;;36     
;;;37     	/* STCLK to XTL STCLK to XTL */
;;;38     	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_XTAL);
;;;39     #else
;;;40     
;;;41     	/* Enable  HIRC */
;;;42     //	CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
;;;43     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;44     	CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;45     
;;;46     	/* Wait for HIRC clock ready */
;;;47     	CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;48     
;;;49     	/* Select HCLK clock source as HIRC and and HCLK source divider as 1 */
;;;50     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;51     
;;;52     #endif
;;;53     
;;;54     	/* Set core clock as PLL_CLOCK from PLL */
;;;55     	CLK_SetCoreClock(PLL_CLOCK);
00002a  4805              LDR      r0,|L1.64|
00002c  f7fffffe          BL       CLK_SetCoreClock
;;;56     	/* To update the variable SystemCoreClock */
;;;57     	SystemCoreClockUpdate();
000030  f7fffffe          BL       SystemCoreClockUpdate
000034  2000              MOVS     r0,#0
000036  6020              STR      r0,[r4,#0]
;;;58     
;;;59     	/* Lock protected registers */
;;;60     	SYS_LockReg();
;;;61     }
000038  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x50000100
                  |L1.64|
                          DCD      0x02faf080

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     int main(void) {
000000  b508              PUSH     {r3,lr}
;;;67     	uint8_t ucKeyCode;
;;;68     	uint8_t dome_cnt = 0;
;;;69     
;;;70     	/* Init System */
;;;71     	SYS_Init();
000002  f7fffffe          BL       SYS_Init
;;;72     
;;;73     	bsp_Init();
000006  f7fffffe          BL       bsp_Init
;;;74     
;;;75     #if 1
;;;76     	LITE_openlog("lamp");
00000a  a043              ADR      r0,|L2.280|
00000c  f7fffffe          BL       LITE_openlog
;;;77     	LITE_set_loglevel(LOG_DEBUG_LEVEL);
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       LITE_set_loglevel
;;;78     #else
;;;79     	LITE_closelog();
;;;80     #endif
;;;81     
;;;82     	log_debug(" CPU @ %dHz\r\n", SystemCoreClock);
000016  4842              LDR      r0,|L2.288|
000018  a342              ADR      r3,|L2.292|
00001a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001c  9000              STR      r0,[sp,#0]
00001e  2205              MOVS     r2,#5
000020  2152              MOVS     r1,#0x52
000022  4844              LDR      r0,|L2.308|
000024  f7fffffe          BL       LITE_syslog
;;;83     
;;;84     	log_debug("+-------------------------------------+ ");
000028  a343              ADR      r3,|L2.312|
00002a  2205              MOVS     r2,#5
00002c  2154              MOVS     r1,#0x54
00002e  4841              LDR      r0,|L2.308|
000030  f7fffffe          BL       LITE_syslog
;;;85     #if 0
;;;86     	log_debug("+-------------------------------------+ ");
;;;87     
;;;88     	log_debug("default size: %d", sizeof(DOME_DEFAULT_T));
;;;89     	log_debug("dome size: %d", sizeof(DOME_RUNNING_T));
;;;90     	log_debug("header size: %d", sizeof(DOME_HEADER_T));
;;;91     	log_debug("submode size: %d", sizeof(SUBDOME_T));
;;;92     	log_debug("color size: %d", sizeof(COLOR_T));
;;;93     #endif
;;;94     //	int i = 0;
;;;95     
;;;96     	/**************/
;;;97     	app_2d4_init();
000034  f7fffffe          BL       app_2d4_init
;;;98     	app_work_Init();
000038  f7fffffe          BL       app_work_Init
00003c  2400              MOVS     r4,#0
                  |L2.62|
;;;99     
;;;100    	/**************/
;;;101    	while (1) {
;;;102    		if (timer0_taskTimer_get()->flag_1ms) {
00003e  f7fffffe          BL       timer0_taskTimer_get
000042  7800              LDRB     r0,[r0,#0]
000044  2800              CMP      r0,#0
000046  d002              BEQ      |L2.78|
;;;103    			timer0_taskTimer_get()->flag_1ms = 0;
000048  f7fffffe          BL       timer0_taskTimer_get
00004c  7004              STRB     r4,[r0,#0]
                  |L2.78|
;;;104    			//////////////////
;;;105    #if 0
;;;106    			dome_cnt++;
;;;107    			if (dome_running_param.speed >= 50) {
;;;108    				if (dome_cnt > (10 + (dome_running_param.speed - 50) / 3)) {
;;;109    					dome_cnt = 0;
;;;110    					app_dome_interrupter();
;;;111    				}
;;;112    			} else {
;;;113    				if (dome_cnt > (10 - (50 - dome_running_param.speed) / 6)) {
;;;114    					dome_cnt = 0;
;;;115    					app_dome_interrupter();
;;;116    				}
;;;117    			}
;;;118    #endif
;;;119    		}
;;;120    
;;;121    		if (timer0_taskTimer_get()->flag_10ms) {
00004e  f7fffffe          BL       timer0_taskTimer_get
000052  7880              LDRB     r0,[r0,#2]
000054  2800              CMP      r0,#0
000056  d006              BEQ      |L2.102|
;;;122    			timer0_taskTimer_get()->flag_10ms = 0;
000058  f7fffffe          BL       timer0_taskTimer_get
00005c  7084              STRB     r4,[r0,#2]
;;;123    			//////////////////
;;;124    			bsp_KeyScan();
00005e  f7fffffe          BL       bsp_KeyScan
;;;125    //			app_uart_pro();
;;;126    			app_2d4_pro();
000062  f7fffffe          BL       app_2d4_pro
                  |L2.102|
;;;127    		}
;;;128    		if (timer0_taskTimer_get()->flag_100ms) {
000066  f7fffffe          BL       timer0_taskTimer_get
00006a  7900              LDRB     r0,[r0,#4]
00006c  2800              CMP      r0,#0
00006e  d002              BEQ      |L2.118|
;;;129    			timer0_taskTimer_get()->flag_100ms = 0;
000070  f7fffffe          BL       timer0_taskTimer_get
000074  7104              STRB     r4,[r0,#4]
                  |L2.118|
;;;130    			//////////////////
;;;131    
;;;132    //			app_work_100ms_pro();
;;;133    //			Repeat_Pro();
;;;134    
;;;135    		}
;;;136    		if (timer0_taskTimer_get()->flag_500ms) {
000076  f7fffffe          BL       timer0_taskTimer_get
00007a  7980              LDRB     r0,[r0,#6]
00007c  2800              CMP      r0,#0
00007e  d002              BEQ      |L2.134|
;;;137    			timer0_taskTimer_get()->flag_500ms = 0;
000080  f7fffffe          BL       timer0_taskTimer_get
000084  7184              STRB     r4,[r0,#6]
                  |L2.134|
;;;138    			//////////////////
;;;139    
;;;140    		}
;;;141    		if (timer0_taskTimer_get()->flag_1s) {
000086  f7fffffe          BL       timer0_taskTimer_get
00008a  7a80              LDRB     r0,[r0,#0xa]
00008c  2800              CMP      r0,#0
00008e  d00d              BEQ      |L2.172|
;;;142    			timer0_taskTimer_get()->flag_1s = 0;
000090  f7fffffe          BL       timer0_taskTimer_get
;;;143    			//////////////////
;;;144    			static uint32_t cnt = 0;
;;;145    			cnt++;
000094  4933              LDR      r1,|L2.356|
000096  7284              STRB     r4,[r0,#0xa]          ;142
000098  6808              LDR      r0,[r1,#0]  ; cnt
;;;146    			log_debug("I am alive %d", cnt);
00009a  a333              ADR      r3,|L2.360|
00009c  1c40              ADDS     r0,r0,#1              ;145
00009e  6008              STR      r0,[r1,#0]  ; cnt
0000a0  9000              STR      r0,[sp,#0]
0000a2  2205              MOVS     r2,#5
0000a4  2192              MOVS     r1,#0x92
0000a6  4823              LDR      r0,|L2.308|
0000a8  f7fffffe          BL       LITE_syslog
                  |L2.172|
;;;147    
;;;148    			//			app_work_1s_pro();
;;;149    
;;;150    		}
;;;151    
;;;152    		//////
;;;153    		ucKeyCode = bsp_GetKey();
0000ac  f7fffffe          BL       bsp_GetKey
;;;154    		if (ucKeyCode != KEY_NONE) {
0000b0  2800              CMP      r0,#0
0000b2  d0c4              BEQ      |L2.62|
;;;155    			switch (ucKeyCode) {
0000b4  0003              MOVS     r3,r0
0000b6  f7fffffe          BL       __ARM_common_switch8
0000ba  0705              DCB      0x07,0x05
0000bc  0a061b23          DCB      0x0a,0x06,0x1b,0x23
0000c0  1f270500          DCB      0x1f,0x27,0x05,0x00
0000c4  e7bb              B        |L2.62|
;;;156    			case KEY_UP_K1:   //ACC
;;;157    				log_debug("ACC KEY up");
0000c6  2205              MOVS     r2,#5
0000c8  a32b              ADR      r3,|L2.376|
0000ca  219d              MOVS     r1,#0x9d
;;;158    
;;;159    				break;
0000cc  e01f              B        |L2.270|
;;;160    			case KEY_DOWN_K1:
;;;161    				log_debug("relay %s", Relay_IsOn() ? "on" : "off");
0000ce  f7fffffe          BL       Relay_IsOn
0000d2  2800              CMP      r0,#0
0000d4  d001              BEQ      |L2.218|
0000d6  a02b              ADR      r0,|L2.388|
0000d8  e000              B        |L2.220|
                  |L2.218|
0000da  a02b              ADR      r0,|L2.392|
                  |L2.220|
0000dc  9000              STR      r0,[sp,#0]
0000de  a32b              ADR      r3,|L2.396|
0000e0  2205              MOVS     r2,#5
0000e2  21a1              MOVS     r1,#0xa1
0000e4  4813              LDR      r0,|L2.308|
0000e6  f7fffffe          BL       LITE_syslog
;;;162    
;;;163    				Relay_toggle();
0000ea  f7fffffe          BL       Relay_toggle
;;;164    				break;
0000ee  e7a6              B        |L2.62|
;;;165    			case KEY_LONG_K1:
;;;166    				log_debug("ACC KEY down");
0000f0  2205              MOVS     r2,#5
0000f2  a329              ADR      r3,|L2.408|
0000f4  21a6              MOVS     r1,#0xa6
;;;167    				break;
0000f6  e00a              B        |L2.270|
;;;168    			case KEY_UP_K2:   //LED
;;;169    				log_debug("LED KEY up");
0000f8  2205              MOVS     r2,#5
0000fa  a32b              ADR      r3,|L2.424|
0000fc  21a9              MOVS     r1,#0xa9
;;;170    				break;
0000fe  e006              B        |L2.270|
;;;171    			case KEY_DOWN_K2:
;;;172    				log_debug("LED KEY down");
000100  2205              MOVS     r2,#5
000102  a32c              ADR      r3,|L2.436|
000104  21ac              MOVS     r1,#0xac
;;;173    
;;;174    				break;
000106  e002              B        |L2.270|
;;;175    			case KEY_LONG_K2:
;;;176    				log_debug("LED KEY long");
000108  2205              MOVS     r2,#5
00010a  a32e              ADR      r3,|L2.452|
00010c  21b0              MOVS     r1,#0xb0
                  |L2.270|
00010e  4809              LDR      r0,|L2.308|
000110  f7fffffe          BL       LITE_syslog
000114  e793              B        |L2.62|
;;;177    				break;
;;;178    			}
;;;179    		}
;;;180    
;;;181    	}
;;;182    
;;;183    }
;;;184    
                          ENDP

000116  0000              DCW      0x0000
                  |L2.280|
000118  6c616d70          DCB      "lamp",0
00011c  00      
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L2.288|
                          DCD      SystemCoreClock
                  |L2.292|
000124  20435055          DCB      " CPU @ %dHz\r\n",0
000128  20402025
00012c  64487a0d
000130  0a00    
000132  00                DCB      0
000133  00                DCB      0
                  |L2.308|
                          DCD      ||.constdata||
                  |L2.312|
000138  2b2d2d2d          DCB      "+-------------------------------------+ ",0
00013c  2d2d2d2d
000140  2d2d2d2d
000144  2d2d2d2d
000148  2d2d2d2d
00014c  2d2d2d2d
000150  2d2d2d2d
000154  2d2d2d2d
000158  2d2d2d2d
00015c  2d2d2b20
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L2.356|
                          DCD      ||.data||
                  |L2.360|
000168  4920616d          DCB      "I am alive %d",0
00016c  20616c69
000170  76652025
000174  6400    
000176  00                DCB      0
000177  00                DCB      0
                  |L2.376|
000178  41434320          DCB      "ACC KEY up",0
00017c  4b455920
000180  757000  
000183  00                DCB      0
                  |L2.388|
000184  6f6e00            DCB      "on",0
000187  00                DCB      0
                  |L2.392|
000188  6f666600          DCB      "off",0
                  |L2.396|
00018c  72656c61          DCB      "relay %s",0
000190  79202573
000194  00      
000195  00                DCB      0
000196  00                DCB      0
000197  00                DCB      0
                  |L2.408|
000198  41434320          DCB      "ACC KEY down",0
00019c  4b455920
0001a0  646f776e
0001a4  00      
0001a5  00                DCB      0
0001a6  00                DCB      0
0001a7  00                DCB      0
                  |L2.424|
0001a8  4c454420          DCB      "LED KEY up",0
0001ac  4b455920
0001b0  757000  
0001b3  00                DCB      0
                  |L2.436|
0001b4  4c454420          DCB      "LED KEY down",0
0001b8  4b455920
0001bc  646f776e
0001c0  00      
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L2.452|
0001c4  4c454420          DCB      "LED KEY long",0
0001c8  4b455920
0001cc  6c6f6e67
0001d0  00      
0001d1  00                DCB      0
0001d2  00                DCB      0
0001d3  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000004  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ||cnt||
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L21.16|
00000e  461d              MOV      r5,r3
                  |L21.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\App\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
