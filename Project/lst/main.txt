; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\main.crf ..\App\src\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;15     
;;;16     void SYS_Init(void) {
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0d              LDR      r4,|L1.60|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;17     	/* Unlock protected registers */
;;;18     	SYS_UnlockReg();
;;;19     #if 0
;;;20     	/* Set P5 multi-function pins for XTAL1 and XTAL2 */
;;;21     	SYS->P5_MFP &= ~(SYS_MFP_P50_Msk | SYS_MFP_P51_Msk);
;;;22     	SYS->P5_MFP |= (SYS_MFP_P50_XT1_IN | SYS_MFP_P51_XT1_OUT);
;;;23     
;;;24     	/*---------------------------------------------------------------------------------------------------------*/
;;;25     	/* Init System Clock                                                                                       */
;;;26     	/*---------------------------------------------------------------------------------------------------------*/
;;;27     
;;;28     	/* Enable external 12MHz XTAL, HIRC */
;;;29     	CLK->PWRCTL |= CLK_PWRCTL_XTL12M | CLK_PWRCTL_HIRCEN_Msk;
;;;30     
;;;31     	/* Waiting for clock ready */
;;;32     	CLK_WaitClockReady(CLK_STATUS_XTLSTB_Msk | CLK_STATUS_HIRCSTB_Msk);
;;;33     
;;;34     	/* Switch HCLK clock source to XTL */
;;;35     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_XTAL,CLK_CLKDIV_HCLK(1));
;;;36     
;;;37     	/* STCLK to XTL STCLK to XTL */
;;;38     	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_XTAL);
;;;39     #else
;;;40     
;;;41     	/* Enable  HIRC */
;;;42     //	CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
;;;43     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;44     	CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;45     
;;;46     	/* Wait for HIRC clock ready */
;;;47     	CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;48     
;;;49     	/* Select HCLK clock source as HIRC and and HCLK source divider as 1 */
;;;50     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;51     
;;;52     #endif
;;;53     
;;;54     	/* Set core clock as PLL_CLOCK from PLL */
;;;55     	CLK_SetCoreClock(PLL_CLOCK);
00002a  4805              LDR      r0,|L1.64|
00002c  f7fffffe          BL       CLK_SetCoreClock
;;;56     	/* To update the variable SystemCoreClock */
;;;57     	SystemCoreClockUpdate();
000030  f7fffffe          BL       SystemCoreClockUpdate
000034  2000              MOVS     r0,#0
000036  6020              STR      r0,[r4,#0]
;;;58     
;;;59     	/* Lock protected registers */
;;;60     	SYS_LockReg();
;;;61     }
000038  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x50000100
                  |L1.64|
                          DCD      0x02faf080

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     int main(void) {
000000  b508              PUSH     {r3,lr}
;;;67     	uint8_t ucKeyCode;
;;;68     	uint8_t dome_cnt = 0;
;;;69     
;;;70     	/* Init System */
;;;71     	SYS_Init();
000002  f7fffffe          BL       SYS_Init
;;;72     
;;;73     	bsp_Init();
000006  f7fffffe          BL       bsp_Init
;;;74     
;;;75     #if 1
;;;76     	LITE_openlog("lamp");
00000a  a03e              ADR      r0,|L2.260|
00000c  f7fffffe          BL       LITE_openlog
;;;77     	LITE_set_loglevel(LOG_DEBUG_LEVEL);
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       LITE_set_loglevel
;;;78     #else
;;;79     	LITE_closelog();
;;;80     #endif
;;;81     
;;;82     	log_debug(" CPU @ %dHz\r\n", SystemCoreClock);
000016  483d              LDR      r0,|L2.268|
000018  a33d              ADR      r3,|L2.272|
00001a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001c  9000              STR      r0,[sp,#0]
00001e  2205              MOVS     r2,#5
000020  2152              MOVS     r1,#0x52
000022  483f              LDR      r0,|L2.288|
000024  f7fffffe          BL       LITE_syslog
;;;83     
;;;84     	log_debug("+-------------------------------------+ ");
000028  a33e              ADR      r3,|L2.292|
00002a  2205              MOVS     r2,#5
00002c  2154              MOVS     r1,#0x54
00002e  483c              LDR      r0,|L2.288|
000030  f7fffffe          BL       LITE_syslog
;;;85     	log_debug("+-------------------------------------+ ");
000034  a33b              ADR      r3,|L2.292|
000036  2205              MOVS     r2,#5
000038  2155              MOVS     r1,#0x55
00003a  4839              LDR      r0,|L2.288|
00003c  f7fffffe          BL       LITE_syslog
;;;86     
;;;87     	log_debug("default size: %d", sizeof(DOME_DEFAULT_T));
000040  207a              MOVS     r0,#0x7a
000042  9000              STR      r0,[sp,#0]
000044  a342              ADR      r3,|L2.336|
000046  2205              MOVS     r2,#5
000048  2157              MOVS     r1,#0x57
00004a  4835              LDR      r0,|L2.288|
00004c  f7fffffe          BL       LITE_syslog
;;;88     	log_debug("dome size: %d", sizeof(DOME_RUNNING_T));
000050  2008              MOVS     r0,#8
000052  9000              STR      r0,[sp,#0]
000054  a343              ADR      r3,|L2.356|
000056  2205              MOVS     r2,#5
000058  2158              MOVS     r1,#0x58
00005a  4831              LDR      r0,|L2.288|
00005c  f7fffffe          BL       LITE_syslog
;;;89     	log_debug("header size: %d", sizeof(DOME_HEADER_T));
000060  200a              MOVS     r0,#0xa
000062  9000              STR      r0,[sp,#0]
000064  a343              ADR      r3,|L2.372|
000066  2205              MOVS     r2,#5
000068  2159              MOVS     r1,#0x59
00006a  482d              LDR      r0,|L2.288|
00006c  f7fffffe          BL       LITE_syslog
;;;90     	log_debug("submode size: %d", sizeof(SUBDOME_T));
000070  200e              MOVS     r0,#0xe
000072  9000              STR      r0,[sp,#0]
000074  a343              ADR      r3,|L2.388|
000076  2205              MOVS     r2,#5
000078  215a              MOVS     r1,#0x5a
00007a  4829              LDR      r0,|L2.288|
00007c  f7fffffe          BL       LITE_syslog
;;;91     log_debug("color size: %d", sizeof(COLOR_T));
000080  2003              MOVS     r0,#3
000082  9000              STR      r0,[sp,#0]
000084  a344              ADR      r3,|L2.408|
000086  2205              MOVS     r2,#5
000088  215b              MOVS     r1,#0x5b
00008a  4825              LDR      r0,|L2.288|
00008c  f7fffffe          BL       LITE_syslog
000090  2400              MOVS     r4,#0
                  |L2.146|
;;;92     	while (1) {
;;;93     		if (timer0_taskTimer_get()->flag_1ms) {
000092  f7fffffe          BL       timer0_taskTimer_get
000096  7800              LDRB     r0,[r0,#0]
000098  2800              CMP      r0,#0
00009a  d002              BEQ      |L2.162|
;;;94     			timer0_taskTimer_get()->flag_1ms = 0;
00009c  f7fffffe          BL       timer0_taskTimer_get
0000a0  7004              STRB     r4,[r0,#0]
                  |L2.162|
;;;95     			//////////////////
;;;96     #if 0
;;;97     			dome_cnt++;
;;;98     			if (dome_running_param.speed >= 50) {
;;;99     				if (dome_cnt > (10 + (dome_running_param.speed - 50) / 3)) {
;;;100    					dome_cnt = 0;
;;;101    					app_dome_interrupter();
;;;102    				}
;;;103    			} else {
;;;104    				if (dome_cnt > (10 - (50 - dome_running_param.speed) / 6)) {
;;;105    					dome_cnt = 0;
;;;106    					app_dome_interrupter();
;;;107    				}
;;;108    			}
;;;109    #endif
;;;110    		}
;;;111    
;;;112    		if (timer0_taskTimer_get()->flag_10ms) {
0000a2  f7fffffe          BL       timer0_taskTimer_get
0000a6  7880              LDRB     r0,[r0,#2]
0000a8  2800              CMP      r0,#0
0000aa  d004              BEQ      |L2.182|
;;;113    			timer0_taskTimer_get()->flag_10ms = 0;
0000ac  f7fffffe          BL       timer0_taskTimer_get
0000b0  7084              STRB     r4,[r0,#2]
;;;114    			//////////////////
;;;115    			bsp_KeyScan();
0000b2  f7fffffe          BL       bsp_KeyScan
                  |L2.182|
;;;116    
;;;117    		}
;;;118    		if (timer0_taskTimer_get()->flag_100ms) {
0000b6  f7fffffe          BL       timer0_taskTimer_get
0000ba  7900              LDRB     r0,[r0,#4]
0000bc  2800              CMP      r0,#0
0000be  d002              BEQ      |L2.198|
;;;119    			timer0_taskTimer_get()->flag_100ms = 0;
0000c0  f7fffffe          BL       timer0_taskTimer_get
0000c4  7104              STRB     r4,[r0,#4]
                  |L2.198|
;;;120    			//////////////////
;;;121    //			app_uart_pro();
;;;122    //			app_2d4_pro();
;;;123    			//			app_work_100ms_pro();
;;;124    			//			Repeat_Pro();
;;;125    
;;;126    		}
;;;127    		if (timer0_taskTimer_get()->flag_500ms) {
0000c6  f7fffffe          BL       timer0_taskTimer_get
0000ca  7980              LDRB     r0,[r0,#6]
0000cc  2800              CMP      r0,#0
0000ce  d002              BEQ      |L2.214|
;;;128    			timer0_taskTimer_get()->flag_500ms = 0;
0000d0  f7fffffe          BL       timer0_taskTimer_get
0000d4  7184              STRB     r4,[r0,#6]
                  |L2.214|
;;;129    			//////////////////
;;;130    
;;;131    		}
;;;132    		if (timer0_taskTimer_get()->flag_1s) {
0000d6  f7fffffe          BL       timer0_taskTimer_get
0000da  7a80              LDRB     r0,[r0,#0xa]
0000dc  2800              CMP      r0,#0
0000de  d00d              BEQ      |L2.252|
;;;133    			timer0_taskTimer_get()->flag_1s = 0;
0000e0  f7fffffe          BL       timer0_taskTimer_get
;;;134    			//////////////////
;;;135    			static uint32_t cnt = 0;
;;;136    			cnt++;
0000e4  4930              LDR      r1,|L2.424|
0000e6  7284              STRB     r4,[r0,#0xa]          ;133
0000e8  6808              LDR      r0,[r1,#0]  ; cnt
;;;137    			log_debug("I am alive %d", cnt);
0000ea  a330              ADR      r3,|L2.428|
0000ec  1c40              ADDS     r0,r0,#1              ;136
0000ee  6008              STR      r0,[r1,#0]  ; cnt
0000f0  9000              STR      r0,[sp,#0]
0000f2  2205              MOVS     r2,#5
0000f4  2189              MOVS     r1,#0x89
0000f6  480a              LDR      r0,|L2.288|
0000f8  f7fffffe          BL       LITE_syslog
                  |L2.252|
;;;138    
;;;139    			//			app_work_1s_pro();
;;;140    
;;;141    		}
;;;142    
;;;143    		//////
;;;144    		ucKeyCode = bsp_GetKey();
0000fc  f7fffffe          BL       bsp_GetKey
;;;145    		if (ucKeyCode != KEY_NONE) {
000100  e7c7              B        |L2.146|
;;;146    			switch (ucKeyCode) {
;;;147    			case KEY_UP_K1:   //
;;;148    				break;
;;;149    			case KEY_DOWN_K1: {
;;;150    
;;;151    			}
;;;152    				break;
;;;153    			case KEY_LONG_K1:
;;;154    				break;
;;;155    			case KEY_UP_K2:   //
;;;156    				break;
;;;157    			case KEY_DOWN_K2:
;;;158    
;;;159    //				Relay_toggle();
;;;160    				break;
;;;161    			case KEY_LONG_K2:
;;;162    				break;
;;;163    			}
;;;164    		}
;;;165    
;;;166    	}
;;;167    
;;;168    }
;;;169    
                          ENDP

000102  0000              DCW      0x0000
                  |L2.260|
000104  6c616d70          DCB      "lamp",0
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L2.268|
                          DCD      SystemCoreClock
                  |L2.272|
000110  20435055          DCB      " CPU @ %dHz\r\n",0
000114  20402025
000118  64487a0d
00011c  0a00    
00011e  00                DCB      0
00011f  00                DCB      0
                  |L2.288|
                          DCD      ||.constdata||
                  |L2.292|
000124  2b2d2d2d          DCB      "+-------------------------------------+ ",0
000128  2d2d2d2d
00012c  2d2d2d2d
000130  2d2d2d2d
000134  2d2d2d2d
000138  2d2d2d2d
00013c  2d2d2d2d
000140  2d2d2d2d
000144  2d2d2d2d
000148  2d2d2b20
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L2.336|
000150  64656661          DCB      "default size: %d",0
000154  756c7420
000158  73697a65
00015c  3a202564
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L2.356|
000164  646f6d65          DCB      "dome size: %d",0
000168  2073697a
00016c  653a2025
000170  6400    
000172  00                DCB      0
000173  00                DCB      0
                  |L2.372|
000174  68656164          DCB      "header size: %d",0
000178  65722073
00017c  697a653a
000180  20256400
                  |L2.388|
000184  7375626d          DCB      "submode size: %d",0
000188  6f646520
00018c  73697a65
000190  3a202564
000194  00      
000195  00                DCB      0
000196  00                DCB      0
000197  00                DCB      0
                  |L2.408|
000198  636f6c6f          DCB      "color size: %d",0
00019c  72207369
0001a0  7a653a20
0001a4  256400  
0001a7  00                DCB      0
                  |L2.424|
                          DCD      ||.data||
                  |L2.428|
0001ac  4920616d          DCB      "I am alive %d",0
0001b0  20616c69
0001b4  76652025
0001b8  6400    
0001ba  00                DCB      0
0001bb  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000004  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ||cnt||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\App\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
