; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\main.crf ..\App\src\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;15     
;;;16     void SYS_Init(void) {
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0d              LDR      r4,|L1.60|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;17     	/* Unlock protected registers */
;;;18     	SYS_UnlockReg();
;;;19     #if 0
;;;20     	/* Set P5 multi-function pins for XTAL1 and XTAL2 */
;;;21     	SYS->P5_MFP &= ~(SYS_MFP_P50_Msk | SYS_MFP_P51_Msk);
;;;22     	SYS->P5_MFP |= (SYS_MFP_P50_XT1_IN | SYS_MFP_P51_XT1_OUT);
;;;23     
;;;24     	/*---------------------------------------------------------------------------------------------------------*/
;;;25     	/* Init System Clock                                                                                       */
;;;26     	/*---------------------------------------------------------------------------------------------------------*/
;;;27     
;;;28     	/* Enable external 12MHz XTAL, HIRC */
;;;29     	CLK->PWRCTL |= CLK_PWRCTL_XTL12M | CLK_PWRCTL_HIRCEN_Msk;
;;;30     
;;;31     	/* Waiting for clock ready */
;;;32     	CLK_WaitClockReady(CLK_STATUS_XTLSTB_Msk | CLK_STATUS_HIRCSTB_Msk);
;;;33     
;;;34     	/* Switch HCLK clock source to XTL */
;;;35     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_XTAL,CLK_CLKDIV_HCLK(1));
;;;36     
;;;37     	/* STCLK to XTL STCLK to XTL */
;;;38     	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_XTAL);
;;;39     #else
;;;40     
;;;41     	/* Enable  HIRC */
;;;42     //	CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
;;;43     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;44     	CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;45     
;;;46     	/* Wait for HIRC clock ready */
;;;47     	CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;48     
;;;49     	/* Select HCLK clock source as HIRC and and HCLK source divider as 1 */
;;;50     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;51     
;;;52     #endif
;;;53     
;;;54     	/* Set core clock as PLL_CLOCK from PLL */
;;;55     	CLK_SetCoreClock(PLL_CLOCK);
00002a  4805              LDR      r0,|L1.64|
00002c  f7fffffe          BL       CLK_SetCoreClock
;;;56     	/* To update the variable SystemCoreClock */
;;;57     	SystemCoreClockUpdate();
000030  f7fffffe          BL       SystemCoreClockUpdate
000034  2000              MOVS     r0,#0
000036  6020              STR      r0,[r4,#0]
;;;58     
;;;59     	/* Lock protected registers */
;;;60     	SYS_LockReg();
;;;61     }
000038  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x50000100
                  |L1.64|
                          DCD      0x02faf080

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     int main(void) {
000000  b51f              PUSH     {r0-r4,lr}
;;;67     	uint8_t ucKeyCode;
;;;68     	uint8_t dome_cnt = 0;
000002  2400              MOVS     r4,#0
;;;69     
;;;70     	/* Init System */
;;;71     	SYS_Init();
000004  f7fffffe          BL       SYS_Init
;;;72     
;;;73     #if 1
;;;74     	LITE_openlog("lamp");
000008  a074              ADR      r0,|L2.476|
00000a  f7fffffe          BL       LITE_openlog
;;;75     	LITE_set_loglevel(LOG_DEBUG_LEVEL);
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       LITE_set_loglevel
;;;76     #else
;;;77     	LITE_closelog();
;;;78     #endif
;;;79     
;;;80     	bsp_Init();
000014  f7fffffe          BL       bsp_Init
;;;81     
;;;82     	log_debug(" CPU @ %dHz\r\n", SystemCoreClock);
000018  4872              LDR      r0,|L2.484|
00001a  a373              ADR      r3,|L2.488|
00001c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001e  9000              STR      r0,[sp,#0]
000020  2205              MOVS     r2,#5
000022  2152              MOVS     r1,#0x52
000024  4874              LDR      r0,|L2.504|
000026  f7fffffe          BL       LITE_syslog
;;;83     
;;;84     	log_debug("+-------------------------------------+ ");
00002a  a374              ADR      r3,|L2.508|
00002c  2205              MOVS     r2,#5
00002e  2154              MOVS     r1,#0x54
000030  4871              LDR      r0,|L2.504|
000032  f7fffffe          BL       LITE_syslog
;;;85     #if 0
;;;86     	log_debug("+-------------------------------------+ ");
;;;87     
;;;88     	log_debug("default size: %d", sizeof(DOME_DEFAULT_T));
;;;89     	log_debug("dome size: %d", sizeof(DOME_RUNNING_T));
;;;90     	log_debug("header size: %d", sizeof(DOME_HEADER_T));
;;;91     	log_debug("submode size: %d", sizeof(SUBDOME_T));
;;;92     	log_debug("color size: %d", sizeof(COLOR_T));
;;;93     #endif
;;;94     
;;;95     	/**************/
;;;96     
;;;97     	app_work_Init();
000036  f7fffffe          BL       app_work_Init
;;;98     
;;;99     	app_uart_Init();
00003a  f7fffffe          BL       app_uart_Init
;;;100    	app_dome_Init();
00003e  f7fffffe          BL       app_dome_Init
000042  2500              MOVS     r5,#0
;;;101    
;;;102    	/**************/
;;;103    
;;;104    	while (1) {
;;;105    		if (timer0_taskTimer_get()->flag_1ms) {
;;;106    			timer0_taskTimer_get()->flag_1ms = 0;
;;;107    			//////////////////
;;;108    #if 1
;;;109    			dome_cnt++;
;;;110    			if (dome_running_param.speed >= 50) {
;;;111    				if (dome_cnt > (10 + (dome_running_param.speed - 50) / 3)) {
;;;112    					dome_cnt = 0;
;;;113    					app_dome_interrupter();
;;;114    				}
;;;115    			} else {
;;;116    				if (dome_cnt > (10 - (50 - dome_running_param.speed) / 6)) {
;;;117    					dome_cnt = 0;
;;;118    					app_dome_interrupter();
;;;119    				}
;;;120    			}
;;;121    #endif
;;;122    		}
;;;123    
;;;124    		if (timer0_taskTimer_get()->flag_10ms) {
;;;125    			timer0_taskTimer_get()->flag_10ms = 0;
;;;126    			//////////////////
;;;127    			static uint8_t flag_2d4 = 0;
;;;128    			if (flag_2d4 == 0) {
000044  4e78              LDR      r6,|L2.552|
                  |L2.70|
000046  f7fffffe          BL       timer0_taskTimer_get
00004a  7800              LDRB     r0,[r0,#0]            ;105
00004c  2800              CMP      r0,#0                 ;105
00004e  d01a              BEQ      |L2.134|
000050  f7fffffe          BL       timer0_taskTimer_get
000054  7005              STRB     r5,[r0,#0]            ;106
000056  4875              LDR      r0,|L2.556|
000058  1c64              ADDS     r4,r4,#1              ;106
00005a  7840              LDRB     r0,[r0,#1]            ;110  ; dome_running_param
00005c  b2e4              UXTB     r4,r4                 ;109
00005e  2832              CMP      r0,#0x32              ;110
000060  d305              BCC      |L2.110|
000062  2103              MOVS     r1,#3                 ;111
000064  3832              SUBS     r0,r0,#0x32           ;111
000066  f7fffffe          BL       __aeabi_idivmod
00006a  300a              ADDS     r0,r0,#0xa            ;111
00006c  e006              B        |L2.124|
                  |L2.110|
00006e  2132              MOVS     r1,#0x32              ;116
000070  1a08              SUBS     r0,r1,r0              ;116
000072  2106              MOVS     r1,#6                 ;116
000074  f7fffffe          BL       __aeabi_idivmod
000078  210a              MOVS     r1,#0xa               ;116
00007a  1a08              SUBS     r0,r1,r0              ;116
                  |L2.124|
00007c  42a0              CMP      r0,r4                 ;116
00007e  da02              BGE      |L2.134|
000080  2400              MOVS     r4,#0                 ;117
000082  f7fffffe          BL       app_dome_interrupter
                  |L2.134|
000086  f7fffffe          BL       timer0_taskTimer_get
00008a  7880              LDRB     r0,[r0,#2]            ;124
00008c  2800              CMP      r0,#0                 ;124
00008e  d00f              BEQ      |L2.176|
000090  f7fffffe          BL       timer0_taskTimer_get
000094  7085              STRB     r5,[r0,#2]            ;125
000096  7830              LDRB     r0,[r6,#0]  ; flag_2d4
000098  2800              CMP      r0,#0
00009a  d103              BNE      |L2.164|
;;;129    				flag_2d4 = 1;
00009c  2001              MOVS     r0,#1
00009e  7030              STRB     r0,[r6,#0]
;;;130    				app_2d4_init();
0000a0  f7fffffe          BL       app_2d4_init
                  |L2.164|
;;;131    			}
;;;132    			bsp_KeyScan();
0000a4  f7fffffe          BL       bsp_KeyScan
;;;133    
;;;134    			app_2d4_pro();
0000a8  f7fffffe          BL       app_2d4_pro
;;;135    
;;;136    			app_uart_pro();
0000ac  f7fffffe          BL       app_uart_pro
                  |L2.176|
;;;137    
;;;138    		}
;;;139    		if (timer0_taskTimer_get()->flag_100ms) {
0000b0  f7fffffe          BL       timer0_taskTimer_get
0000b4  7900              LDRB     r0,[r0,#4]
0000b6  2800              CMP      r0,#0
0000b8  d002              BEQ      |L2.192|
;;;140    			timer0_taskTimer_get()->flag_100ms = 0;
0000ba  f7fffffe          BL       timer0_taskTimer_get
0000be  7105              STRB     r5,[r0,#4]
                  |L2.192|
;;;141    			//////////////////
;;;142    
;;;143    //			app_work_100ms_pro();
;;;144    //			Repeat_Pro();
;;;145    
;;;146    		}
;;;147    		if (timer0_taskTimer_get()->flag_500ms) {
0000c0  f7fffffe          BL       timer0_taskTimer_get
0000c4  7980              LDRB     r0,[r0,#6]
0000c6  2800              CMP      r0,#0
0000c8  d002              BEQ      |L2.208|
;;;148    			timer0_taskTimer_get()->flag_500ms = 0;
0000ca  f7fffffe          BL       timer0_taskTimer_get
0000ce  7185              STRB     r5,[r0,#6]
                  |L2.208|
;;;149    			//////////////////
;;;150    
;;;151    		}
;;;152    		if (timer0_taskTimer_get()->flag_1s) {
0000d0  f7fffffe          BL       timer0_taskTimer_get
0000d4  7a80              LDRB     r0,[r0,#0xa]
0000d6  2800              CMP      r0,#0
0000d8  d007              BEQ      |L2.234|
;;;153    			static uint32_t cnt = 0;
;;;154    			timer0_taskTimer_get()->flag_1s = 0;
0000da  f7fffffe          BL       timer0_taskTimer_get
0000de  7285              STRB     r5,[r0,#0xa]
;;;155    			//////////////////
;;;156    
;;;157    			cnt++;
0000e0  6870              LDR      r0,[r6,#4]  ; cnt
0000e2  1c40              ADDS     r0,r0,#1
;;;158    //				log_debug("I am alive %d", cnt);
;;;159    
;;;160    			app_work_1s_pro();
0000e4  6070              STR      r0,[r6,#4]  ; cnt
0000e6  f7fffffe          BL       app_work_1s_pro
                  |L2.234|
;;;161    
;;;162    		}
;;;163    
;;;164    //		app_uart_pro();
;;;165    
;;;166    //////
;;;167    		ucKeyCode = bsp_GetKey();
0000ea  f7fffffe          BL       bsp_GetKey
;;;168    		if (ucKeyCode != KEY_NONE) {
0000ee  2800              CMP      r0,#0
0000f0  d0a9              BEQ      |L2.70|
;;;169    			static uint8_t press_long_lock = 0;
;;;170    			switch (ucKeyCode) {
0000f2  0003              MOVS     r3,r0
0000f4  f7fffffe          BL       __ARM_common_switch8
0000f8  07050a06          DCB      0x07,0x05,0x0a,0x06
0000fc  1b511f58          DCB      0x1b,0x51,0x1f,0x58
000100  0500              DCB      0x05,0x00
000102  e7a0              B        |L2.70|
;;;171    			case KEY_UP_K1:   //ACC
;;;172    				log_debug("ACC KEY up");
000104  2205              MOVS     r2,#5
000106  a34a              ADR      r3,|L2.560|
000108  21ac              MOVS     r1,#0xac
;;;173    
;;;174    				break;
00010a  e049              B        |L2.416|
;;;175    			case KEY_DOWN_K1:
;;;176    				log_debug("relay %s", Relay_IsOn() ? "on" : "off");
00010c  f7fffffe          BL       Relay_IsOn
000110  2800              CMP      r0,#0
000112  d001              BEQ      |L2.280|
000114  a049              ADR      r0,|L2.572|
000116  e000              B        |L2.282|
                  |L2.280|
000118  a049              ADR      r0,|L2.576|
                  |L2.282|
00011a  9000              STR      r0,[sp,#0]
00011c  a349              ADR      r3,|L2.580|
00011e  2205              MOVS     r2,#5
000120  21b0              MOVS     r1,#0xb0
000122  4835              LDR      r0,|L2.504|
000124  f7fffffe          BL       LITE_syslog
;;;177    
;;;178    				Relay_toggle();
000128  f7fffffe          BL       Relay_toggle
;;;179    				break;
00012c  e78b              B        |L2.70|
;;;180    			case KEY_LONG_K1:
;;;181    				log_debug("ACC KEY down");
00012e  2205              MOVS     r2,#5
000130  a347              ADR      r3,|L2.592|
000132  21b5              MOVS     r1,#0xb5
;;;182    				break;
000134  e034              B        |L2.416|
;;;183    			case KEY_UP_K2:   //LED
;;;184    				log_debug("LED KEY up");
000136  a34a              ADR      r3,|L2.608|
000138  2205              MOVS     r2,#5
00013a  21b8              MOVS     r1,#0xb8
00013c  482e              LDR      r0,|L2.504|
00013e  f7fffffe          BL       LITE_syslog
;;;185    
;;;186    				if (press_long_lock == 0) {
000142  7870              LDRB     r0,[r6,#1]  ; press_long_lock
000144  2800              CMP      r0,#0
000146  d126              BNE      |L2.406|
;;;187    					//					g_tWork.status.bits.DEMO = 0;
;;;188    					//					app_dome_start_current();
;;;189    					uint8_t buffer[16] = { 0 };
;;;190    					if (g_tWork.status.bits.blinkEnable) {
000148  4848              LDR      r0,|L2.620|
00014a  9500              STR      r5,[sp,#0]            ;189
00014c  9501              STR      r5,[sp,#4]            ;189
00014e  9502              STR      r5,[sp,#8]            ;189
000150  9503              STR      r5,[sp,#0xc]
000152  7900              LDRB     r0,[r0,#4]  ; g_tWork
000154  0700              LSLS     r0,r0,#28
000156  d51e              BPL      |L2.406|
;;;191    						uint8_t index = 0, i = 0;
000158  2700              MOVS     r7,#0
;;;192    						app_dome_next();
00015a  f7fffffe          BL       app_dome_next
;;;193    						buffer[index++] = LAMP2LCD_HEADER;
00015e  21f8              MOVS     r1,#0xf8
000160  4668              MOV      r0,sp
000162  7001              STRB     r1,[r0,#0]
;;;194    						buffer[index++] = 9;
000164  2109              MOVS     r1,#9
000166  7041              STRB     r1,[r0,#1]
;;;195    						buffer[index++] = KEY_DOWN_CMD;
000168  2103              MOVS     r1,#3
00016a  7081              STRB     r1,[r0,#2]
;;;196    						app_dome_get_current_Name(buffer + index, 8);
00016c  2108              MOVS     r1,#8
00016e  1cc0              ADDS     r0,r0,#3
000170  f7fffffe          BL       app_dome_get_current_Name
;;;197    						index += 8;
000174  210b              MOVS     r1,#0xb
000176  4668              MOV      r0,sp                 ;189
;;;198    						for (i = 0; i < (buffer[1] + 1); i++) {
000178  e006              B        |L2.392|
                  |L2.378|
;;;199    							buffer[index] += buffer[i + 1];
00017a  19c3              ADDS     r3,r0,r7
00017c  5c42              LDRB     r2,[r0,r1]
00017e  785b              LDRB     r3,[r3,#1]
000180  18d2              ADDS     r2,r2,r3
000182  1c7f              ADDS     r7,r7,#1
000184  5442              STRB     r2,[r0,r1]
000186  b2ff              UXTB     r7,r7                 ;198
                  |L2.392|
000188  7842              LDRB     r2,[r0,#1]            ;198
00018a  1c52              ADDS     r2,r2,#1              ;198
00018c  42ba              CMP      r2,r7                 ;198
00018e  d8f4              BHI      |L2.378|
000190  1c49              ADDS     r1,r1,#1              ;198
;;;200    						}
;;;201    						index++;
;;;202    						app_2d4_send(buffer, index);
000192  f7fffffe          BL       app_2d4_send
                  |L2.406|
;;;203    					}
;;;204    
;;;205    				}
;;;206    				press_long_lock = 0;
000196  7075              STRB     r5,[r6,#1]
;;;207    				break;
000198  e755              B        |L2.70|
;;;208    			case KEY_DOWN_K2:
;;;209    				log_debug("LED KEY down");
00019a  2205              MOVS     r2,#5
00019c  a334              ADR      r3,|L2.624|
00019e  21d1              MOVS     r1,#0xd1
                  |L2.416|
0001a0  4815              LDR      r0,|L2.504|
0001a2  f7fffffe          BL       LITE_syslog
0001a6  e74e              B        |L2.70|
;;;210    
;;;211    				break;
;;;212    			case KEY_LONG_K2:
;;;213    				log_debug("LED KEY long");
0001a8  a335              ADR      r3,|L2.640|
0001aa  2205              MOVS     r2,#5
0001ac  21d5              MOVS     r1,#0xd5
0001ae  4812              LDR      r0,|L2.504|
0001b0  f7fffffe          BL       LITE_syslog
;;;214    				press_long_lock = 1;
0001b4  2001              MOVS     r0,#1
;;;215    				if (g_tWork.status.bits.blinkEnable) {
0001b6  492d              LDR      r1,|L2.620|
0001b8  7070              STRB     r0,[r6,#1]            ;214
0001ba  6848              LDR      r0,[r1,#4]  ; g_tWork
0001bc  0702              LSLS     r2,r0,#28
0001be  d505              BPL      |L2.460|
;;;216    					g_tWork.status.bits.blinkEnable = 0;
0001c0  2208              MOVS     r2,#8
0001c2  4390              BICS     r0,r0,r2
;;;217    					//					g_tWork.status.bits.DEMO = 0;
;;;218    					app_dome_stop_current();
0001c4  6048              STR      r0,[r1,#4]  ; g_tWork
0001c6  f7fffffe          BL       app_dome_stop_current
0001ca  e73c              B        |L2.70|
                  |L2.460|
;;;219    				} else {
;;;220    					g_tWork.status.bits.blinkEnable = 1;
0001cc  2208              MOVS     r2,#8
0001ce  4310              ORRS     r0,r0,r2
;;;221    					g_tWork.status.bits.DEMO = 0;
0001d0  2204              MOVS     r2,#4
0001d2  4390              BICS     r0,r0,r2
;;;222    					//					app_dome_start(0, 0);
;;;223    					app_dome_start_current();
0001d4  6048              STR      r0,[r1,#4]  ; g_tWork
0001d6  f7fffffe          BL       app_dome_start_current
0001da  e734              B        |L2.70|
;;;224    				}
;;;225    				break;
;;;226    			}
;;;227    		}
;;;228    
;;;229    	}
;;;230    
;;;231    }
;;;232    
                          ENDP

                  |L2.476|
0001dc  6c616d70          DCB      "lamp",0
0001e0  00      
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L2.484|
                          DCD      SystemCoreClock
                  |L2.488|
0001e8  20435055          DCB      " CPU @ %dHz\r\n",0
0001ec  20402025
0001f0  64487a0d
0001f4  0a00    
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L2.504|
                          DCD      ||.constdata||
                  |L2.508|
0001fc  2b2d2d2d          DCB      "+-------------------------------------+ ",0
000200  2d2d2d2d
000204  2d2d2d2d
000208  2d2d2d2d
00020c  2d2d2d2d
000210  2d2d2d2d
000214  2d2d2d2d
000218  2d2d2d2d
00021c  2d2d2d2d
000220  2d2d2b20
000224  00      
000225  00                DCB      0
000226  00                DCB      0
000227  00                DCB      0
                  |L2.552|
                          DCD      ||.data||
                  |L2.556|
                          DCD      dome_running_param
                  |L2.560|
000230  41434320          DCB      "ACC KEY up",0
000234  4b455920
000238  757000  
00023b  00                DCB      0
                  |L2.572|
00023c  6f6e00            DCB      "on",0
00023f  00                DCB      0
                  |L2.576|
000240  6f666600          DCB      "off",0
                  |L2.580|
000244  72656c61          DCB      "relay %s",0
000248  79202573
00024c  00      
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L2.592|
000250  41434320          DCB      "ACC KEY down",0
000254  4b455920
000258  646f776e
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L2.608|
000260  4c454420          DCB      "LED KEY up",0
000264  4b455920
000268  757000  
00026b  00                DCB      0
                  |L2.620|
                          DCD      g_tWork
                  |L2.624|
000270  4c454420          DCB      "LED KEY down",0
000274  4b455920
000278  646f776e
00027c  00      
00027d  00                DCB      0
00027e  00                DCB      0
00027f  00                DCB      0
                  |L2.640|
000280  4c454420          DCB      "LED KEY long",0
000284  4b455920
000288  6c6f6e67
00028c  00      
00028d  00                DCB      0
00028e  00                DCB      0
00028f  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000004  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  flag_2d4
000000  00                DCB      0x00
                  press_long_lock
000001  000000            DCB      0x00,0x00,0x00
                  ||cnt||
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L21.16|
00000e  461d              MOV      r5,r3
                  |L21.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\App\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
