; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\main.crf ..\App\src\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;15     
;;;16     void SYS_Init(void) {
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0d              LDR      r4,|L1.60|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;17     	/* Unlock protected registers */
;;;18     	SYS_UnlockReg();
;;;19     #if 0
;;;20     	/* Set P5 multi-function pins for XTAL1 and XTAL2 */
;;;21     	SYS->P5_MFP &= ~(SYS_MFP_P50_Msk | SYS_MFP_P51_Msk);
;;;22     	SYS->P5_MFP |= (SYS_MFP_P50_XT1_IN | SYS_MFP_P51_XT1_OUT);
;;;23     
;;;24     	/*---------------------------------------------------------------------------------------------------------*/
;;;25     	/* Init System Clock                                                                                       */
;;;26     	/*---------------------------------------------------------------------------------------------------------*/
;;;27     
;;;28     	/* Enable external 12MHz XTAL, HIRC */
;;;29     	CLK->PWRCTL |= CLK_PWRCTL_XTL12M | CLK_PWRCTL_HIRCEN_Msk;
;;;30     
;;;31     	/* Waiting for clock ready */
;;;32     	CLK_WaitClockReady(CLK_STATUS_XTLSTB_Msk | CLK_STATUS_HIRCSTB_Msk);
;;;33     
;;;34     	/* Switch HCLK clock source to XTL */
;;;35     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_XTAL,CLK_CLKDIV_HCLK(1));
;;;36     
;;;37     	/* STCLK to XTL STCLK to XTL */
;;;38     	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_XTAL);
;;;39     #else
;;;40     
;;;41     	/* Enable  HIRC */
;;;42     //	CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
;;;43     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;44     	CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;45     
;;;46     	/* Wait for HIRC clock ready */
;;;47     	CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;48     
;;;49     	/* Select HCLK clock source as HIRC and and HCLK source divider as 1 */
;;;50     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;51     
;;;52     #endif
;;;53     
;;;54     	/* Set core clock as PLL_CLOCK from PLL */
;;;55     	CLK_SetCoreClock(PLL_CLOCK);
00002a  4805              LDR      r0,|L1.64|
00002c  f7fffffe          BL       CLK_SetCoreClock
;;;56     	/* To update the variable SystemCoreClock */
;;;57     	SystemCoreClockUpdate();
000030  f7fffffe          BL       SystemCoreClockUpdate
000034  2000              MOVS     r0,#0
000036  6020              STR      r0,[r4,#0]
;;;58     
;;;59     	/* Lock protected registers */
;;;60     	SYS_LockReg();
;;;61     }
000038  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x50000100
                  |L1.64|
                          DCD      0x02faf080

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     int main(void) {
000000  b51f              PUSH     {r0-r4,lr}
;;;67     	uint8_t ucKeyCode;
;;;68     	uint8_t dome_cnt = 0;
000002  2400              MOVS     r4,#0
;;;69     
;;;70     	/* Init System */
;;;71     	SYS_Init();
000004  f7fffffe          BL       SYS_Init
;;;72     
;;;73     #if 1
;;;74     	LITE_openlog("lamp");
000008  a073              ADR      r0,|L2.472|
00000a  f7fffffe          BL       LITE_openlog
;;;75     	LITE_set_loglevel(LOG_DEBUG_LEVEL);
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       LITE_set_loglevel
;;;76     #else
;;;77     	LITE_closelog();
;;;78     #endif
;;;79     
;;;80     	bsp_Init();
000014  f7fffffe          BL       bsp_Init
;;;81     
;;;82     	log_debug(" CPU @ %dHz\r\n", SystemCoreClock);
000018  4871              LDR      r0,|L2.480|
00001a  a372              ADR      r3,|L2.484|
00001c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001e  9000              STR      r0,[sp,#0]
000020  2205              MOVS     r2,#5
000022  2152              MOVS     r1,#0x52
000024  4873              LDR      r0,|L2.500|
000026  f7fffffe          BL       LITE_syslog
;;;83     
;;;84     	log_debug("+-------------------------------------+ ");
00002a  a373              ADR      r3,|L2.504|
00002c  2205              MOVS     r2,#5
00002e  2154              MOVS     r1,#0x54
000030  4870              LDR      r0,|L2.500|
000032  f7fffffe          BL       LITE_syslog
;;;85     #if 0
;;;86     	log_debug("+-------------------------------------+ ");
;;;87     
;;;88     	log_debug("default size: %d", sizeof(DOME_DEFAULT_T));
;;;89     	log_debug("dome size: %d", sizeof(DOME_RUNNING_T));
;;;90     	log_debug("header size: %d", sizeof(DOME_HEADER_T));
;;;91     	log_debug("submode size: %d", sizeof(SUBDOME_T));
;;;92     	log_debug("color size: %d", sizeof(COLOR_T));
;;;93     #endif
;;;94     
;;;95     	/**************/
;;;96     	app_2d4_init();
000036  f7fffffe          BL       app_2d4_init
;;;97     	app_work_Init();
00003a  f7fffffe          BL       app_work_Init
;;;98     
;;;99     	app_uart_Init();
00003e  f7fffffe          BL       app_uart_Init
;;;100    	app_dome_Init();
000042  f7fffffe          BL       app_dome_Init
;;;101    	/**************/
;;;102    
;;;103    	while (1) {
;;;104    		if (timer0_taskTimer_get()->flag_1ms) {
;;;105    			timer0_taskTimer_get()->flag_1ms = 0;
;;;106    			//////////////////
;;;107    #if 1
;;;108    			dome_cnt++;
;;;109    			if (dome_running_param.speed >= 50) {
;;;110    				if (dome_cnt > (10 + (dome_running_param.speed - 50) / 3)) {
;;;111    					dome_cnt = 0;
;;;112    					app_dome_interrupter();
;;;113    				}
;;;114    			} else {
;;;115    				if (dome_cnt > (10 - (50 - dome_running_param.speed) / 6)) {
;;;116    					dome_cnt = 0;
;;;117    					app_dome_interrupter();
;;;118    				}
;;;119    			}
;;;120    #endif
;;;121    		}
;;;122    
;;;123    		if (timer0_taskTimer_get()->flag_10ms) {
;;;124    			timer0_taskTimer_get()->flag_10ms = 0;
;;;125    			//////////////////
;;;126    			bsp_KeyScan();
;;;127    
;;;128    			app_uart_pro();
;;;129    
;;;130    			app_2d4_pro();
;;;131    		}
;;;132    		if (timer0_taskTimer_get()->flag_100ms) {
;;;133    			timer0_taskTimer_get()->flag_100ms = 0;
;;;134    			//////////////////
;;;135    
;;;136    //			app_work_100ms_pro();
;;;137    //			Repeat_Pro();
;;;138    
;;;139    		}
;;;140    		if (timer0_taskTimer_get()->flag_500ms) {
;;;141    			timer0_taskTimer_get()->flag_500ms = 0;
;;;142    			//////////////////
;;;143    
;;;144    		}
;;;145    		if (timer0_taskTimer_get()->flag_1s) {
;;;146    			static uint32_t cnt = 0;
;;;147    			timer0_taskTimer_get()->flag_1s = 0;
;;;148    			//////////////////
;;;149    			
;;;150    			cnt++;
;;;151    //				log_debug("I am alive %d", cnt);
;;;152    
;;;153    //			app_work_1s_pro();
;;;154    
;;;155    		}
;;;156    
;;;157    //		app_uart_pro();
;;;158    
;;;159    //////
;;;160    		ucKeyCode = bsp_GetKey();
;;;161    		if (ucKeyCode != KEY_NONE) {
;;;162    			static uint8_t press_long_lock = 0;
;;;163    			switch (ucKeyCode) {
;;;164    			case KEY_UP_K1:   //ACC
;;;165    				log_debug("ACC KEY up");
;;;166    
;;;167    				break;
;;;168    			case KEY_DOWN_K1:
;;;169    				log_debug("relay %s", Relay_IsOn() ? "on" : "off");
;;;170    
;;;171    				Relay_toggle();
;;;172    				break;
;;;173    			case KEY_LONG_K1:
;;;174    				log_debug("ACC KEY down");
;;;175    				break;
;;;176    			case KEY_UP_K2:   //LED
;;;177    				log_debug("LED KEY up");
;;;178    
;;;179    				if (press_long_lock == 0) {
;;;180    					//					g_tWork.status.bits.DEMO = 0;
;;;181    					//					app_dome_start_current();
;;;182    					uint8_t buffer[16] = { 0 };
000046  466e              MOV      r6,sp
000048  2500              MOVS     r5,#0
                  |L2.74|
00004a  f7fffffe          BL       timer0_taskTimer_get
00004e  7800              LDRB     r0,[r0,#0]            ;104
000050  2800              CMP      r0,#0                 ;104
000052  d01a              BEQ      |L2.138|
000054  f7fffffe          BL       timer0_taskTimer_get
000058  7005              STRB     r5,[r0,#0]            ;105
00005a  4872              LDR      r0,|L2.548|
00005c  1c64              ADDS     r4,r4,#1              ;105
00005e  7840              LDRB     r0,[r0,#1]            ;109  ; dome_running_param
000060  b2e4              UXTB     r4,r4                 ;108
000062  2832              CMP      r0,#0x32              ;109
000064  d305              BCC      |L2.114|
000066  2103              MOVS     r1,#3                 ;110
000068  3832              SUBS     r0,r0,#0x32           ;110
00006a  f7fffffe          BL       __aeabi_idivmod
00006e  300a              ADDS     r0,r0,#0xa            ;110
000070  e006              B        |L2.128|
                  |L2.114|
000072  2132              MOVS     r1,#0x32              ;115
000074  1a08              SUBS     r0,r1,r0              ;115
000076  2106              MOVS     r1,#6                 ;115
000078  f7fffffe          BL       __aeabi_idivmod
00007c  210a              MOVS     r1,#0xa               ;115
00007e  1a08              SUBS     r0,r1,r0              ;115
                  |L2.128|
000080  42a0              CMP      r0,r4                 ;115
000082  da02              BGE      |L2.138|
000084  2400              MOVS     r4,#0                 ;116
000086  f7fffffe          BL       app_dome_interrupter
                  |L2.138|
00008a  f7fffffe          BL       timer0_taskTimer_get
00008e  7880              LDRB     r0,[r0,#2]            ;123
000090  2800              CMP      r0,#0                 ;123
000092  d008              BEQ      |L2.166|
000094  f7fffffe          BL       timer0_taskTimer_get
000098  7085              STRB     r5,[r0,#2]            ;124
00009a  f7fffffe          BL       bsp_KeyScan
00009e  f7fffffe          BL       app_uart_pro
0000a2  f7fffffe          BL       app_2d4_pro
                  |L2.166|
0000a6  f7fffffe          BL       timer0_taskTimer_get
0000aa  7900              LDRB     r0,[r0,#4]            ;132
0000ac  2800              CMP      r0,#0                 ;132
0000ae  d002              BEQ      |L2.182|
0000b0  f7fffffe          BL       timer0_taskTimer_get
0000b4  7105              STRB     r5,[r0,#4]            ;133
                  |L2.182|
0000b6  f7fffffe          BL       timer0_taskTimer_get
0000ba  7980              LDRB     r0,[r0,#6]            ;140
0000bc  2800              CMP      r0,#0                 ;140
0000be  d002              BEQ      |L2.198|
0000c0  f7fffffe          BL       timer0_taskTimer_get
0000c4  7185              STRB     r5,[r0,#6]            ;141
                  |L2.198|
0000c6  f7fffffe          BL       timer0_taskTimer_get
0000ca  7a80              LDRB     r0,[r0,#0xa]          ;145
0000cc  2800              CMP      r0,#0                 ;145
0000ce  d006              BEQ      |L2.222|
0000d0  f7fffffe          BL       timer0_taskTimer_get
0000d4  7285              STRB     r5,[r0,#0xa]          ;147
0000d6  4854              LDR      r0,|L2.552|
0000d8  6841              LDR      r1,[r0,#4]            ;150  ; cnt
0000da  1c49              ADDS     r1,r1,#1              ;150
0000dc  6041              STR      r1,[r0,#4]            ;150  ; cnt
                  |L2.222|
0000de  f7fffffe          BL       bsp_GetKey
0000e2  2800              CMP      r0,#0                 ;161
0000e4  d0b1              BEQ      |L2.74|
0000e6  0003              MOVS     r3,r0                 ;163
0000e8  f7fffffe          BL       __ARM_common_switch8
0000ec  07050a06          DCB      0x07,0x05,0x0a,0x06
0000f0  1b541f5b          DCB      0x1b,0x54,0x1f,0x5b
0000f4  0500              DCB      0x05,0x00
0000f6  e7a8              B        |L2.74|
0000f8  2205              MOVS     r2,#5                 ;165
0000fa  a34c              ADR      r3,|L2.556|
0000fc  21a5              MOVS     r1,#0xa5              ;165
0000fe  e04c              B        |L2.410|
000100  f7fffffe          BL       Relay_IsOn
000104  2800              CMP      r0,#0                 ;169
000106  d001              BEQ      |L2.268|
000108  a04b              ADR      r0,|L2.568|
00010a  e000              B        |L2.270|
                  |L2.268|
00010c  a04b              ADR      r0,|L2.572|
                  |L2.270|
00010e  9000              STR      r0,[sp,#0]            ;169
000110  a34b              ADR      r3,|L2.576|
000112  2205              MOVS     r2,#5                 ;169
000114  21a9              MOVS     r1,#0xa9              ;169
000116  4837              LDR      r0,|L2.500|
000118  f7fffffe          BL       LITE_syslog
00011c  f7fffffe          BL       Relay_toggle
000120  e793              B        |L2.74|
000122  2205              MOVS     r2,#5                 ;174
000124  a349              ADR      r3,|L2.588|
000126  21ae              MOVS     r1,#0xae              ;174
000128  e037              B        |L2.410|
00012a  a34c              ADR      r3,|L2.604|
00012c  2205              MOVS     r2,#5                 ;177
00012e  21b1              MOVS     r1,#0xb1              ;177
000130  4830              LDR      r0,|L2.500|
000132  f7fffffe          BL       LITE_syslog
000136  483c              LDR      r0,|L2.552|
000138  7800              LDRB     r0,[r0,#0]            ;179  ; press_long_lock
00013a  2800              CMP      r0,#0                 ;179
00013c  d127              BNE      |L2.398|
;;;183    					if (g_tWork.status.bits.blinkEnable) {
00013e  484a              LDR      r0,|L2.616|
000140  9500              STR      r5,[sp,#0]            ;182
000142  9501              STR      r5,[sp,#4]            ;182
000144  9502              STR      r5,[sp,#8]            ;182
000146  9503              STR      r5,[sp,#0xc]
000148  7800              LDRB     r0,[r0,#0]  ; g_tWork
00014a  0700              LSLS     r0,r0,#28
00014c  d51f              BPL      |L2.398|
;;;184    						uint8_t index = 0, i = 0;
00014e  2700              MOVS     r7,#0
;;;185    						app_dome_next();
000150  f7fffffe          BL       app_dome_next
;;;186    						buffer[index++] = LAMP2LCD_HEADER;
000154  21f8              MOVS     r1,#0xf8
000156  466a              MOV      r2,sp
000158  7011              STRB     r1,[r2,#0]
;;;187    						buffer[index++] = 9;
00015a  2109              MOVS     r1,#9
00015c  7051              STRB     r1,[r2,#1]
;;;188    						buffer[index++] = KEY_DOWN_CMD;
00015e  2103              MOVS     r1,#3
000160  7091              STRB     r1,[r2,#2]
;;;189    						app_dome_get_current_Name(buffer + index, 8);
000162  1cf0              ADDS     r0,r6,#3
000164  2108              MOVS     r1,#8
000166  f7fffffe          BL       app_dome_get_current_Name
;;;190    						index += 8;
00016a  210b              MOVS     r1,#0xb
;;;191    						for (i = 0; i < (buffer[1] + 1); i++) {
00016c  e006              B        |L2.380|
                  |L2.366|
;;;192    							buffer[index] += buffer[i + 1];
00016e  19f2              ADDS     r2,r6,r7
000170  5c70              LDRB     r0,[r6,r1]
000172  7852              LDRB     r2,[r2,#1]
000174  1880              ADDS     r0,r0,r2
000176  1c7f              ADDS     r7,r7,#1
000178  5470              STRB     r0,[r6,r1]
00017a  b2ff              UXTB     r7,r7                 ;191
                  |L2.380|
00017c  4668              MOV      r0,sp                 ;191
00017e  7840              LDRB     r0,[r0,#1]            ;191
000180  1c40              ADDS     r0,r0,#1              ;191
000182  42b8              CMP      r0,r7                 ;191
000184  d8f3              BHI      |L2.366|
;;;193    						}
;;;194    						index++;
;;;195    						app_2d4_send(buffer, index);
000186  4668              MOV      r0,sp
000188  1c49              ADDS     r1,r1,#1
00018a  f7fffffe          BL       app_2d4_send
                  |L2.398|
;;;196    					}
;;;197    
;;;198    				}
;;;199    				press_long_lock = 0;
00018e  4826              LDR      r0,|L2.552|
000190  7005              STRB     r5,[r0,#0]
;;;200    				break;
000192  e75a              B        |L2.74|
;;;201    			case KEY_DOWN_K2:
;;;202    				log_debug("LED KEY down");
000194  2205              MOVS     r2,#5
000196  a335              ADR      r3,|L2.620|
000198  21ca              MOVS     r1,#0xca
                  |L2.410|
00019a  4816              LDR      r0,|L2.500|
00019c  f7fffffe          BL       LITE_syslog
0001a0  e753              B        |L2.74|
;;;203    
;;;204    				break;
;;;205    			case KEY_LONG_K2:
;;;206    				log_debug("LED KEY long");
0001a2  a336              ADR      r3,|L2.636|
0001a4  2205              MOVS     r2,#5
0001a6  21ce              MOVS     r1,#0xce
0001a8  4812              LDR      r0,|L2.500|
0001aa  f7fffffe          BL       LITE_syslog
;;;207    				press_long_lock = 1;
0001ae  491e              LDR      r1,|L2.552|
0001b0  2001              MOVS     r0,#1
0001b2  7008              STRB     r0,[r1,#0]
;;;208    				if (g_tWork.status.bits.blinkEnable) {
0001b4  492c              LDR      r1,|L2.616|
0001b6  6808              LDR      r0,[r1,#0]  ; g_tWork
0001b8  0702              LSLS     r2,r0,#28
0001ba  d505              BPL      |L2.456|
;;;209    					g_tWork.status.bits.blinkEnable = 0;
0001bc  2208              MOVS     r2,#8
0001be  4390              BICS     r0,r0,r2
;;;210    					//					g_tWork.status.bits.DEMO = 0;
;;;211    					app_dome_stop_current();
0001c0  6008              STR      r0,[r1,#0]  ; g_tWork
0001c2  f7fffffe          BL       app_dome_stop_current
0001c6  e740              B        |L2.74|
                  |L2.456|
;;;212    				} else {
;;;213    					g_tWork.status.bits.blinkEnable = 1;
0001c8  2208              MOVS     r2,#8
0001ca  4310              ORRS     r0,r0,r2
;;;214    					g_tWork.status.bits.DEMO = 0;
0001cc  2204              MOVS     r2,#4
0001ce  4390              BICS     r0,r0,r2
;;;215    					//					app_dome_start(0, 0);
;;;216    					app_dome_start_current();
0001d0  6008              STR      r0,[r1,#0]  ; g_tWork
0001d2  f7fffffe          BL       app_dome_start_current
0001d6  e738              B        |L2.74|
;;;217    				}
;;;218    				break;
;;;219    			}
;;;220    		}
;;;221    
;;;222    	}
;;;223    
;;;224    }
;;;225    
                          ENDP

                  |L2.472|
0001d8  6c616d70          DCB      "lamp",0
0001dc  00      
0001dd  00                DCB      0
0001de  00                DCB      0
0001df  00                DCB      0
                  |L2.480|
                          DCD      SystemCoreClock
                  |L2.484|
0001e4  20435055          DCB      " CPU @ %dHz\r\n",0
0001e8  20402025
0001ec  64487a0d
0001f0  0a00    
0001f2  00                DCB      0
0001f3  00                DCB      0
                  |L2.500|
                          DCD      ||.constdata||
                  |L2.504|
0001f8  2b2d2d2d          DCB      "+-------------------------------------+ ",0
0001fc  2d2d2d2d
000200  2d2d2d2d
000204  2d2d2d2d
000208  2d2d2d2d
00020c  2d2d2d2d
000210  2d2d2d2d
000214  2d2d2d2d
000218  2d2d2d2d
00021c  2d2d2b20
000220  00      
000221  00                DCB      0
000222  00                DCB      0
000223  00                DCB      0
                  |L2.548|
                          DCD      dome_running_param
                  |L2.552|
                          DCD      ||.data||
                  |L2.556|
00022c  41434320          DCB      "ACC KEY up",0
000230  4b455920
000234  757000  
000237  00                DCB      0
                  |L2.568|
000238  6f6e00            DCB      "on",0
00023b  00                DCB      0
                  |L2.572|
00023c  6f666600          DCB      "off",0
                  |L2.576|
000240  72656c61          DCB      "relay %s",0
000244  79202573
000248  00      
000249  00                DCB      0
00024a  00                DCB      0
00024b  00                DCB      0
                  |L2.588|
00024c  41434320          DCB      "ACC KEY down",0
000250  4b455920
000254  646f776e
000258  00      
000259  00                DCB      0
00025a  00                DCB      0
00025b  00                DCB      0
                  |L2.604|
00025c  4c454420          DCB      "LED KEY up",0
000260  4b455920
000264  757000  
000267  00                DCB      0
                  |L2.616|
                          DCD      g_tWork
                  |L2.620|
00026c  4c454420          DCB      "LED KEY down",0
000270  4b455920
000274  646f776e
000278  00      
000279  00                DCB      0
00027a  00                DCB      0
00027b  00                DCB      0
                  |L2.636|
00027c  4c454420          DCB      "LED KEY long",0
000280  4b455920
000284  6c6f6e67
000288  00      
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000004  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  press_long_lock
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||cnt||
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L21.16|
00000e  461d              MOV      r5,r3
                  |L21.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\App\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
