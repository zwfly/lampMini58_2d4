; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini58Series\Include -I..\Bsp -I..\Bsp\inc -I..\utils\inc -I..\App\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 --omf_browse=.\obj\main.crf ..\App\src\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;15     
;;;16     void SYS_Init(void) {
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0d              LDR      r4,|L1.60|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;17     	/* Unlock protected registers */
;;;18     	SYS_UnlockReg();
;;;19     #if 0
;;;20     	/* Set P5 multi-function pins for XTAL1 and XTAL2 */
;;;21     	SYS->P5_MFP &= ~(SYS_MFP_P50_Msk | SYS_MFP_P51_Msk);
;;;22     	SYS->P5_MFP |= (SYS_MFP_P50_XT1_IN | SYS_MFP_P51_XT1_OUT);
;;;23     
;;;24     	/*---------------------------------------------------------------------------------------------------------*/
;;;25     	/* Init System Clock                                                                                       */
;;;26     	/*---------------------------------------------------------------------------------------------------------*/
;;;27     
;;;28     	/* Enable external 12MHz XTAL, HIRC */
;;;29     	CLK->PWRCTL |= CLK_PWRCTL_XTL12M | CLK_PWRCTL_HIRCEN_Msk;
;;;30     
;;;31     	/* Waiting for clock ready */
;;;32     	CLK_WaitClockReady(CLK_STATUS_XTLSTB_Msk | CLK_STATUS_HIRCSTB_Msk);
;;;33     
;;;34     	/* Switch HCLK clock source to XTL */
;;;35     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_XTAL,CLK_CLKDIV_HCLK(1));
;;;36     
;;;37     	/* STCLK to XTL STCLK to XTL */
;;;38     	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_XTAL);
;;;39     #else
;;;40     
;;;41     	/* Enable  HIRC */
;;;42     //	CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
;;;43     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;44     	CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;45     
;;;46     	/* Wait for HIRC clock ready */
;;;47     	CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;48     
;;;49     	/* Select HCLK clock source as HIRC and and HCLK source divider as 1 */
;;;50     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;51     
;;;52     #endif
;;;53     
;;;54     	/* Set core clock as PLL_CLOCK from PLL */
;;;55     	CLK_SetCoreClock(PLL_CLOCK);
00002a  4805              LDR      r0,|L1.64|
00002c  f7fffffe          BL       CLK_SetCoreClock
;;;56     	/* To update the variable SystemCoreClock */
;;;57     	SystemCoreClockUpdate();
000030  f7fffffe          BL       SystemCoreClockUpdate
000034  2000              MOVS     r0,#0
000036  6020              STR      r0,[r4,#0]
;;;58     
;;;59     	/* Lock protected registers */
;;;60     	SYS_LockReg();
;;;61     }
000038  bd10              POP      {r4,pc}
;;;62     static uint8_t matchCode_flag = 0;
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x50000100
                  |L1.64|
                          DCD      0x02faf080

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     int main(void) {
000000  b088              SUB      sp,sp,#0x20
;;;67     
;;;68     	uint8_t ucKeyCode;
;;;69     	uint8_t dome_cnt = 0;
000002  2400              MOVS     r4,#0
;;;70     
;;;71     	/* Init System */
;;;72     	SYS_Init();
000004  f7fffffe          BL       SYS_Init
;;;73     
;;;74     #if 1
;;;75     	LITE_openlog("lamp");
000008  a090              ADR      r0,|L2.588|
00000a  f7fffffe          BL       LITE_openlog
;;;76     	LITE_set_loglevel(LOG_DEBUG_LEVEL);
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       LITE_set_loglevel
;;;77     #else
;;;78     	LITE_closelog();
;;;79     #endif
;;;80     
;;;81     	bsp_Init();
000014  f7fffffe          BL       bsp_Init
;;;82     
;;;83     	log_debug(" CPU @ %dHz\r\n", SystemCoreClock);
000018  488e              LDR      r0,|L2.596|
00001a  a38f              ADR      r3,|L2.600|
00001c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001e  9000              STR      r0,[sp,#0]
000020  2205              MOVS     r2,#5
000022  2153              MOVS     r1,#0x53
000024  4890              LDR      r0,|L2.616|
000026  f7fffffe          BL       LITE_syslog
;;;84     
;;;85     	log_debug("+-------------------------------------+ ");
00002a  a390              ADR      r3,|L2.620|
00002c  2205              MOVS     r2,#5
00002e  2155              MOVS     r1,#0x55
000030  488d              LDR      r0,|L2.616|
000032  f7fffffe          BL       LITE_syslog
;;;86     #if 0
;;;87     	log_debug("+-------------------------------------+ ");
;;;88     
;;;89     	log_debug("default size: %d", sizeof(DOME_DEFAULT_T));
;;;90     	log_debug("dome size: %d", sizeof(DOME_RUNNING_T));
;;;91     	log_debug("header size: %d", sizeof(DOME_HEADER_T));
;;;92     	log_debug("submode size: %d", sizeof(SUBDOME_T));
;;;93     	log_debug("color size: %d", sizeof(COLOR_T));
;;;94     #endif
;;;95     
;;;96     	/**************/
;;;97     
;;;98     	app_work_Init();
000036  f7fffffe          BL       app_work_Init
;;;99     
;;;100    	app_uart_Init();
00003a  f7fffffe          BL       app_uart_Init
;;;101    	app_dome_Init();
00003e  f7fffffe          BL       app_dome_Init
000042  2500              MOVS     r5,#0
;;;102    
;;;103    	/**************/
;;;104    
;;;105    	while (1) {
;;;106    		if (timer0_taskTimer_get()->flag_1ms) {
;;;107    			timer0_taskTimer_get()->flag_1ms = 0;
;;;108    			//////////////////
;;;109    #if 1
;;;110    			dome_cnt++;
;;;111    			if (dome_running_param.speed >= 50) {
;;;112    				if (dome_cnt > (10 + (dome_running_param.speed - 50) / 3)) {
;;;113    					dome_cnt = 0;
;;;114    					app_dome_interrupter();
;;;115    				}
;;;116    			} else {
;;;117    				if (dome_cnt > (10 - (50 - dome_running_param.speed) / 6)) {
;;;118    					dome_cnt = 0;
;;;119    					app_dome_interrupter();
;;;120    				}
;;;121    			}
;;;122    #endif
;;;123    		}
;;;124    
;;;125    		if (timer0_taskTimer_get()->flag_10ms) {
;;;126    			timer0_taskTimer_get()->flag_10ms = 0;
;;;127    			//////////////////
;;;128    			static uint8_t flag_2d4 = 0;
;;;129    			if (flag_2d4 == 0) {
000044  4e94              LDR      r6,|L2.664|
                  |L2.70|
000046  f7fffffe          BL       timer0_taskTimer_get
00004a  7800              LDRB     r0,[r0,#0]            ;106
00004c  2800              CMP      r0,#0                 ;106
00004e  d01a              BEQ      |L2.134|
000050  f7fffffe          BL       timer0_taskTimer_get
000054  7005              STRB     r5,[r0,#0]            ;107
000056  4891              LDR      r0,|L2.668|
000058  1c64              ADDS     r4,r4,#1              ;107
00005a  7840              LDRB     r0,[r0,#1]            ;111  ; dome_running_param
00005c  b2e4              UXTB     r4,r4                 ;110
00005e  2832              CMP      r0,#0x32              ;111
000060  d305              BCC      |L2.110|
000062  2103              MOVS     r1,#3                 ;112
000064  3832              SUBS     r0,r0,#0x32           ;112
000066  f7fffffe          BL       __aeabi_idivmod
00006a  300a              ADDS     r0,r0,#0xa            ;112
00006c  e006              B        |L2.124|
                  |L2.110|
00006e  2132              MOVS     r1,#0x32              ;117
000070  1a08              SUBS     r0,r1,r0              ;117
000072  2106              MOVS     r1,#6                 ;117
000074  f7fffffe          BL       __aeabi_idivmod
000078  210a              MOVS     r1,#0xa               ;117
00007a  1a08              SUBS     r0,r1,r0              ;117
                  |L2.124|
00007c  42a0              CMP      r0,r4                 ;117
00007e  da02              BGE      |L2.134|
000080  2400              MOVS     r4,#0                 ;118
000082  f7fffffe          BL       app_dome_interrupter
                  |L2.134|
000086  f7fffffe          BL       timer0_taskTimer_get
00008a  7880              LDRB     r0,[r0,#2]            ;125
00008c  2800              CMP      r0,#0                 ;125
00008e  d010              BEQ      |L2.178|
000090  f7fffffe          BL       timer0_taskTimer_get
000094  7085              STRB     r5,[r0,#2]            ;126
000096  7870              LDRB     r0,[r6,#1]  ; flag_2d4
000098  2800              CMP      r0,#0
00009a  d103              BNE      |L2.164|
;;;130    				flag_2d4 = 1;
00009c  2001              MOVS     r0,#1
00009e  7070              STRB     r0,[r6,#1]
;;;131    				app_2d4_init();
0000a0  f7fffffe          BL       app_2d4_init
                  |L2.164|
;;;132    			}
;;;133    			bsp_KeyScan();
0000a4  f7fffffe          BL       bsp_KeyScan
;;;134    
;;;135    			app_2d4_pro();
0000a8  f7fffffe          BL       app_2d4_pro
;;;136    
;;;137    			app_uart_pro(matchCode_flag);
0000ac  7830              LDRB     r0,[r6,#0]  ; matchCode_flag
0000ae  f7fffffe          BL       app_uart_pro
                  |L2.178|
;;;138    
;;;139    		}
;;;140    		if (timer0_taskTimer_get()->flag_100ms) {
0000b2  f7fffffe          BL       timer0_taskTimer_get
0000b6  7900              LDRB     r0,[r0,#4]
0000b8  2800              CMP      r0,#0
0000ba  d002              BEQ      |L2.194|
;;;141    			timer0_taskTimer_get()->flag_100ms = 0;
0000bc  f7fffffe          BL       timer0_taskTimer_get
0000c0  7105              STRB     r5,[r0,#4]
                  |L2.194|
;;;142    			//////////////////
;;;143    
;;;144    //			app_work_100ms_pro();
;;;145    //			Repeat_Pro();
;;;146    
;;;147    		}
;;;148    		if (timer0_taskTimer_get()->flag_500ms) {
0000c2  f7fffffe          BL       timer0_taskTimer_get
0000c6  7a00              LDRB     r0,[r0,#8]
0000c8  2800              CMP      r0,#0
0000ca  d02d              BEQ      |L2.296|
;;;149    			timer0_taskTimer_get()->flag_500ms = 0;
0000cc  f7fffffe          BL       timer0_taskTimer_get
0000d0  7205              STRB     r5,[r0,#8]
;;;150    			//////////////////
;;;151    
;;;152    			if (matchCode_flag == 0) {
0000d2  7830              LDRB     r0,[r6,#0]  ; matchCode_flag
0000d4  2800              CMP      r0,#0
0000d6  d127              BNE      |L2.296|
;;;153    				uint8_t index = 0, i;
;;;154    				uint8_t buffer[16] = { 0 };
0000d8  9504              STR      r5,[sp,#0x10]
0000da  9505              STR      r5,[sp,#0x14]
0000dc  9506              STR      r5,[sp,#0x18]
;;;155    				memset(buffer, 0, 16);
;;;156    
;;;157    				index = 0;
;;;158    				buffer[index++] = LAMP2LCD_HEADER;
0000de  21f8              MOVS     r1,#0xf8
0000e0  466a              MOV      r2,sp
0000e2  9507              STR      r5,[sp,#0x1c]
0000e4  7411              STRB     r1,[r2,#0x10]
;;;159    				buffer[index++] = 0x06;
0000e6  2106              MOVS     r1,#6
0000e8  7451              STRB     r1,[r2,#0x11]
0000ea  af04              ADD      r7,sp,#0x10           ;158
;;;160    				buffer[index++] = WIRELESS_MATCH_CODE_CMD;
0000ec  21fe              MOVS     r1,#0xfe
0000ee  7491              STRB     r1,[r2,#0x12]
0000f0  1cf8              ADDS     r0,r7,#3
;;;161    				app_get_my_address(buffer + index);
0000f2  f7fffffe          BL       app_get_my_address
;;;162    				index += 5;
0000f6  2108              MOVS     r1,#8
;;;163    				for (i = 0; i < (buffer[1] + 1); i++) {
0000f8  2000              MOVS     r0,#0
0000fa  e006              B        |L2.266|
                  |L2.252|
;;;164    					buffer[index] += buffer[i + 1];
0000fc  183b              ADDS     r3,r7,r0
0000fe  5c7a              LDRB     r2,[r7,r1]
000100  785b              LDRB     r3,[r3,#1]
000102  18d2              ADDS     r2,r2,r3
000104  1c40              ADDS     r0,r0,#1
000106  547a              STRB     r2,[r7,r1]
000108  b2c0              UXTB     r0,r0                 ;163
                  |L2.266|
00010a  466a              MOV      r2,sp                 ;163
00010c  7c52              LDRB     r2,[r2,#0x11]         ;163
00010e  1c52              ADDS     r2,r2,#1              ;163
000110  4282              CMP      r2,r0                 ;163
000112  d8f3              BHI      |L2.252|
;;;165    				}
;;;166    				index++;
;;;167    				app_2d4_send(buffer, index);
000114  a804              ADD      r0,sp,#0x10
000116  1c49              ADDS     r1,r1,#1
000118  f7fffffe          BL       app_2d4_send
;;;168    
;;;169    				log_debug("send match code");
00011c  a360              ADR      r3,|L2.672|
00011e  2205              MOVS     r2,#5
000120  21a9              MOVS     r1,#0xa9
000122  4851              LDR      r0,|L2.616|
000124  f7fffffe          BL       LITE_syslog
                  |L2.296|
;;;170    			}
;;;171    
;;;172    		}
;;;173    		if (timer0_taskTimer_get()->flag_1s) {
000128  f7fffffe          BL       timer0_taskTimer_get
00012c  7b00              LDRB     r0,[r0,#0xc]
00012e  2800              CMP      r0,#0
000130  d011              BEQ      |L2.342|
;;;174    			static uint16_t cnt = 0;
;;;175    			timer0_taskTimer_get()->flag_1s = 0;
000132  f7fffffe          BL       timer0_taskTimer_get
000136  7305              STRB     r5,[r0,#0xc]
;;;176    			//////////////////
;;;177    
;;;178    			cnt++;
000138  88b0              LDRH     r0,[r6,#4]  ; cnt
00013a  1c40              ADDS     r0,r0,#1
00013c  b280              UXTH     r0,r0
00013e  80b0              STRH     r0,[r6,#4]
;;;179    			if (cnt == 6) {
000140  2806              CMP      r0,#6
000142  d106              BNE      |L2.338|
;;;180    				if (matchCode_flag == 0) {
000144  7830              LDRB     r0,[r6,#0]  ; matchCode_flag
000146  2800              CMP      r0,#0
000148  d103              BNE      |L2.338|
;;;181    					matchCode_flag = 1;
00014a  2001              MOVS     r0,#1
00014c  7030              STRB     r0,[r6,#0]
;;;182    					app_2d4_switch_address();
00014e  f7fffffe          BL       app_2d4_switch_address
                  |L2.338|
;;;183    				}
;;;184    			}
;;;185    
;;;186    //				log_debug("I am alive %d", cnt);
;;;187    
;;;188    			app_work_1s_pro();
000152  f7fffffe          BL       app_work_1s_pro
                  |L2.342|
;;;189    
;;;190    		}
;;;191    
;;;192    //		app_uart_pro();
;;;193    
;;;194    //////
;;;195    		ucKeyCode = bsp_GetKey();
000156  f7fffffe          BL       bsp_GetKey
;;;196    		if (ucKeyCode != KEY_NONE) {
00015a  2800              CMP      r0,#0
00015c  d100              BNE      |L2.352|
00015e  e772              B        |L2.70|
                  |L2.352|
;;;197    			static uint8_t press_long_lock = 0;
;;;198    			switch (ucKeyCode) {
000160  0003              MOVS     r3,r0
000162  f7fffffe          BL       __ARM_common_switch8
000166  0705              DCB      0x07,0x05
000168  0a061b51          DCB      0x0a,0x06,0x1b,0x51
00016c  1f580500          DCB      0x1f,0x58,0x05,0x00
000170  e769              B        |L2.70|
;;;199    			case KEY_UP_K1:   //ACC
;;;200    				log_debug("ACC KEY up");
000172  2205              MOVS     r2,#5
000174  a34e              ADR      r3,|L2.688|
000176  21c8              MOVS     r1,#0xc8
;;;201    
;;;202    				break;
000178  e049              B        |L2.526|
;;;203    			case KEY_DOWN_K1:
;;;204    				log_debug("relay %s", Relay_IsOn() ? "on" : "off");
00017a  f7fffffe          BL       Relay_IsOn
00017e  2800              CMP      r0,#0
000180  d001              BEQ      |L2.390|
000182  a04e              ADR      r0,|L2.700|
000184  e000              B        |L2.392|
                  |L2.390|
000186  a04e              ADR      r0,|L2.704|
                  |L2.392|
000188  9000              STR      r0,[sp,#0]
00018a  a34e              ADR      r3,|L2.708|
00018c  2205              MOVS     r2,#5
00018e  21cc              MOVS     r1,#0xcc
000190  4835              LDR      r0,|L2.616|
000192  f7fffffe          BL       LITE_syslog
;;;205    
;;;206    				Relay_toggle();
000196  f7fffffe          BL       Relay_toggle
;;;207    				break;
00019a  e754              B        |L2.70|
;;;208    			case KEY_LONG_K1:
;;;209    				log_debug("ACC KEY down");
00019c  2205              MOVS     r2,#5
00019e  a34c              ADR      r3,|L2.720|
0001a0  21d1              MOVS     r1,#0xd1
;;;210    				break;
0001a2  e034              B        |L2.526|
;;;211    			case KEY_UP_K2:   //LED
;;;212    				log_debug("LED KEY up");
0001a4  a34e              ADR      r3,|L2.736|
0001a6  2205              MOVS     r2,#5
0001a8  21d4              MOVS     r1,#0xd4
0001aa  482f              LDR      r0,|L2.616|
0001ac  f7fffffe          BL       LITE_syslog
;;;213    
;;;214    				if (press_long_lock == 0) {
0001b0  78b0              LDRB     r0,[r6,#2]  ; press_long_lock
0001b2  2800              CMP      r0,#0
0001b4  d126              BNE      |L2.516|
;;;215    					//					g_tWork.status.bits.DEMO = 0;
;;;216    					//					app_dome_start_current();
;;;217    					uint8_t buffer[16] = { 0 };
;;;218    					if (g_tWork.status.bits.blinkEnable) {
0001b6  484d              LDR      r0,|L2.748|
0001b8  9500              STR      r5,[sp,#0]            ;217
0001ba  9501              STR      r5,[sp,#4]            ;217
0001bc  9502              STR      r5,[sp,#8]            ;217
0001be  9503              STR      r5,[sp,#0xc]
0001c0  7900              LDRB     r0,[r0,#4]  ; g_tWork
0001c2  0700              LSLS     r0,r0,#28
0001c4  d51e              BPL      |L2.516|
;;;219    						uint8_t index = 0, i = 0;
0001c6  2700              MOVS     r7,#0
;;;220    						app_dome_next();
0001c8  f7fffffe          BL       app_dome_next
;;;221    						buffer[index++] = LAMP2LCD_HEADER;
0001cc  21f8              MOVS     r1,#0xf8
0001ce  4668              MOV      r0,sp
0001d0  7001              STRB     r1,[r0,#0]
;;;222    						buffer[index++] = 9;
0001d2  2109              MOVS     r1,#9
0001d4  7041              STRB     r1,[r0,#1]
;;;223    						buffer[index++] = KEY_DOWN_CMD;
0001d6  2103              MOVS     r1,#3
0001d8  7081              STRB     r1,[r0,#2]
;;;224    						app_dome_get_current_Name(buffer + index, 8);
0001da  2108              MOVS     r1,#8
0001dc  1cc0              ADDS     r0,r0,#3
0001de  f7fffffe          BL       app_dome_get_current_Name
;;;225    						index += 8;
0001e2  210b              MOVS     r1,#0xb
0001e4  4668              MOV      r0,sp                 ;217
;;;226    						for (i = 0; i < (buffer[1] + 1); i++) {
0001e6  e006              B        |L2.502|
                  |L2.488|
;;;227    							buffer[index] += buffer[i + 1];
0001e8  19c3              ADDS     r3,r0,r7
0001ea  5c42              LDRB     r2,[r0,r1]
0001ec  785b              LDRB     r3,[r3,#1]
0001ee  18d2              ADDS     r2,r2,r3
0001f0  1c7f              ADDS     r7,r7,#1
0001f2  5442              STRB     r2,[r0,r1]
0001f4  b2ff              UXTB     r7,r7                 ;226
                  |L2.502|
0001f6  7842              LDRB     r2,[r0,#1]            ;226
0001f8  1c52              ADDS     r2,r2,#1              ;226
0001fa  42ba              CMP      r2,r7                 ;226
0001fc  d8f4              BHI      |L2.488|
0001fe  1c49              ADDS     r1,r1,#1              ;226
;;;228    						}
;;;229    						index++;
;;;230    						app_2d4_send(buffer, index);
000200  f7fffffe          BL       app_2d4_send
                  |L2.516|
;;;231    					}
;;;232    
;;;233    				}
;;;234    				press_long_lock = 0;
000204  70b5              STRB     r5,[r6,#2]
;;;235    				break;
000206  e71e              B        |L2.70|
;;;236    			case KEY_DOWN_K2:
;;;237    				log_debug("LED KEY down");
000208  2205              MOVS     r2,#5
00020a  a339              ADR      r3,|L2.752|
00020c  21ed              MOVS     r1,#0xed
                  |L2.526|
00020e  4816              LDR      r0,|L2.616|
000210  f7fffffe          BL       LITE_syslog
000214  e717              B        |L2.70|
;;;238    
;;;239    				break;
;;;240    			case KEY_LONG_K2:
;;;241    				log_debug("LED KEY long");
000216  a33a              ADR      r3,|L2.768|
000218  2205              MOVS     r2,#5
00021a  21f1              MOVS     r1,#0xf1
00021c  4812              LDR      r0,|L2.616|
00021e  f7fffffe          BL       LITE_syslog
;;;242    				press_long_lock = 1;
000222  2001              MOVS     r0,#1
;;;243    				if (g_tWork.status.bits.blinkEnable) {
000224  4931              LDR      r1,|L2.748|
000226  70b0              STRB     r0,[r6,#2]            ;242
000228  6848              LDR      r0,[r1,#4]  ; g_tWork
00022a  0702              LSLS     r2,r0,#28
00022c  d505              BPL      |L2.570|
;;;244    					g_tWork.status.bits.blinkEnable = 0;
00022e  2208              MOVS     r2,#8
000230  4390              BICS     r0,r0,r2
;;;245    					//					g_tWork.status.bits.DEMO = 0;
;;;246    					app_dome_stop_current();
000232  6048              STR      r0,[r1,#4]  ; g_tWork
000234  f7fffffe          BL       app_dome_stop_current
000238  e705              B        |L2.70|
                  |L2.570|
;;;247    				} else {
;;;248    					g_tWork.status.bits.blinkEnable = 1;
00023a  2208              MOVS     r2,#8
00023c  4310              ORRS     r0,r0,r2
;;;249    					g_tWork.status.bits.DEMO = 0;
00023e  2204              MOVS     r2,#4
000240  4390              BICS     r0,r0,r2
;;;250    					//					app_dome_start(0, 0);
;;;251    					app_dome_start_current();
000242  6048              STR      r0,[r1,#4]  ; g_tWork
000244  f7fffffe          BL       app_dome_start_current
000248  e6fd              B        |L2.70|
;;;252    				}
;;;253    				break;
;;;254    			}
;;;255    		}
;;;256    
;;;257    	}
;;;258    
;;;259    }
;;;260    
                          ENDP

00024a  0000              DCW      0x0000
                  |L2.588|
00024c  6c616d70          DCB      "lamp",0
000250  00      
000251  00                DCB      0
000252  00                DCB      0
000253  00                DCB      0
                  |L2.596|
                          DCD      SystemCoreClock
                  |L2.600|
000258  20435055          DCB      " CPU @ %dHz\r\n",0
00025c  20402025
000260  64487a0d
000264  0a00    
000266  00                DCB      0
000267  00                DCB      0
                  |L2.616|
                          DCD      ||.constdata||
                  |L2.620|
00026c  2b2d2d2d          DCB      "+-------------------------------------+ ",0
000270  2d2d2d2d
000274  2d2d2d2d
000278  2d2d2d2d
00027c  2d2d2d2d
000280  2d2d2d2d
000284  2d2d2d2d
000288  2d2d2d2d
00028c  2d2d2d2d
000290  2d2d2b20
000294  00      
000295  00                DCB      0
000296  00                DCB      0
000297  00                DCB      0
                  |L2.664|
                          DCD      ||.data||
                  |L2.668|
                          DCD      dome_running_param
                  |L2.672|
0002a0  73656e64          DCB      "send match code",0
0002a4  206d6174
0002a8  63682063
0002ac  6f646500
                  |L2.688|
0002b0  41434320          DCB      "ACC KEY up",0
0002b4  4b455920
0002b8  757000  
0002bb  00                DCB      0
                  |L2.700|
0002bc  6f6e00            DCB      "on",0
0002bf  00                DCB      0
                  |L2.704|
0002c0  6f666600          DCB      "off",0
                  |L2.708|
0002c4  72656c61          DCB      "relay %s",0
0002c8  79202573
0002cc  00      
0002cd  00                DCB      0
0002ce  00                DCB      0
0002cf  00                DCB      0
                  |L2.720|
0002d0  41434320          DCB      "ACC KEY down",0
0002d4  4b455920
0002d8  646f776e
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L2.736|
0002e0  4c454420          DCB      "LED KEY up",0
0002e4  4b455920
0002e8  757000  
0002eb  00                DCB      0
                  |L2.748|
                          DCD      g_tWork
                  |L2.752|
0002f0  4c454420          DCB      "LED KEY down",0
0002f4  4b455920
0002f8  646f776e
0002fc  00      
0002fd  00                DCB      0
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L2.768|
000300  4c454420          DCB      "LED KEY long",0
000304  4b455920
000308  6c6f6e67
00030c  00      
00030d  00                DCB      0
00030e  00                DCB      0
00030f  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000004  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  matchCode_flag
000000  00                DCB      0x00
                  flag_2d4
000001  00                DCB      0x00
                  press_long_lock
000002  0000              DCB      0x00,0x00
                  ||cnt||
000004  0000              DCW      0x0000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L22.16|
00000e  461d              MOV      r5,r3
                  |L22.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\App\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
